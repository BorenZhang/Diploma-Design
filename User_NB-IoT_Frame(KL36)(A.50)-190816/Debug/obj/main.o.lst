   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.userData_init,"ax",%progbits
  16              		.align	1
  17              		.global	userData_init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	userData_init:
  24              	.LFB39:
  25              		.file 1 "srcc/main.c"
   1:srcc/main.c   **** //======================================================================
   2:srcc/main.c   **** //文件名称：main.c（应用工程主函数）
   3:srcc/main.c   **** //框架提供：苏大arm技术中心（sumcu.suda.edu.cn）
   4:srcc/main.c   **** //版本更新：2017.08:1.0, 2019.1:A.10
   5:srcc/main.c   **** //功能描述：见本工程的<01_Doc>文件夹下Readme.txt文件
   6:srcc/main.c   **** //======================================================================
   7:srcc/main.c   **** #define GLOBLE_VAR
   8:srcc/main.c   **** #include "includes.h"      //包含总头文件
   9:srcc/main.c   **** 
  10:srcc/main.c   **** //----------------------------------------------------------------------
  11:srcc/main.c   **** //【根据实际需要增删】初始化重新烧录程序后63扇区的值
  12:srcc/main.c   **** __attribute__((section (".MacConfig"))) const FlashData flashInit[]=
  13:srcc/main.c   **** {
  14:srcc/main.c   ****     //①产品信息
  15:srcc/main.c   ****     " [金葫芦物联网] 葫芦模板  ",      //产品名称
  16:srcc/main.c   ****     "215000-000000-00001 ",     //产品序列号
  17:srcc/main.c   ****     "AHL-IoT-GEC   ",           //用户产品型号
  18:srcc/main.c   ****     "  金葫芦物联网有限责任制公司  ",   //生产厂家
  19:srcc/main.c   ****     "A.50",                     //用户软件版本softVer[4]
  20:srcc/main.c   **** 	1546272000,                 //生产时间的时间戳2019-01-01
  21:srcc/main.c   ****     "苏州大学软件开发人员",          //用户名
  22:srcc/main.c   ****     "13000000000",               //手机号
  23:srcc/main.c   ****     //②服务器信息
  24:srcc/main.c   ****     "116.62.63.164",           //CS-Monitor/CSFS所在的服务器IP
  25:srcc/main.c   ****     "26123",                   //CS-Monitor监听的端口号(如使用该句，须将下一句注释)
  26:srcc/main.c   **** //    "38978",                 //CSFS监听的端口号(如使用该句，须将上一句注释)
  27:srcc/main.c   ****     //③用户存入flash的信息
  28:srcc/main.c   ****     600,                          //发送时间间隔
  29:srcc/main.c   ****     0,                            //复位次数
  30:srcc/main.c   ****     "U0"                          //命令
  31:srcc/main.c   **** };
  32:srcc/main.c   **** //----------------------------------------------------------------------
  33:srcc/main.c   **** 
  34:srcc/main.c   **** //----------------------------------------------------------------------
  35:srcc/main.c   **** //【根据实际需要增删】声明使用到的内部函数
  36:srcc/main.c   **** //main.c使用的内部函数声明处
  37:srcc/main.c   **** void userData_init(UserData *data);   //初始化用户帧结构体data
  38:srcc/main.c   **** void userData_get(UserData *data);    //给用户帧结构体data赋值
  39:srcc/main.c   **** void LCD_Showfirst();                 //初始化LCD的显示，主要是标签
  40:srcc/main.c   **** uint_8 flag;
  41:srcc/main.c   **** //----------------------------------------------------------------------
  42:srcc/main.c   **** //主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
  43:srcc/main.c   **** int main(void)
  44:srcc/main.c   **** {
  45:srcc/main.c   ****     //（1）启动部分（开头）======
  46:srcc/main.c   ****     //（1.1）声明main函数使用的局部变量
  47:srcc/main.c   ****     uint_16 mi;                        //主程序使用到的16位循环变量
  48:srcc/main.c   ****     uint_64 mTmp;                      //主循环使用的临时变量
  49:srcc/main.c   ****     uint_32 mTmp1;                      //主循环使用的临时变量
  50:srcc/main.c   ****     uint_64 mLoopCount;                //记录循环次数
  51:srcc/main.c   ****     uint_64 mSec,mMin;                 //主循环使用的“秒”、“分”
  52:srcc/main.c   ****     uint_32 mTsi;                      //记录当前触摸按键次数
  53:srcc/main.c   ****     uint_8  mSendFlag;                 //发送数据标志位;1:发送;0:不发送
  54:srcc/main.c   ****     uint_8  mRetdata[100];              //存放uecom初始化返回的结果
  55:srcc/main.c   ****     uint_16 mUserLen;                  //需要发送的字节长度
  56:srcc/main.c   ****     uint_16 mFlashLen;                 //需要存储flash的字节长度
  57:srcc/main.c   ****     uint_64 mRecvCount;                //收到的次数
  58:srcc/main.c   ****     uint_8 mString[30];                //数字转文本使用的临时数组
  59:srcc/main.c   ****     uint_8 mCmd[2];                    //存储命令
  60:srcc/main.c   ****     uint_8 mflag;               //主循环使用的标志判断变量
  61:srcc/main.c   ****     uint_8 mFlashFlag;          //表明是否需要将数据写入flash
  62:srcc/main.c   ****     uint_8 mLCDFlag;            //表明是否需要更新LCD
  63:srcc/main.c   ****     uint_8 mLinkCount;          //表明基站连接次数
  64:srcc/main.c   **** 
  65:srcc/main.c   ****     uint_8  mSendData[1000];     //待发送数据缓冲区
  66:srcc/main.c   ****     uint_16 mSendLen;           //待发送数据的长度
  67:srcc/main.c   ****     uint_8  mLBS[30];           //存储LBS定位信息
  68:srcc/main.c   **** 
  69:srcc/main.c   ****     //（1.2）【不变】BIOS中API接口表首地址、用户中断处理程序名初始化
  70:srcc/main.c   ****     BIOS_API_Init();
  71:srcc/main.c   ****     gTimeSec=1548950401;         //默认2019-02-01 00:00:01
  72:srcc/main.c   ****     sysTimeSet(gTimeSec);        //设置系统时间初值
  73:srcc/main.c   ****     mTmp=sysTimeGet();            //获得当前系统时间（s)
  74:srcc/main.c   ****     //特别注意，（1.2）程序段不能删除，否则系统不能运行
  75:srcc/main.c   **** 
  76:srcc/main.c   ****     //（1.3）【不变】关总中断
  77:srcc/main.c   ****      DISABLE_INTERRUPTS;
  78:srcc/main.c   **** 
  79:srcc/main.c   ****     //（1.4）给主函数使用的局部变量赋初值
  80:srcc/main.c   ****     mLoopCount = 0;                    //清空循环次数
  81:srcc/main.c   ****     mSec=0;                            //清空“秒”
  82:srcc/main.c   ****     mMin=0;                            //清空“分”
  83:srcc/main.c   ****     mTsi=0;                            //清空触摸按键次数
  84:srcc/main.c   ****     mSendFlag = 1;                     //默认终端发送数据
  85:srcc/main.c   ****     mFlashFlag = 0;                    //默认不写入flash
  86:srcc/main.c   ****     mLinkCount=0;                      //基站连接次数=0
  87:srcc/main.c   ****     mUserLen = sizeof(UserData);      //获得需要发送的字节长度
  88:srcc/main.c   ****     mFlashLen = sizeof(FlashData);    //获得存入flash的字节长度
  89:srcc/main.c   ****     mRecvCount = 0;                    //清空接收次数
  90:srcc/main.c   ****     mLCDFlag = 0;                      //清零LCD更新标志位
  91:srcc/main.c   **** 
  92:srcc/main.c   ****     //（1.5）给全局变量赋初值
  93:srcc/main.c   ****     gRecvLength = 0;                   //收到数据的长度（单位：字节）
  94:srcc/main.c   ****     flag=1;                            //标志位，需要更新模组信息
  95:srcc/main.c   **** 
  96:srcc/main.c   ****     //（1.6）用户外设模块初始化
  97:srcc/main.c   ****     uecom_power(UECOM_ON);             //给通信模组供电
  98:srcc/main.c   ****     gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_ON);    //初始化红灯
  99:srcc/main.c   ****     timer_init(TIMER_LP,500);                   //LPTMR计时器初始化为500毫秒
 100:srcc/main.c   ****     tsi_init(TSI_TOUCH,TSI_VALUE);     //初始化触摸按键TSI
 101:srcc/main.c   ****     flash_init();                      //初始化flash
 102:srcc/main.c   ****     sysTimeSet(gTimeSec);              //设置系统时间初值
 103:srcc/main.c   ****     LCD_Init();                        //初始化LCD
 104:srcc/main.c   **** 
 105:srcc/main.c   **** //    printf("AHL-IoT-GEC start...  \n");
 106:srcc/main.c   **** 
 107:srcc/main.c   **** 
 108:srcc/main.c   ****     //【画瓢处】-初始化
 109:srcc/main.c   **** 
 110:srcc/main.c   **** 
 111:srcc/main.c   ****     //图形化编程之外设模块初始化处【Graphic9】
 112:srcc/main.c   **** 
 113:srcc/main.c   **** 
 114:srcc/main.c   ****     //（1.7）使能模块中断
 115:srcc/main.c   ****     timer_enable_int(TIMER_LP);                //使能LPTMR中断
 116:srcc/main.c   ****     tsi_enable_re_int(TSI_TOUCH);               //使能TSI中断
 117:srcc/main.c   ****     //图形化编程之外设模块使能中断处【Graphic10】
 118:srcc/main.c   **** 
 119:srcc/main.c   ****     //（1.8）【不变】开总中断
 120:srcc/main.c   ****     ENABLE_INTERRUPTS;
 121:srcc/main.c   **** 
 122:srcc/main.c   **** //    printf("Building NB-IoT communication...  \n");
 123:srcc/main.c   **** 
 124:srcc/main.c   ****     //（1.9）【根据实际需要增删】 主循环前的初始化操作
 125:srcc/main.c   ****     //（1.9.1）读取flash中的配置信息至gFlashData；初始化用户帧数据gUserData
 126:srcc/main.c   ****     //读取Flash中63扇区的参数信息到gFlashData中
 127:srcc/main.c   ****     flash_read_logic((uint_8*)(&gFlashData),63,0,sizeof(FlashData));
 128:srcc/main.c   ****     userData_init(&gUserData);         //初始化用户帧结构体gUserData
 129:srcc/main.c   ****     LCD_Showfirst();                   //LCD显示初始内容
 130:srcc/main.c   ****     //（1.9.2）判断复位状态，并将复位状态数据存储到flash中
 131:srcc/main.c   ****     mTmp = gFlashData.resetCount;      // 保存当前看门狗复位次数
 132:srcc/main.c   ****     if (BGET(RCM_SRS0_WDOG_SHIFT, RCM_SRS0))     //若为看门狗复位，则加1
 133:srcc/main.c   ****         gFlashData.resetCount++;
 134:srcc/main.c   ****     else if(BGET(RCM_SRS0_POR_SHIFT, RCM_SRS0))  //若为上电复位，则置零
 135:srcc/main.c   ****         gFlashData.resetCount = 0;
 136:srcc/main.c   ****     //若复位次数发送变化，则重新写入flash
 137:srcc/main.c   ****     if(gFlashData.resetCount!=mTmp)
 138:srcc/main.c   ****     {
 139:srcc/main.c   ****         flash_erase(63);
 140:srcc/main.c   ****         flash_write(63,0,mFlashLen,(uint_8*)(&gFlashData));
 141:srcc/main.c   ****     }
 142:srcc/main.c   ****     //（1.9.3）初始化通信模组，并在LCD上显示初始化过程
 143:srcc/main.c   ****     //LCD上一行最多显示28个字节
 144:srcc/main.c   ****     LCD_ShowString(6,300,BLUE,GRAY,    "AHL Init                    ");
 145:srcc/main.c   ****     for(;;)                           //初始化通信模组循环
 146:srcc/main.c   ****     {
 147:srcc/main.c   ****         //通信模组上电并等待延时等待约12秒
 148:srcc/main.c   ****         uecom_power(UECOM_ON);        //给通信模组供电
 149:srcc/main.c   ****         Delay_ms(6000);               //延时6秒
 150:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .                  ");
 151:srcc/main.c   ****         Delay_ms(6000);               //延时6秒
 152:srcc/main.c   ****         //通信模组初始化，包括联网和建立网络连接过程
 153:srcc/main.c   ****         //初始化通信模组
 154:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init ..                 ");
 155:srcc/main.c   ****         mflag =uecom_init();
 156:srcc/main.c   **** 
 157:srcc/main.c   ****         if(mflag)
 158:srcc/main.c   ****         {
 159:srcc/main.c   ****           if (mflag==1)
 160:srcc/main.c   ****               LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .. AT Error        ");
 161:srcc/main.c   ****           if (mflag==2)
 162:srcc/main.c   ****               LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .. sim Error       ");
 163:srcc/main.c   ****           uecom_power(UECOM_REBOOT);  //通信模组重启
 164:srcc/main.c   ****           continue;
 165:srcc/main.c   ****         }
 166:srcc/main.c   ****         //显示设备的IMSI号
 167:srcc/main.c   ****         uecom_modelInfo(mRetdata);    //获取通信模组信息
 168:srcc/main.c   ****         LCD_ShowString(60,85,BLUE,GRAY,mRetdata+20);
 169:srcc/main.c   **** 
 170:srcc/main.c   ****         //与基站建立连接
 171:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init ...                ");
 172:srcc/main.c   ****         mflag =uecom_linkBase();
 173:srcc/main.c   ****         while(mflag)
 174:srcc/main.c   ****          {
 175:srcc/main.c   ****          	mflag =uecom_linkBase();
 176:srcc/main.c   ****          	mLinkCount++; //连接次数+1
 177:srcc/main.c   ****          	if(mLinkCount>10)
 178:srcc/main.c   ****          	{
 179:srcc/main.c   ****          		mLinkCount=0;
 180:srcc/main.c   ****  				uecom_power(UECOM_OFF);    //通信模组重启
 181:srcc/main.c   ****  				uecom_delay_ms(6000);      //延时
 182:srcc/main.c   ****  				uecom_power(UECOM_REBOOT); //通信模组重启
 183:srcc/main.c   ****  				uecom_delay_ms(6000);      //延时
 184:srcc/main.c   ****  				break;
 185:srcc/main.c   ****          	}
 186:srcc/main.c   ****          }
 187:srcc/main.c   ****          if(mflag)
 188:srcc/main.c   ****          {
 189:srcc/main.c   ****  			LCD_ShowString(6,300,BLUE,GRAY,"AHL Init ...link base Error ");
 190:srcc/main.c   ****  			uecom_power(UECOM_OFF);    //通信模组重启
 191:srcc/main.c   ****  			uecom_delay_ms(6000);      //延时
 192:srcc/main.c   ****  			uecom_power(UECOM_REBOOT); //通信模组重启
 193:srcc/main.c   ****  			uecom_delay_ms(6000);      //延时
 194:srcc/main.c   ****  			continue;
 195:srcc/main.c   **** 
 196:srcc/main.c   ****          }
 197:srcc/main.c   ****         //显示信号强度和小区号（基站号）位置信息 LBS
 198:srcc/main.c   ****         for(mi=0;mi<5;mi++)
 199:srcc/main.c   ****         {
 200:srcc/main.c   ****             mflag = uecom_baseInfo(mRetdata);
 201:srcc/main.c   ****             if(mflag)
 202:srcc/main.c   ****             {
 203:srcc/main.c   ****                 Delay_ms(1000);
 204:srcc/main.c   ****                 continue;
 205:srcc/main.c   ****             }
 206:srcc/main.c   ****             ArrayCopy(mLBS,mRetdata+1,19);  //位置信息保存在mLBS中备用
 207:srcc/main.c   ****             LCD_ShowString(60,131,BLUE,GRAY,mRetdata+1);  //基站位置
 208:srcc/main.c   ****             LCD_ShowString(170,150,BLUE,GRAY,
 209:srcc/main.c   ****                     (uint_8 *)IntConvertToStr(mRetdata[0],mString));
 210:srcc/main.c   ****         }
 211:srcc/main.c   ****         //与服务器建立连接
 212:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init ....               ");
 213:srcc/main.c   ****         mflag =uecom_linkCS(gFlashData.serverIP,gFlashData.serverPort);
 214:srcc/main.c   ****         if(mflag)
 215:srcc/main.c   ****         {
 216:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL....Link CS-Monitor Error");
 217:srcc/main.c   ****             uecom_power(UECOM_REBOOT);  //通信模组重启
 218:srcc/main.c   ****             continue;
 219:srcc/main.c   ****         }
 220:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init ..... Successfully ");
 221:srcc/main.c   ****         break;
 222:srcc/main.c   ****     }
 223:srcc/main.c   **** 
 224:srcc/main.c   ****      //GNSS初始化
 225:srcc/main.c   ****      vuint_8 a=uecom_gnssSwitch (3);
 226:srcc/main.c   ****     //图形化编程之主循环开始前的初始化处【Graphic11】
 227:srcc/main.c   **** 
 228:srcc/main.c   **** //     printf("NB-IoT communication OK!  \n");
 229:srcc/main.c   **** 
 230:srcc/main.c   ****     //（1）启动部分（结尾）======
 231:srcc/main.c   **** 
 232:srcc/main.c   ****     //（2）主循环部分（开头）======
 233:srcc/main.c   ****     for(;;)
 234:srcc/main.c   ****     {
 235:srcc/main.c   ****         mLoopCount++;
 236:srcc/main.c   ****         //（2.1）一秒到达之后进行的操作
 237:srcc/main.c   ****         mTmp=sysTimeGet();              //获得当前系统时间
 238:srcc/main.c   ****         mTmp1=mTmp;
 239:srcc/main.c   ****         if (mTmp!=gTimeSec)             //1秒到
 240:srcc/main.c   ****         {
 241:srcc/main.c   ****             gTimeSec=mTmp;
 242:srcc/main.c   ****             gUserData.currentTime = mTmp;
 243:srcc/main.c   ****             //（2.1.1）更新当前秒数并在LCD上显示时间(time)
 244:srcc/main.c   ****             timeChange(gTimeSec,gTimeString);
 245:srcc/main.c   ****             printf(gTimeString);
 246:srcc/main.c   ****             printf("  \n");
 247:srcc/main.c   ****             LCD_ShowString(49,209,BLUE,GRAY,gTimeString);//LCD上显示时间
 248:srcc/main.c   ****             //（2.1.2）控制红灯闪烁
 249:srcc/main.c   ****             gpio_reverse(LIGHT_RED);    //红灯每秒闪烁一次
 250:srcc/main.c   ****             //（2.1.3）判断是否到达发送数据的时间
 251:srcc/main.c   ****             if(gUserData.currentTime%gFlashData.sendFrequencySec == 0 )
 252:srcc/main.c   ****             {
 253:srcc/main.c   ****                 mSendFlag = 1;                         //发送标志置1；
 254:srcc/main.c   ****             }
 255:srcc/main.c   ****         }
 256:srcc/main.c   ****         //（2.2）触摸一次TSI之后执行的操作
 257:srcc/main.c   ****         if (mTsi != gUserData.touchNum)   //触摸1次
 258:srcc/main.c   ****         {
 259:srcc/main.c   ****             mTsi = gUserData.touchNum;    //更新当前当前TSI触摸次数
 260:srcc/main.c   ****             if(gUserData.touchNum%3==0)   //若触摸达到3次，则发送一次数据
 261:srcc/main.c   ****                 mSendFlag = 1;
 262:srcc/main.c   ****         }
 263:srcc/main.c   ****         //（2.3）若需要执行发送数据操作，则进行下列操作
 264:srcc/main.c   ****         if(mSendFlag == 1)
 265:srcc/main.c   ****         {
 266:srcc/main.c   **** 			//（2.3.1）更新用户数据为最新数据
 267:srcc/main.c   **** 			userData_get(&gUserData);      //给用户帧结构体gUserData赋值
 268:srcc/main.c   **** 			//（2.3.2）根据命令，获得需要发送的数据
 269:srcc/main.c   **** 			if(gFlashData.frameCmd[0]=='U'&&gFlashData.frameCmd[1]=='0')
 270:srcc/main.c   **** 			{
 271:srcc/main.c   **** 				mSendLen = mUserLen;
 272:srcc/main.c   **** 				ArrayCopy(gUserData.cmd,gFlashData.frameCmd,2);
 273:srcc/main.c   **** 				ArrayCopy(mSendData,(uint_8 *)&gUserData,mSendLen);
 274:srcc/main.c   **** 			}
 275:srcc/main.c   **** 			else if(gFlashData.frameCmd[0]=='U'&&gFlashData.frameCmd[1]=='1')
 276:srcc/main.c   **** 			{
 277:srcc/main.c   **** 				ArrayCopy(mSendData,gFlashData.frameCmd,2);
 278:srcc/main.c   **** 				ArrayCopy(mSendData+2,gUserData.IMSI,15);
 279:srcc/main.c   **** 				ArrayCopy(mSendData+17,(uint_8 *)&gUserData.currentTime,8);
 280:srcc/main.c   **** 				ArrayCopy(mSendData+25,(uint_8 *)&gUserData.mcuTemp,4);
 281:srcc/main.c   **** 				ArrayCopy(mSendData+29,(uint_8 *)&gUserData.signalPower,1);
 282:srcc/main.c   **** 				ArrayCopy(mSendData+30,(uint_8 *)&gUserData.bright,2);
 283:srcc/main.c   **** 				ArrayCopy(mSendData+32,(uint_8 *)&gUserData.touchNum,2);
 284:srcc/main.c   **** 				ArrayCopy(mSendData+34,gUserData.lbs_location,25);
 285:srcc/main.c   **** 				//【画瓢处3】更改“U1”命令发送的数据
 286:srcc/main.c   **** 
 287:srcc/main.c   **** 			}
 288:srcc/main.c   **** 			//（2.3.3）显示信号强度
 289:srcc/main.c   **** 			LCD_ShowString(170,150,BLUE,GRAY,"     ");
 290:srcc/main.c   **** 			LCD_ShowString(170,150,BLUE,GRAY,
 291:srcc/main.c   **** 					(uint_8 *)IntConvertToStr(gUserData.signalPower,mString));
 292:srcc/main.c   **** 			//（2.3.4）UE模块发送数据
 293:srcc/main.c   **** 			LCD_ShowString(6,300,BLUE,GRAY,"AHL Send .                  ");
 294:srcc/main.c   **** 
 295:srcc/main.c   ****             //结构体的地址可直接强制转为数组的地址
 296:srcc/main.c   ****             mflag = uecom_send(mSendLen,mSendData);
 297:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Send ..                 ");
 298:srcc/main.c   ****             if(mflag)  goto main_loop1;    //数据发送失败，LCD显示提示
 299:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Send Successfully       ");
 300:srcc/main.c   ****             goto main_loop;
 301:srcc/main.c   ****         main_loop1:
 302:srcc/main.c   ****             //数据发送失败提示
 303:srcc/main.c   ****             switch(mflag)
 304:srcc/main.c   ****             {
 305:srcc/main.c   ****                 case 1:
 306:srcc/main.c   ****                     LCD_ShowString(6,300,BLUE,GRAY,"Send Error:Send Not Start   ");
 307:srcc/main.c   ****                     break;
 308:srcc/main.c   ****                 case 2:
 309:srcc/main.c   ****                     LCD_ShowString(6,300,BLUE,GRAY,"Send Error:Send Data Not OK ");
 310:srcc/main.c   ****                     break;
 311:srcc/main.c   ****             }
 312:srcc/main.c   ****             //重新初始化
 313:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit .                ");
 314:srcc/main.c   ****             uecom_init();
 315:srcc/main.c   ****             Delay_ms(100);
 316:srcc/main.c   ****             //进行两次初始化（防错）
 317:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit .                ");
 318:srcc/main.c   ****             uecom_init();
 319:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit ..               ");
 320:srcc/main.c   ****             uecom_linkBase();
 321:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit ...               ");
 322:srcc/main.c   ****             mflag = uecom_linkCS(gFlashData.serverIP,gFlashData.serverPort);
 323:srcc/main.c   ****             if(mflag)
 324:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit .... Fail        ");
 325:srcc/main.c   ****             else
 326:srcc/main.c   ****             {
 327:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit .... Success     ");
 328:srcc/main.c   ****                 //重新初始化成功后进行数据发送
 329:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Send .                  ");
 330:srcc/main.c   ****                 //结构体的地址可直接强制转为数组的地址
 331:srcc/main.c   ****                 mflag = uecom_send(mSendLen,mSendData);
 332:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Send ..                 ");
 333:srcc/main.c   ****                 if(mflag)  goto main_loop1;    //数据发送失败，LCD显示提示
 334:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Send Successfully       ");
 335:srcc/main.c   ****             }
 336:srcc/main.c   **** 
 337:srcc/main.c   ****             goto main_loop;
 338:srcc/main.c   ****         main_loop:
 339:srcc/main.c   ****             mSendFlag = 0;                       //修改发送标记
 340:srcc/main.c   ****         }
 341:srcc/main.c   ****         //（2.4）判断是否接收到服务器发来数据，回发
 342:srcc/main.c   ****         if(uecom_info(gRecvBuf,&gRecvLength)==0)
 343:srcc/main.c   ****         {
 344:srcc/main.c   ****             mRecvCount++;                        //接收次数+1
 345:srcc/main.c   **** 
 346:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Recv one frame          ");
 347:srcc/main.c   **** 
 348:srcc/main.c   ****             mflag = 0xff;
 349:srcc/main.c   ****             mSendLen = 0;
 350:srcc/main.c   ****             ArrayCopy(mCmd,gRecvBuf,2);
 351:srcc/main.c   ****             ArrayCopy(mSendData,gRecvBuf,2);
 352:srcc/main.c   ****             if(mCmd[0]=='A'&&mCmd[1]=='0')       //读取flash中的所有信息
 353:srcc/main.c   ****             {
 354:srcc/main.c   ****                 mSendLen = mFlashLen+2;
 355:srcc/main.c   ****                 ArrayCopy(mSendData+2,(uint_8*)(&gFlashData),mFlashLen);
 356:srcc/main.c   ****             }
 357:srcc/main.c   ****             else if(mCmd[0]=='A'&&mCmd[1]=='1')  //读取flash中的产品信息
 358:srcc/main.c   ****             {
 359:srcc/main.c   ****                 mSendLen = 145;
 360:srcc/main.c   ****                 ArrayCopy(mSendData+2,gFlashData.equipName,mSendLen-2);
 361:srcc/main.c   ****             }
 362:srcc/main.c   ****             else if(mCmd[0]=='A'&&mCmd[1]=='2')  //读取flash中的服务器信息
 363:srcc/main.c   ****             {
 364:srcc/main.c   ****                 mSendLen = 22;
 365:srcc/main.c   ****                 ArrayCopy(mSendData+2,gFlashData.serverIP,mSendLen-2);
 366:srcc/main.c   ****             }
 367:srcc/main.c   ****             else if(mCmd[0]=='A'&&mCmd[1]=='3')  //读取用户存入flash的信息
 368:srcc/main.c   ****             {
 369:srcc/main.c   ****                 mSendLen = 10;
 370:srcc/main.c   ****                 ArrayCopy(mSendData+2,(uint_8*)(&gFlashData.sendFrequencySec),mSendLen-2);
 371:srcc/main.c   ****             }
 372:srcc/main.c   ****             else if(mCmd[0]=='B'&&mCmd[1]=='0')   //更改flash中的所有信息
 373:srcc/main.c   ****             {
 374:srcc/main.c   ****             	ArrayCopy((uint_8 *)(gFlashData.equipName),(uint_8*)&(gRecvBuf[2]),mFlashLen);
 375:srcc/main.c   ****                 mFlashFlag = 1;
 376:srcc/main.c   ****                 mSendLen = 9;
 377:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 378:srcc/main.c   ****             }
 379:srcc/main.c   ****             else if(mCmd[0]=='B'&&mCmd[1]=='1')   //更改flash中的产品信息
 380:srcc/main.c   ****             {
 381:srcc/main.c   ****             	ArrayCopy((uint_8 *)(gFlashData.equipName),(uint_8*)&(gRecvBuf[2]),124);
 382:srcc/main.c   ****                 mFlashFlag = 1;
 383:srcc/main.c   ****                 mSendLen = 9;
 384:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 385:srcc/main.c   ****             }
 386:srcc/main.c   ****             else if(mCmd[0]=='B'&&mCmd[1]=='2')   //更改flash中的服务器信息
 387:srcc/main.c   ****             {
 388:srcc/main.c   ****             	ArrayCopy((uint_8 *)(gFlashData.serverIP),(uint_8*)&(gRecvBuf[2]),30);
 389:srcc/main.c   ****                 mFlashFlag = 1;
 390:srcc/main.c   ****                 mSendLen = 9;
 391:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 392:srcc/main.c   ****             }
 393:srcc/main.c   ****             else if(mCmd[0]=='B'&&mCmd[1]=='3')   //更改用户存入flash的信息
 394:srcc/main.c   ****             {
 395:srcc/main.c   ****             	ArrayCopy((uint_8 *)(&gFlashData.sendFrequencySec),(uint_8*)&(gRecvBuf[2]),8);
 396:srcc/main.c   ****                 mFlashFlag = 1;
 397:srcc/main.c   ****                 mSendLen = 9;
 398:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 399:srcc/main.c   ****             }
 400:srcc/main.c   ****             else if(mCmd[0]=='U'&&mCmd[1]=='0')   //获取“U0”命令要发送的数据
 401:srcc/main.c   ****             {
 402:srcc/main.c   ****             	ArrayCopy(gFlashData.frameCmd,mCmd,2);
 403:srcc/main.c   ****                 if(gRecvLength == mUserLen)       //若为整帧数据
 404:srcc/main.c   ****                 {
 405:srcc/main.c   ****                 	ArrayCopy((uint_8*)(&gUserData),gRecvBuf,mUserLen);
 406:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipName,gUserData.equipName,30);
 407:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipID,gUserData.equipID,20);
 408:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipType,gUserData.equipType,20);
 409:srcc/main.c   ****                 	ArrayCopy(gFlashData.vendor,gUserData.vendor,30);
 410:srcc/main.c   ****                     //[2018.8.18] 发送的软件版本取BIOS
 411:srcc/main.c   ****                     bios_version(mString);
 412:srcc/main.c   ****                     ArrayCopy(gUserData.softVer,mString,4);
 413:srcc/main.c   ****                     sysTimeSet(gUserData.currentTime);
 414:srcc/main.c   ****                     ArrayCopy(gFlashData.userName,gUserData.userName,20);
 415:srcc/main.c   ****                     ArrayCopy(gFlashData.phone,gUserData.phone,11);
 416:srcc/main.c   ****                     ArrayCopy(gFlashData.serverIP,gUserData.serverIP,15);
 417:srcc/main.c   ****                     ArrayCopy(gFlashData.serverPort,gUserData.serverPort,5);
 418:srcc/main.c   ****                     gFlashData.sendFrequencySec = gUserData.sendFrequencySec;
 419:srcc/main.c   ****                     gFlashData.resetCount = gUserData.resetCount;
 420:srcc/main.c   ****                     ArrayCopy(gFlashData.frameCmd,gUserData.cmd,2);
 421:srcc/main.c   ****                     mLCDFlag==1;
 422:srcc/main.c   ****                     mFlashFlag  =1;
 423:srcc/main.c   ****                 }
 424:srcc/main.c   ****                 else
 425:srcc/main.c   ****                 {
 426:srcc/main.c   ****                 	mFlashFlag  =0;
 427:srcc/main.c   ****                 }
 428:srcc/main.c   ****                 mLCDFlag=1;
 429:srcc/main.c   ****             }
 430:srcc/main.c   ****             else if(mCmd[0]=='U'&&mCmd[1]=='1')  //获取“U1”命令要发送的数据
 431:srcc/main.c   ****             {
 432:srcc/main.c   ****             	ArrayCopy(gFlashData.frameCmd,mCmd,2);
 433:srcc/main.c   ****                 if(gRecvLength == 59)
 434:srcc/main.c   ****                 {
 435:srcc/main.c   ****                 	ArrayCopy(gUserData.cmd,gRecvBuf,2);
 436:srcc/main.c   ****                 	ArrayCopy(gUserData.IMSI,gRecvBuf+2,15);
 437:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.currentTime,gRecvBuf+17,8);
 438:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.mcuTemp,gRecvBuf+25,4);
 439:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.signalPower,gRecvBuf+29,1);
 440:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.bright,gRecvBuf+30,2);
 441:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.touchNum,gRecvBuf+32,2);
 442:srcc/main.c   ****                 	ArrayCopy(gUserData.lbs_location,gRecvBuf+34,25);
 443:srcc/main.c   ****                 }
 444:srcc/main.c   ****                 mLCDFlag=1;
 445:srcc/main.c   ****             }
 446:srcc/main.c   ****             else                                //其他情况
 447:srcc/main.c   ****             {
 448:srcc/main.c   ****             }
 449:srcc/main.c   ****             if(mSendLen>0)                      //若有需要发送的数据
 450:srcc/main.c   ****             {
 451:srcc/main.c   ****                  mflag = uecom_send(mSendLen,mSendData); //数据发送
 452:srcc/main.c   ****             }
 453:srcc/main.c   ****             gRecvLength = 0;                    //接收数据长度清零，表明已经读取
 454:srcc/main.c   ****             if(mflag==0)
 455:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Reply Successfully      ");
 456:srcc/main.c   ****             else if(mflag == 0xff)
 457:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Recv Successfully       ");
 458:srcc/main.c   ****             else
 459:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"Send Error:Send Data Not OK ");
 460:srcc/main.c   ****              //判断是否需要写flash
 461:srcc/main.c   ****              if(mFlashFlag == 1)
 462:srcc/main.c   ****              {
 463:srcc/main.c   ****                 flash_erase(63);
 464:srcc/main.c   ****                 flash_write(63,0,mFlashLen,(uint_8*)(&gFlashData));
 465:srcc/main.c   ****                 mFlashFlag = 0;
 466:srcc/main.c   ****                 mLCDFlag=1;
 467:srcc/main.c   ****              }
 468:srcc/main.c   ****              if(mLCDFlag==1)
 469:srcc/main.c   ****              {
 470:srcc/main.c   ****                 LCD_Showfirst();                //更新LCD上的显示
 471:srcc/main.c   ****                 //补充显示显示设备的IMSI号、基站位置信息、接收次数
 472:srcc/main.c   ****                 uecom_modelInfo(mRetdata);      //获取通信模组信息
 473:srcc/main.c   ****                 LCD_ShowString(60,85,BLUE,GRAY,mRetdata+20);
 474:srcc/main.c   ****                 LCD_ShowString(60,131,BLUE,GRAY,mLBS);  //基站位置
 475:srcc/main.c   ****                 LCD_ShowString(90,251,BLUE,GRAY,IntConvertToStr(mRecvCount,mString));
 476:srcc/main.c   ****              }
 477:srcc/main.c   ****         }
 478:srcc/main.c   ****         //图形化编程之主循环流程扫描分支添加处【Graphic12】
 479:srcc/main.c   ****     }
 480:srcc/main.c   ****     //（2）主循环部分（结尾）======
 481:srcc/main.c   **** }
 482:srcc/main.c   **** 
 483:srcc/main.c   **** 
 484:srcc/main.c   **** //======以下为主函数调用的子函数======
 485:srcc/main.c   **** //=====================================================================
 486:srcc/main.c   **** //函数名称：userData_init
 487:srcc/main.c   **** //函数返回：无
 488:srcc/main.c   **** //参数说明：data：需要初始化的结构体数据
 489:srcc/main.c   **** //功能概要：初始化用户帧结构体data
 490:srcc/main.c   **** //=====================================================================
 491:srcc/main.c   **** void userData_init(UserData *data)            //初始化用户帧结构体
 492:srcc/main.c   **** {
  26              		.loc 1 492 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              		.cfi_def_cfa_offset 32
  39 0004 0500     		movs	r5, r0
 493:srcc/main.c   ****     uint_8 mString[10];
 494:srcc/main.c   ****     ArrayCopy(data->cmd,"U0",2);
  40              		.loc 1 494 0
  41 0006 0222     		movs	r2, #2
  42 0008 5B49     		ldr	r1, .L2
  43 000a FFF7FEFF 		bl	ArrayCopy
  44              	.LVL1:
 495:srcc/main.c   ****     ArrayCopy(gFlashData.frameCmd,data->cmd,2);
  45              		.loc 1 495 0
  46 000e 5B4E     		ldr	r6, .L2+4
  47 0010 0222     		movs	r2, #2
  48 0012 2900     		movs	r1, r5
  49 0014 3000     		movs	r0, r6
  50 0016 FFF7FEFF 		bl	ArrayCopy
  51              	.LVL2:
 496:srcc/main.c   ****     data->sn = 0;
  52              		.loc 1 496 0
  53 001a 0023     		movs	r3, #0
  54 001c AB70     		strb	r3, [r5, #2]
  55 001e EB70     		strb	r3, [r5, #3]
 497:srcc/main.c   ****     ArrayCopy(data->serverIP,gFlashData.serverIP,15);
  56              		.loc 1 497 0
  57 0020 3100     		movs	r1, r6
  58 0022 1C39     		subs	r1, r1, #28
  59 0024 2800     		movs	r0, r5
  60 0026 1330     		adds	r0, r0, #19
  61 0028 0F22     		movs	r2, #15
  62 002a FFF7FEFF 		bl	ArrayCopy
  63              	.LVL3:
 498:srcc/main.c   ****     ArrayCopy(data->serverPort,gFlashData.serverPort,5);
  64              		.loc 1 498 0
  65 002e 3100     		movs	r1, r6
  66 0030 0D39     		subs	r1, r1, #13
  67 0032 2800     		movs	r0, r5
  68 0034 2230     		adds	r0, r0, #34
  69 0036 0522     		movs	r2, #5
  70 0038 FFF7FEFF 		bl	ArrayCopy
  71              	.LVL4:
 499:srcc/main.c   ****     data->currentTime = gFlashData.productTime;
  72              		.loc 1 499 0
  73 003c 3400     		movs	r4, r6
  74 003e AB3C     		subs	r4, r4, #171
  75 0040 6823     		movs	r3, #104
  76 0042 E25C     		ldrb	r2, [r4, r3]
  77 0044 0133     		adds	r3, r3, #1
  78 0046 E35C     		ldrb	r3, [r4, r3]
  79 0048 1B02     		lsls	r3, r3, #8
  80 004a 1343     		orrs	r3, r2
  81 004c 6A22     		movs	r2, #106
  82 004e A25C     		ldrb	r2, [r4, r2]
  83 0050 1204     		lsls	r2, r2, #16
  84 0052 1343     		orrs	r3, r2
  85 0054 6B22     		movs	r2, #107
  86 0056 A25C     		ldrb	r2, [r4, r2]
  87 0058 1206     		lsls	r2, r2, #24
  88 005a 1A43     		orrs	r2, r3
  89 005c 6C23     		movs	r3, #108
  90 005e E35C     		ldrb	r3, [r4, r3]
  91 0060 6D21     		movs	r1, #109
  92 0062 615C     		ldrb	r1, [r4, r1]
  93 0064 0902     		lsls	r1, r1, #8
  94 0066 1943     		orrs	r1, r3
  95 0068 6E23     		movs	r3, #110
  96 006a E35C     		ldrb	r3, [r4, r3]
  97 006c 1B04     		lsls	r3, r3, #16
  98 006e 1943     		orrs	r1, r3
  99 0070 6F23     		movs	r3, #111
 100 0072 E35C     		ldrb	r3, [r4, r3]
 101 0074 1B06     		lsls	r3, r3, #24
 102 0076 0B43     		orrs	r3, r1
 103 0078 2900     		movs	r1, r5
 104 007a 2731     		adds	r1, r1, #39
 105 007c 0A70     		strb	r2, [r1]
 106 007e 100A     		lsrs	r0, r2, #8
 107 0080 4870     		strb	r0, [r1, #1]
 108 0082 100C     		lsrs	r0, r2, #16
 109 0084 8870     		strb	r0, [r1, #2]
 110 0086 120E     		lsrs	r2, r2, #24
 111 0088 CA70     		strb	r2, [r1, #3]
 112 008a 0B71     		strb	r3, [r1, #4]
 113 008c 1A0A     		lsrs	r2, r3, #8
 114 008e 4A71     		strb	r2, [r1, #5]
 115 0090 1A0C     		lsrs	r2, r3, #16
 116 0092 8A71     		strb	r2, [r1, #6]
 117 0094 1B0E     		lsrs	r3, r3, #24
 118 0096 CB71     		strb	r3, [r1, #7]
 500:srcc/main.c   ****     data->resetCount = gFlashData.resetCount;
 119              		.loc 1 500 0
 120 0098 A723     		movs	r3, #167
 121 009a E35C     		ldrb	r3, [r4, r3]
 122 009c A822     		movs	r2, #168
 123 009e A25C     		ldrb	r2, [r4, r2]
 124 00a0 1202     		lsls	r2, r2, #8
 125 00a2 1A43     		orrs	r2, r3
 126 00a4 A923     		movs	r3, #169
 127 00a6 E35C     		ldrb	r3, [r4, r3]
 128 00a8 1B04     		lsls	r3, r3, #16
 129 00aa 1A43     		orrs	r2, r3
 130 00ac AA23     		movs	r3, #170
 131 00ae E35C     		ldrb	r3, [r4, r3]
 132 00b0 1B06     		lsls	r3, r3, #24
 133 00b2 1343     		orrs	r3, r2
 134 00b4 2A00     		movs	r2, r5
 135 00b6 2F32     		adds	r2, r2, #47
 136 00b8 1370     		strb	r3, [r2]
 137 00ba 190A     		lsrs	r1, r3, #8
 138 00bc 5170     		strb	r1, [r2, #1]
 139 00be 190C     		lsrs	r1, r3, #16
 140 00c0 9170     		strb	r1, [r2, #2]
 141 00c2 1B0E     		lsrs	r3, r3, #24
 142 00c4 D370     		strb	r3, [r2, #3]
 501:srcc/main.c   ****     data->sendFrequencySec = gFlashData.sendFrequencySec;
 143              		.loc 1 501 0
 144 00c6 A323     		movs	r3, #163
 145 00c8 E35C     		ldrb	r3, [r4, r3]
 146 00ca A422     		movs	r2, #164
 147 00cc A25C     		ldrb	r2, [r4, r2]
 148 00ce 1202     		lsls	r2, r2, #8
 149 00d0 1A43     		orrs	r2, r3
 150 00d2 A523     		movs	r3, #165
 151 00d4 E35C     		ldrb	r3, [r4, r3]
 152 00d6 1B04     		lsls	r3, r3, #16
 153 00d8 1A43     		orrs	r2, r3
 154 00da A623     		movs	r3, #166
 155 00dc E35C     		ldrb	r3, [r4, r3]
 156 00de 1B06     		lsls	r3, r3, #24
 157 00e0 1343     		orrs	r3, r2
 158 00e2 2A00     		movs	r2, r5
 159 00e4 3332     		adds	r2, r2, #51
 160 00e6 1370     		strb	r3, [r2]
 161 00e8 190A     		lsrs	r1, r3, #8
 162 00ea 5170     		strb	r1, [r2, #1]
 163 00ec 1902     		lsls	r1, r3, #8
 164 00ee 090E     		lsrs	r1, r1, #24
 165 00f0 9170     		strb	r1, [r2, #2]
 166 00f2 1B0E     		lsrs	r3, r3, #24
 167 00f4 D370     		strb	r3, [r2, #3]
 502:srcc/main.c   ****     ArrayCopy(data->userName,gFlashData.userName,20);
 168              		.loc 1 502 0
 169 00f6 2100     		movs	r1, r4
 170 00f8 7031     		adds	r1, r1, #112
 171 00fa 2800     		movs	r0, r5
 172 00fc 3730     		adds	r0, r0, #55
 173 00fe 1422     		movs	r2, #20
 174 0100 FFF7FEFF 		bl	ArrayCopy
 175              	.LVL5:
 503:srcc/main.c   ****     //[2018.8.18] 发送的软件版本取BIOS
 504:srcc/main.c   ****     bios_version(mString);
 176              		.loc 1 504 0
 177 0104 1E4B     		ldr	r3, .L2+8
 178 0106 1B68     		ldr	r3, [r3]
 179 0108 1B69     		ldr	r3, [r3, #16]
 180 010a 01A8     		add	r0, sp, #4
 181 010c 9847     		blx	r3
 182              	.LVL6:
 505:srcc/main.c   ****     ArrayCopy(data->softVer,mString,4);
 183              		.loc 1 505 0
 184 010e 2800     		movs	r0, r5
 185 0110 4B30     		adds	r0, r0, #75
 186 0112 0422     		movs	r2, #4
 187 0114 01A9     		add	r1, sp, #4
 188 0116 FFF7FEFF 		bl	ArrayCopy
 189              	.LVL7:
 506:srcc/main.c   ****     ArrayCopy(data->equipName,gFlashData.equipName,30);
 190              		.loc 1 506 0
 191 011a 2800     		movs	r0, r5
 192 011c 4F30     		adds	r0, r0, #79
 193 011e 1E22     		movs	r2, #30
 194 0120 2100     		movs	r1, r4
 195 0122 FFF7FEFF 		bl	ArrayCopy
 196              	.LVL8:
 507:srcc/main.c   ****     ArrayCopy(data->equipID,gFlashData.equipID,20);
 197              		.loc 1 507 0
 198 0126 2100     		movs	r1, r4
 199 0128 1E31     		adds	r1, r1, #30
 200 012a 2800     		movs	r0, r5
 201 012c 6D30     		adds	r0, r0, #109
 202 012e 1422     		movs	r2, #20
 203 0130 FFF7FEFF 		bl	ArrayCopy
 204              	.LVL9:
 508:srcc/main.c   ****     ArrayCopy(data->equipType,gFlashData.equipType,20);
 205              		.loc 1 508 0
 206 0134 2100     		movs	r1, r4
 207 0136 3231     		adds	r1, r1, #50
 208 0138 2800     		movs	r0, r5
 209 013a 8130     		adds	r0, r0, #129
 210 013c 1422     		movs	r2, #20
 211 013e FFF7FEFF 		bl	ArrayCopy
 212              	.LVL10:
 509:srcc/main.c   ****     ArrayCopy(data->vendor,gFlashData.vendor,30);
 213              		.loc 1 509 0
 214 0142 2100     		movs	r1, r4
 215 0144 4631     		adds	r1, r1, #70
 216 0146 2800     		movs	r0, r5
 217 0148 9530     		adds	r0, r0, #149
 218 014a 1E22     		movs	r2, #30
 219 014c FFF7FEFF 		bl	ArrayCopy
 220              	.LVL11:
 510:srcc/main.c   ****     ArrayCopy(data->phone,gFlashData.phone,11);
 221              		.loc 1 510 0
 222 0150 2100     		movs	r1, r4
 223 0152 8431     		adds	r1, r1, #132
 224 0154 2800     		movs	r0, r5
 225 0156 CB30     		adds	r0, r0, #203
 226 0158 0B22     		movs	r2, #11
 227 015a FFF7FEFF 		bl	ArrayCopy
 228              	.LVL12:
 511:srcc/main.c   ****     data->touchNum = 0;
 229              		.loc 1 511 0
 230 015e E823     		movs	r3, #232
 231 0160 0022     		movs	r2, #0
 232 0162 EA54     		strb	r2, [r5, r3]
 233 0164 2B00     		movs	r3, r5
 234 0166 E833     		adds	r3, r3, #232
 235 0168 5A70     		strb	r2, [r3, #1]
 512:srcc/main.c   ****     ArrayCopy(data->cmd,gFlashData.frameCmd,2);
 236              		.loc 1 512 0
 237 016a 0232     		adds	r2, r2, #2
 238 016c 3100     		movs	r1, r6
 239 016e 2800     		movs	r0, r5
 240 0170 FFF7FEFF 		bl	ArrayCopy
 241              	.LVL13:
 513:srcc/main.c   **** }
 242              		.loc 1 513 0
 243 0174 04B0     		add	sp, sp, #16
 244              		@ sp needed
 245              	.LVL14:
 246 0176 70BD     		pop	{r4, r5, r6, pc}
 247              	.L3:
 248              		.align	2
 249              	.L2:
 250 0178 00000000 		.word	.LC0
 251 017c AB000000 		.word	gFlashData+171
 252 0180 00000000 		.word	bios_fun_point
 253              		.cfi_endproc
 254              	.LFE39:
 256              		.global	__aeabi_i2d
 257              		.global	__aeabi_dmul
 258              		.global	__aeabi_dsub
 259              		.global	__aeabi_ddiv
 260              		.global	__aeabi_d2iz
 261              		.section	.text.userData_get,"ax",%progbits
 262              		.align	1
 263              		.global	userData_get
 264              		.syntax unified
 265              		.code	16
 266              		.thumb_func
 267              		.fpu softvfp
 269              	userData_get:
 270              	.LFB40:
 514:srcc/main.c   **** 
 515:srcc/main.c   **** //=====================================================================
 516:srcc/main.c   **** //函数名称：userData_get
 517:srcc/main.c   **** //函数返回：无
 518:srcc/main.c   **** //参数说明：data：需要赋值的结构体数据
 519:srcc/main.c   **** //功能概要：给用户帧结构体data赋值
 520:srcc/main.c   **** //=====================================================================
 521:srcc/main.c   **** void userData_get(UserData *data)             //给用户帧结构体data赋值
 522:srcc/main.c   **** {
 271              		.loc 1 522 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 112
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL15:
 276 0000 70B5     		push	{r4, r5, r6, lr}
 277              		.cfi_def_cfa_offset 16
 278              		.cfi_offset 4, -16
 279              		.cfi_offset 5, -12
 280              		.cfi_offset 6, -8
 281              		.cfi_offset 14, -4
 282 0002 9EB0     		sub	sp, sp, #120
 283              		.cfi_def_cfa_offset 136
 284 0004 0400     		movs	r4, r0
 523:srcc/main.c   ****     uint_16 tmpAD,brightAD;
 524:srcc/main.c   ****     uint_8 tempertature[6];
 525:srcc/main.c   ****     uint_8 sTmp[40],i;
 526:srcc/main.c   ****     UecomGnssInfo gnss;                        //定义gnss变量
 527:srcc/main.c   ****     uint_8 buf[15];                            //临时的缓冲区
 528:srcc/main.c   ****     static uint_32 sn = 0;
 529:srcc/main.c   ****     data->sn = sn++;
 285              		.loc 1 529 0
 286 0006 594A     		ldr	r2, .L13
 287 0008 1368     		ldr	r3, [r2]
 288 000a 591C     		adds	r1, r3, #1
 289 000c 1160     		str	r1, [r2]
 290 000e 9BB2     		uxth	r3, r3
 291 0010 8370     		strb	r3, [r0, #2]
 292 0012 1B0A     		lsrs	r3, r3, #8
 293 0014 C370     		strb	r3, [r0, #3]
 530:srcc/main.c   ****     adc_init(AD_MCU_TEMP,16);
 294              		.loc 1 530 0
 295 0016 1021     		movs	r1, #16
 296 0018 1A20     		movs	r0, #26
 297              	.LVL16:
 298 001a FFF7FEFF 		bl	adc_init
 299              	.LVL17:
 531:srcc/main.c   ****     adc_init(AD_BRIGHT,16);
 300              		.loc 1 531 0
 301 001e 1021     		movs	r1, #16
 302 0020 0720     		movs	r0, #7
 303 0022 FFF7FEFF 		bl	adc_init
 304              	.LVL18:
 532:srcc/main.c   ****     tmpAD = adc_read(AD_MCU_TEMP);
 305              		.loc 1 532 0
 306 0026 1A20     		movs	r0, #26
 307 0028 FFF7FEFF 		bl	adc_read
 308              	.LVL19:
 533:srcc/main.c   ****     data->mcuTemp = (int_32)((25.0-(tmpAD*0.05-719)/1.715)*10);
 309              		.loc 1 533 0
 310 002c FFF7FEFF 		bl	__aeabi_i2d
 311              	.LVL20:
 312 0030 4F4A     		ldr	r2, .L13+4
 313 0032 504B     		ldr	r3, .L13+8
 314 0034 FFF7FEFF 		bl	__aeabi_dmul
 315              	.LVL21:
 316 0038 0022     		movs	r2, #0
 317 003a 4F4B     		ldr	r3, .L13+12
 318 003c FFF7FEFF 		bl	__aeabi_dsub
 319              	.LVL22:
 320 0040 4E4A     		ldr	r2, .L13+16
 321 0042 4F4B     		ldr	r3, .L13+20
 322 0044 FFF7FEFF 		bl	__aeabi_ddiv
 323              	.LVL23:
 324 0048 0200     		movs	r2, r0
 325 004a 0B00     		movs	r3, r1
 326 004c 0020     		movs	r0, #0
 327 004e 4D49     		ldr	r1, .L13+24
 328 0050 FFF7FEFF 		bl	__aeabi_dsub
 329              	.LVL24:
 330 0054 0022     		movs	r2, #0
 331 0056 4C4B     		ldr	r3, .L13+28
 332 0058 FFF7FEFF 		bl	__aeabi_dmul
 333              	.LVL25:
 334 005c FFF7FEFF 		bl	__aeabi_d2iz
 335              	.LVL26:
 336 0060 B323     		movs	r3, #179
 337 0062 E054     		strb	r0, [r4, r3]
 338 0064 020A     		lsrs	r2, r0, #8
 339 0066 2300     		movs	r3, r4
 340 0068 B333     		adds	r3, r3, #179
 341 006a 5A70     		strb	r2, [r3, #1]
 342 006c 020C     		lsrs	r2, r0, #16
 343 006e 9A70     		strb	r2, [r3, #2]
 344 0070 020E     		lsrs	r2, r0, #24
 345 0072 DA70     		strb	r2, [r3, #3]
 534:srcc/main.c   ****     LCD_ShowString(150,105,BLUE,GRAY,
 535:srcc/main.c   ****             (uint_8*)DoubleConvertToStr(data->mcuTemp/10.0,1,tempertature));
 346              		.loc 1 535 0
 347 0074 FFF7FEFF 		bl	__aeabi_i2d
 348              	.LVL27:
 349 0078 0022     		movs	r2, #0
 350 007a 434B     		ldr	r3, .L13+28
 351 007c FFF7FEFF 		bl	__aeabi_ddiv
 352              	.LVL28:
 353 0080 1CAB     		add	r3, sp, #112
 354 0082 0122     		movs	r2, #1
 355 0084 FFF7FEFF 		bl	DoubleConvertToStr
 356              	.LVL29:
 534:srcc/main.c   ****     LCD_ShowString(150,105,BLUE,GRAY,
 357              		.loc 1 534 0
 358 0088 0090     		str	r0, [sp]
 359 008a 404B     		ldr	r3, .L13+32
 360 008c 1F22     		movs	r2, #31
 361 008e 6921     		movs	r1, #105
 362 0090 9620     		movs	r0, #150
 363 0092 FFF7FEFF 		bl	LCD_ShowString
 364              	.LVL30:
 536:srcc/main.c   ****     //获取光照强度
 537:srcc/main.c   ****     brightAD = adc_read(AD_BRIGHT);
 365              		.loc 1 537 0
 366 0096 0720     		movs	r0, #7
 367 0098 FFF7FEFF 		bl	adc_read
 368              	.LVL31:
 538:srcc/main.c   ****     data->bright = brightAD;
 369              		.loc 1 538 0
 370 009c E623     		movs	r3, #230
 371 009e E054     		strb	r0, [r4, r3]
 372 00a0 000A     		lsrs	r0, r0, #8
 373              	.LVL32:
 374 00a2 2300     		movs	r3, r4
 375 00a4 E633     		adds	r3, r3, #230
 376 00a6 5870     		strb	r0, [r3, #1]
 539:srcc/main.c   **** 	if(flag==1)
 377              		.loc 1 539 0
 378 00a8 394B     		ldr	r3, .L13+36
 379 00aa 1B78     		ldrb	r3, [r3]
 380 00ac 012B     		cmp	r3, #1
 381 00ae 25D1     		bne	.L5
 540:srcc/main.c   **** 	{
 541:srcc/main.c   **** 		flag=0;
 382              		.loc 1 541 0
 383 00b0 374B     		ldr	r3, .L13+36
 384 00b2 0022     		movs	r2, #0
 385 00b4 1A70     		strb	r2, [r3]
 542:srcc/main.c   **** 		uecom_modelInfo(sTmp);
 386              		.loc 1 542 0
 387 00b6 12AD     		add	r5, sp, #72
 388 00b8 364E     		ldr	r6, .L13+40
 389 00ba BE23     		movs	r3, #190
 390 00bc 5B00     		lsls	r3, r3, #1
 391 00be 3268     		ldr	r2, [r6]
 392 00c0 D358     		ldr	r3, [r2, r3]
 393 00c2 2800     		movs	r0, r5
 394 00c4 9847     		blx	r3
 395              	.LVL33:
 543:srcc/main.c   **** 		ArrayCopy(data->IMEI,sTmp,15);
 396              		.loc 1 543 0
 397 00c6 0F22     		movs	r2, #15
 398 00c8 2900     		movs	r1, r5
 399 00ca 2000     		movs	r0, r4
 400 00cc D630     		adds	r0, r0, #214
 401 00ce FFF7FEFF 		bl	ArrayCopy
 402              	.LVL34:
 544:srcc/main.c   **** 		ArrayCopy(data->IMSI,sTmp+20,15);
 403              		.loc 1 544 0
 404 00d2 201D     		adds	r0, r4, #4
 405 00d4 0F22     		movs	r2, #15
 406 00d6 17A9     		add	r1, sp, #92
 407 00d8 FFF7FEFF 		bl	ArrayCopy
 408              	.LVL35:
 545:srcc/main.c   **** 		uecom_baseInfo(sTmp);
 409              		.loc 1 545 0
 410 00dc 3268     		ldr	r2, [r6]
 411 00de BC23     		movs	r3, #188
 412 00e0 5B00     		lsls	r3, r3, #1
 413 00e2 D358     		ldr	r3, [r2, r3]
 414 00e4 2800     		movs	r0, r5
 415 00e6 9847     		blx	r3
 416              	.LVL36:
 546:srcc/main.c   **** 		data->signalPower = sTmp[0];
 417              		.loc 1 546 0
 418 00e8 2A78     		ldrb	r2, [r5]
 419 00ea E523     		movs	r3, #229
 420 00ec E254     		strb	r2, [r4, r3]
 547:srcc/main.c   **** 		ArrayCopy(data->lbs_location,sTmp+1,19);
 421              		.loc 1 547 0
 422 00ee 1322     		movs	r2, #19
 423 00f0 4921     		movs	r1, #73
 424 00f2 6944     		add	r1, r1, sp
 425 00f4 2000     		movs	r0, r4
 426 00f6 FE30     		adds	r0, r0, #254
 427 00f8 FFF7FEFF 		bl	ArrayCopy
 428              	.LVL37:
 429              	.L5:
 548:srcc/main.c   **** 	}
 549:srcc/main.c   ****     //【画瓢处】-传感器数据获取
 550:srcc/main.c   **** 
 551:srcc/main.c   **** 
 552:srcc/main.c   ****     if(uecom_gnssGetInfo(&gnss) == 0)          //获取GNSS信息成功
 430              		.loc 1 552 0
 431 00fc 254B     		ldr	r3, .L13+40
 432 00fe 1A68     		ldr	r2, [r3]
 433 0100 C623     		movs	r3, #198
 434 0102 5B00     		lsls	r3, r3, #1
 435 0104 D358     		ldr	r3, [r2, r3]
 436 0106 06A8     		add	r0, sp, #24
 437 0108 9847     		blx	r3
 438              	.LVL38:
 439 010a 0028     		cmp	r0, #0
 440 010c 2CD1     		bne	.L4
 441 010e 06AA     		add	r2, sp, #24
 442 0110 2300     		movs	r3, r4
 443 0112 B733     		adds	r3, r3, #183
 444 0114 2000     		movs	r0, r4
 445 0116 C530     		adds	r0, r0, #197
 446              	.L7:
 447              	.LVL39:
 553:srcc/main.c   ****     {
 554:srcc/main.c   ****         for(i=0;i<14;i++)                      //获取时间
 555:srcc/main.c   ****            data->surpBaseInfo[i]=gnss.time[i];
 448              		.loc 1 555 0 discriminator 3
 449 0118 1178     		ldrb	r1, [r2]
 450 011a 1970     		strb	r1, [r3]
 451              	.LVL40:
 452 011c 0132     		adds	r2, r2, #1
 453              	.LVL41:
 454 011e 0133     		adds	r3, r3, #1
 554:srcc/main.c   ****            data->surpBaseInfo[i]=gnss.time[i];
 455              		.loc 1 554 0 discriminator 3
 456 0120 8342     		cmp	r3, r0
 457 0122 F9D1     		bne	.L7
 556:srcc/main.c   ****         DoubleConvertToStr(gnss.latitude,9,buf);           //存储纬度信息(保留6位小数)
 458              		.loc 1 556 0
 459 0124 02AB     		add	r3, sp, #8
 460 0126 0922     		movs	r2, #9
 461 0128 0A98     		ldr	r0, [sp, #40]
 462 012a 0B99     		ldr	r1, [sp, #44]
 463 012c FFF7FEFF 		bl	DoubleConvertToStr
 464              	.LVL42:
 465 0130 2200     		movs	r2, r4
 466 0132 EA32     		adds	r2, r2, #234
 467 0134 0023     		movs	r3, #0
 557:srcc/main.c   ****         for(i=0;i<=8;i++)
 558:srcc/main.c   ****         {
 559:srcc/main.c   ****             data->surplusInfo[i]=buf[i];
 468              		.loc 1 559 0
 469 0136 02A8     		add	r0, sp, #8
 470              	.LVL43:
 471              	.L8:
 472              		.loc 1 559 0 is_stmt 0 discriminator 3
 473 0138 195C     		ldrb	r1, [r3, r0]
 474 013a 1170     		strb	r1, [r2]
 475              	.LVL44:
 476 013c 0133     		adds	r3, r3, #1
 477              	.LVL45:
 478 013e 0132     		adds	r2, r2, #1
 557:srcc/main.c   ****         for(i=0;i<=8;i++)
 479              		.loc 1 557 0 is_stmt 1 discriminator 3
 480 0140 092B     		cmp	r3, #9
 481 0142 F9D1     		bne	.L8
 560:srcc/main.c   ****         }
 561:srcc/main.c   ****         data->surplusInfo[9]=',';
 482              		.loc 1 561 0
 483 0144 EA33     		adds	r3, r3, #234
 484 0146 2C22     		movs	r2, #44
 485 0148 E254     		strb	r2, [r4, r3]
 562:srcc/main.c   ****         DoubleConvertToStr(gnss.longitude,10,buf);         //存储经度信息(保留6位小数)
 486              		.loc 1 562 0
 487 014a 02AB     		add	r3, sp, #8
 488 014c 223A     		subs	r2, r2, #34
 489 014e 0C98     		ldr	r0, [sp, #48]
 490 0150 0D99     		ldr	r1, [sp, #52]
 491 0152 FFF7FEFF 		bl	DoubleConvertToStr
 492              	.LVL46:
 493 0156 F434     		adds	r4, r4, #244
 494              	.LVL47:
 495 0158 0023     		movs	r3, #0
 563:srcc/main.c   ****         for(i=0;i<=9;i++)
 564:srcc/main.c   ****         {
 565:srcc/main.c   ****             data->surplusInfo[i+10]=buf[i];
 496              		.loc 1 565 0
 497 015a 02A9     		add	r1, sp, #8
 498              	.LVL48:
 499              	.L9:
 500              		.loc 1 565 0 is_stmt 0 discriminator 3
 501 015c 5A5C     		ldrb	r2, [r3, r1]
 502 015e 2270     		strb	r2, [r4]
 503              	.LVL49:
 504 0160 0133     		adds	r3, r3, #1
 505              	.LVL50:
 506 0162 0134     		adds	r4, r4, #1
 563:srcc/main.c   ****         for(i=0;i<=9;i++)
 507              		.loc 1 563 0 is_stmt 1 discriminator 3
 508 0164 0A2B     		cmp	r3, #10
 509 0166 F9D1     		bne	.L9
 510              	.L4:
 566:srcc/main.c   ****         }
 567:srcc/main.c   ****     }
 568:srcc/main.c   **** }
 511              		.loc 1 568 0
 512 0168 1EB0     		add	sp, sp, #120
 513              		@ sp needed
 514 016a 70BD     		pop	{r4, r5, r6, pc}
 515              	.L14:
 516              		.align	2
 517              	.L13:
 518 016c 00000000 		.word	.LANCHOR0
 519 0170 9A999999 		.word	-1717986918
 520 0174 9999A93F 		.word	1068079513
 521 0178 00788640 		.word	1082554368
 522 017c 713D0AD7 		.word	-687194767
 523 0180 A370FB3F 		.word	1073442979
 524 0184 00003940 		.word	1077477376
 525 0188 00002440 		.word	1076101120
 526 018c 30840000 		.word	33840
 527 0190 00000000 		.word	flag
 528 0194 00000000 		.word	bios_fun_point
 529              		.cfi_endproc
 530              	.LFE40:
 532              		.global	__aeabi_ui2d
 533              		.section	.text.LCD_Showfirst,"ax",%progbits
 534              		.align	1
 535              		.global	LCD_Showfirst
 536              		.syntax unified
 537              		.code	16
 538              		.thumb_func
 539              		.fpu softvfp
 541              	LCD_Showfirst:
 542              	.LFB41:
 569:srcc/main.c   **** 
 570:srcc/main.c   **** //=====================================================================
 571:srcc/main.c   **** //函数名称：LCD_Showfirst
 572:srcc/main.c   **** //函数返回：无
 573:srcc/main.c   **** //参数说明：无
 574:srcc/main.c   **** //功能概要：初始化LCD上电显示的内容
 575:srcc/main.c   **** //=====================================================================
 576:srcc/main.c   **** void LCD_Showfirst()
 577:srcc/main.c   **** {
 543              		.loc 1 577 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 40
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 548              		.cfi_def_cfa_offset 20
 549              		.cfi_offset 4, -20
 550              		.cfi_offset 5, -16
 551              		.cfi_offset 6, -12
 552              		.cfi_offset 7, -8
 553              		.cfi_offset 14, -4
 554 0002 C646     		mov	lr, r8
 555 0004 00B5     		push	{lr}
 556              		.cfi_def_cfa_offset 24
 557              		.cfi_offset 8, -24
 558 0006 8CB0     		sub	sp, sp, #48
 559              		.cfi_def_cfa_offset 72
 578:srcc/main.c   ****     uint_8 temp[30] = {0};
 560              		.loc 1 578 0
 561 0008 04AD     		add	r5, sp, #16
 562 000a 1E22     		movs	r2, #30
 563 000c 0021     		movs	r1, #0
 564 000e 2800     		movs	r0, r5
 565 0010 FFF7FEFF 		bl	memset
 566              	.LVL51:
 579:srcc/main.c   ****     uint_16 tmpAD;
 580:srcc/main.c   ****     uint_32 mk;
 581:srcc/main.c   ****     uint_8 tempertature[6];
 582:srcc/main.c   ****     //（1）设置全局底色为灰色
 583:srcc/main.c   ****     LCD_DrawSurface(0,0,240,320,GRAY);    //240*320像素LCD
 567              		.loc 1 583 0
 568 0014 A023     		movs	r3, #160
 569 0016 AE4C     		ldr	r4, .L16
 570 0018 0094     		str	r4, [sp]
 571 001a 5B00     		lsls	r3, r3, #1
 572 001c F022     		movs	r2, #240
 573 001e 0021     		movs	r1, #0
 574 0020 0020     		movs	r0, #0
 575 0022 FFF7FEFF 		bl	LCD_DrawSurface
 576              	.LVL52:
 584:srcc/main.c   ****     //（2）设置第一区（标题区）
 585:srcc/main.c   ****     LCD_aotu(2,2,238,38,1);               //LCD指定区域凸起
 577              		.loc 1 585 0
 578 0026 0127     		movs	r7, #1
 579 0028 0097     		str	r7, [sp]
 580 002a 2623     		movs	r3, #38
 581 002c EE22     		movs	r2, #238
 582 002e 0221     		movs	r1, #2
 583 0030 0220     		movs	r0, #2
 584 0032 FFF7FEFF 		bl	LCD_aotu
 585              	.LVL53:
 586:srcc/main.c   ****     LCD_ShowString(66,15,RED,GRAY,"金葫芦IoT-GEC"); //红字
 586              		.loc 1 586 0
 587 0036 F822     		movs	r2, #248
 588 0038 A64B     		ldr	r3, .L16+4
 589 003a 0093     		str	r3, [sp]
 590 003c 2300     		movs	r3, r4
 591 003e 1202     		lsls	r2, r2, #8
 592 0040 0F21     		movs	r1, #15
 593 0042 4220     		movs	r0, #66
 594 0044 FFF7FEFF 		bl	LCD_ShowString
 595              	.LVL54:
 587:srcc/main.c   ****     //（3）设置第二区（与通信无关区）
 588:srcc/main.c   ****     LCD_aotu(2,43,238,123,0);             //LCD指定区域凹下
 596              		.loc 1 588 0
 597 0048 0026     		movs	r6, #0
 598 004a 0096     		str	r6, [sp]
 599 004c 7B23     		movs	r3, #123
 600 004e EE22     		movs	r2, #238
 601 0050 2B21     		movs	r1, #43
 602 0052 0220     		movs	r0, #2
 603 0054 FFF7FEFF 		bl	LCD_aotu
 604              	.LVL55:
 589:srcc/main.c   ****     //显示型号
 590:srcc/main.c   ****     LCD_ShowString(6,45,BLACK,GRAY,"[Type]                     ");
 605              		.loc 1 590 0
 606 0058 9F4B     		ldr	r3, .L16+8
 607 005a 0093     		str	r3, [sp]
 608 005c 2300     		movs	r3, r4
 609 005e 0022     		movs	r2, #0
 610 0060 2D21     		movs	r1, #45
 611 0062 0620     		movs	r0, #6
 612 0064 FFF7FEFF 		bl	LCD_ShowString
 613              	.LVL56:
 591:srcc/main.c   ****     uecom_typeGet(temp);
 614              		.loc 1 591 0
 615 0068 9C4B     		ldr	r3, .L16+12
 616 006a 9846     		mov	r8, r3
 617 006c C023     		movs	r3, #192
 618 006e 5B00     		lsls	r3, r3, #1
 619 0070 4246     		mov	r2, r8
 620 0072 1268     		ldr	r2, [r2]
 621 0074 D358     		ldr	r3, [r2, r3]
 622 0076 2800     		movs	r0, r5
 623 0078 9847     		blx	r3
 624              	.LVL57:
 592:srcc/main.c   ****     temp[20]=0;
 625              		.loc 1 592 0
 626 007a 2E75     		strb	r6, [r5, #20]
 593:srcc/main.c   ****     LCD_ShowString(60,45,BLUE,GRAY,temp);
 627              		.loc 1 593 0
 628 007c 0095     		str	r5, [sp]
 629 007e 2300     		movs	r3, r4
 630 0080 1F22     		movs	r2, #31
 631 0082 2D21     		movs	r1, #45
 632 0084 3C20     		movs	r0, #60
 633 0086 FFF7FEFF 		bl	LCD_ShowString
 634              	.LVL58:
 594:srcc/main.c   ****     //显示BIOS软件版本
 595:srcc/main.c   ****     LCD_ShowString(6,65,BLACK,GRAY,"[BIOS_VER]                  ");
 635              		.loc 1 595 0
 636 008a 954B     		ldr	r3, .L16+16
 637 008c 0093     		str	r3, [sp]
 638 008e 2300     		movs	r3, r4
 639 0090 0022     		movs	r2, #0
 640 0092 4121     		movs	r1, #65
 641 0094 0620     		movs	r0, #6
 642 0096 FFF7FEFF 		bl	LCD_ShowString
 643              	.LVL59:
 596:srcc/main.c   ****     uecom_version(temp);   //取uecom版本号（作为BIOS版本号）
 644              		.loc 1 596 0
 645 009a 4346     		mov	r3, r8
 646 009c 1A68     		ldr	r2, [r3]
 647 009e C223     		movs	r3, #194
 648 00a0 5B00     		lsls	r3, r3, #1
 649 00a2 D358     		ldr	r3, [r2, r3]
 650 00a4 2800     		movs	r0, r5
 651 00a6 9847     		blx	r3
 652              	.LVL60:
 597:srcc/main.c   ****     LCD_ShowString(88,65,BLUE,GRAY,temp);   //显示BIOS软件版本
 653              		.loc 1 597 0
 654 00a8 0095     		str	r5, [sp]
 655 00aa 2300     		movs	r3, r4
 656 00ac 1F22     		movs	r2, #31
 657 00ae 4121     		movs	r1, #65
 658 00b0 5820     		movs	r0, #88
 659 00b2 FFF7FEFF 		bl	LCD_ShowString
 660              	.LVL61:
 598:srcc/main.c   ****     //显示user软件版本
 599:srcc/main.c   ****     LCD_ShowString(120,65,BLACK,GRAY,"[USER_VER]    ");
 661              		.loc 1 599 0
 662 00b6 8B4B     		ldr	r3, .L16+20
 663 00b8 0093     		str	r3, [sp]
 664 00ba 2300     		movs	r3, r4
 665 00bc 0022     		movs	r2, #0
 666 00be 4121     		movs	r1, #65
 667 00c0 7820     		movs	r0, #120
 668 00c2 FFF7FEFF 		bl	LCD_ShowString
 669              	.LVL62:
 600:srcc/main.c   ****     ArrayCopy(temp,gFlashData.softVer,4);
 670              		.loc 1 600 0
 671 00c6 884B     		ldr	r3, .L16+24
 672 00c8 9846     		mov	r8, r3
 673 00ca 0422     		movs	r2, #4
 674 00cc 1900     		movs	r1, r3
 675 00ce 2800     		movs	r0, r5
 676 00d0 FFF7FEFF 		bl	ArrayCopy
 677              	.LVL63:
 601:srcc/main.c   ****     temp[5]=0;
 678              		.loc 1 601 0
 679 00d4 6E71     		strb	r6, [r5, #5]
 602:srcc/main.c   ****     LCD_ShowString(200,65,BLUE,GRAY,temp);
 680              		.loc 1 602 0
 681 00d6 0095     		str	r5, [sp]
 682 00d8 2300     		movs	r3, r4
 683 00da 1F22     		movs	r2, #31
 684 00dc 4121     		movs	r1, #65
 685 00de C820     		movs	r0, #200
 686 00e0 FFF7FEFF 		bl	LCD_ShowString
 687              	.LVL64:
 603:srcc/main.c   ****     LCD_ShowString(6,85,BLACK,GRAY,"[IMSI]                      ");
 688              		.loc 1 603 0
 689 00e4 814B     		ldr	r3, .L16+28
 690 00e6 0093     		str	r3, [sp]
 691 00e8 2300     		movs	r3, r4
 692 00ea 0022     		movs	r2, #0
 693 00ec 5521     		movs	r1, #85
 694 00ee 0620     		movs	r0, #6
 695 00f0 FFF7FEFF 		bl	LCD_ShowString
 696              	.LVL65:
 604:srcc/main.c   ****     //显示MCU温度
 605:srcc/main.c   ****     LCD_ShowString(6,105,BLACK,GRAY,"[MCU_temperature]           ");
 697              		.loc 1 605 0
 698 00f4 7E4B     		ldr	r3, .L16+32
 699 00f6 0093     		str	r3, [sp]
 700 00f8 2300     		movs	r3, r4
 701 00fa 0022     		movs	r2, #0
 702 00fc 6921     		movs	r1, #105
 703 00fe 0620     		movs	r0, #6
 704 0100 FFF7FEFF 		bl	LCD_ShowString
 705              	.LVL66:
 606:srcc/main.c   ****     adc_init(AD_MCU_TEMP,16);
 706              		.loc 1 606 0
 707 0104 1021     		movs	r1, #16
 708 0106 1A20     		movs	r0, #26
 709 0108 FFF7FEFF 		bl	adc_init
 710              	.LVL67:
 607:srcc/main.c   ****     tmpAD = adc_read(AD_MCU_TEMP);
 711              		.loc 1 607 0
 712 010c 1A20     		movs	r0, #26
 713 010e FFF7FEFF 		bl	adc_read
 714              	.LVL68:
 608:srcc/main.c   ****     mk = (int_32)((25.0-(tmpAD*0.05-719)/1.715)*10); //温度与AD值的换算公式
 715              		.loc 1 608 0
 716 0112 FFF7FEFF 		bl	__aeabi_i2d
 717              	.LVL69:
 718 0116 774A     		ldr	r2, .L16+36
 719 0118 774B     		ldr	r3, .L16+40
 720 011a FFF7FEFF 		bl	__aeabi_dmul
 721              	.LVL70:
 722 011e 0022     		movs	r2, #0
 723 0120 764B     		ldr	r3, .L16+44
 724 0122 FFF7FEFF 		bl	__aeabi_dsub
 725              	.LVL71:
 726 0126 764A     		ldr	r2, .L16+48
 727 0128 764B     		ldr	r3, .L16+52
 728 012a FFF7FEFF 		bl	__aeabi_ddiv
 729              	.LVL72:
 730 012e 0200     		movs	r2, r0
 731 0130 0B00     		movs	r3, r1
 732 0132 0020     		movs	r0, #0
 733 0134 7449     		ldr	r1, .L16+56
 734 0136 FFF7FEFF 		bl	__aeabi_dsub
 735              	.LVL73:
 736 013a 0022     		movs	r2, #0
 737 013c 734B     		ldr	r3, .L16+60
 738 013e FFF7FEFF 		bl	__aeabi_dmul
 739              	.LVL74:
 740 0142 FFF7FEFF 		bl	__aeabi_d2iz
 741              	.LVL75:
 609:srcc/main.c   ****     LCD_ShowString(150,105,BLUE,GRAY,(uint_8*)DoubleConvertToStr(mk/10.0,1,tempertature));
 742              		.loc 1 609 0
 743 0146 FFF7FEFF 		bl	__aeabi_ui2d
 744              	.LVL76:
 745 014a 0022     		movs	r2, #0
 746 014c 6F4B     		ldr	r3, .L16+60
 747 014e FFF7FEFF 		bl	__aeabi_ddiv
 748              	.LVL77:
 749 0152 02AB     		add	r3, sp, #8
 750 0154 0122     		movs	r2, #1
 751 0156 FFF7FEFF 		bl	DoubleConvertToStr
 752              	.LVL78:
 753 015a 0090     		str	r0, [sp]
 754 015c 2300     		movs	r3, r4
 755 015e 1F22     		movs	r2, #31
 756 0160 6921     		movs	r1, #105
 757 0162 9620     		movs	r0, #150
 758 0164 FFF7FEFF 		bl	LCD_ShowString
 759              	.LVL79:
 610:srcc/main.c   ****     //（4）设置第三区（与通信相关）
 611:srcc/main.c   ****     LCD_aotu(2,127,238,228,1);            //LCD指定区域凸起
 760              		.loc 1 611 0
 761 0168 0097     		str	r7, [sp]
 762 016a E423     		movs	r3, #228
 763 016c EE22     		movs	r2, #238
 764 016e 7F21     		movs	r1, #127
 765 0170 0220     		movs	r0, #2
 766 0172 FFF7FEFF 		bl	LCD_aotu
 767              	.LVL80:
 612:srcc/main.c   ****     LCD_ShowString(6,131,BLACK,GRAY,"[LBS]                      ");
 768              		.loc 1 612 0
 769 0176 664B     		ldr	r3, .L16+64
 770 0178 0093     		str	r3, [sp]
 771 017a 2300     		movs	r3, r4
 772 017c 0022     		movs	r2, #0
 773 017e 8321     		movs	r1, #131
 774 0180 0620     		movs	r0, #6
 775 0182 FFF7FEFF 		bl	LCD_ShowString
 776              	.LVL81:
 613:srcc/main.c   ****     LCD_ShowString(6,149,BLACK,GRAY,"[Signal strength(%)]       ");
 777              		.loc 1 613 0
 778 0186 634B     		ldr	r3, .L16+68
 779 0188 0093     		str	r3, [sp]
 780 018a 2300     		movs	r3, r4
 781 018c 0022     		movs	r2, #0
 782 018e 9521     		movs	r1, #149
 783 0190 0620     		movs	r0, #6
 784 0192 FFF7FEFF 		bl	LCD_ShowString
 785              	.LVL82:
 614:srcc/main.c   ****     //显示IP:PT (IP:PORT)
 615:srcc/main.c   ****     LCD_ShowString(6,169,BLACK,GRAY,"[IP:PT]                    ");
 786              		.loc 1 615 0
 787 0196 604B     		ldr	r3, .L16+72
 788 0198 0093     		str	r3, [sp]
 789 019a 2300     		movs	r3, r4
 790 019c 0022     		movs	r2, #0
 791 019e A921     		movs	r1, #169
 792 01a0 0620     		movs	r0, #6
 793 01a2 FFF7FEFF 		bl	LCD_ShowString
 794              	.LVL83:
 616:srcc/main.c   ****     ArrayCopy(temp,gFlashData.serverIP,15);   //IP
 795              		.loc 1 616 0
 796 01a6 4146     		mov	r1, r8
 797 01a8 2B31     		adds	r1, r1, #43
 798 01aa 0F22     		movs	r2, #15
 799 01ac 2800     		movs	r0, r5
 800 01ae FFF7FEFF 		bl	ArrayCopy
 801              	.LVL84:
 617:srcc/main.c   ****     temp[15]=0;
 802              		.loc 1 617 0
 803 01b2 EE73     		strb	r6, [r5, #15]
 618:srcc/main.c   ****     LCD_ShowString(65,169,BLUE,GRAY,temp);
 804              		.loc 1 618 0
 805 01b4 0095     		str	r5, [sp]
 806 01b6 2300     		movs	r3, r4
 807 01b8 1F22     		movs	r2, #31
 808 01ba A921     		movs	r1, #169
 809 01bc 4120     		movs	r0, #65
 810 01be FFF7FEFF 		bl	LCD_ShowString
 811              	.LVL85:
 619:srcc/main.c   ****     LCD_ShowString(185,169,BLUE,GRAY,":");//PORT
 812              		.loc 1 619 0
 813 01c2 564B     		ldr	r3, .L16+76
 814 01c4 0093     		str	r3, [sp]
 815 01c6 2300     		movs	r3, r4
 816 01c8 1F22     		movs	r2, #31
 817 01ca A921     		movs	r1, #169
 818 01cc B920     		movs	r0, #185
 819 01ce FFF7FEFF 		bl	LCD_ShowString
 820              	.LVL86:
 620:srcc/main.c   ****     ArrayCopy(temp,gFlashData.serverPort,5);
 821              		.loc 1 620 0
 822 01d2 4146     		mov	r1, r8
 823 01d4 3A31     		adds	r1, r1, #58
 824 01d6 0522     		movs	r2, #5
 825 01d8 2800     		movs	r0, r5
 826 01da FFF7FEFF 		bl	ArrayCopy
 827              	.LVL87:
 621:srcc/main.c   ****     temp[5]=0;
 828              		.loc 1 621 0
 829 01de 6E71     		strb	r6, [r5, #5]
 622:srcc/main.c   ****     LCD_ShowString(195,169,BLUE,GRAY,temp);
 830              		.loc 1 622 0
 831 01e0 0095     		str	r5, [sp]
 832 01e2 2300     		movs	r3, r4
 833 01e4 1F22     		movs	r2, #31
 834 01e6 A921     		movs	r1, #169
 835 01e8 C320     		movs	r0, #195
 836 01ea FFF7FEFF 		bl	LCD_ShowString
 837              	.LVL88:
 623:srcc/main.c   ****     //显示发送频率
 624:srcc/main.c   ****     LCD_ShowString(6,189,BLACK,GRAY,"TSI:       Freq(s):        ");
 838              		.loc 1 624 0
 839 01ee 4C4B     		ldr	r3, .L16+80
 840 01f0 0093     		str	r3, [sp]
 841 01f2 2300     		movs	r3, r4
 842 01f4 0022     		movs	r2, #0
 843 01f6 BD21     		movs	r1, #189
 844 01f8 0620     		movs	r0, #6
 845 01fa FFF7FEFF 		bl	LCD_ShowString
 846              	.LVL89:
 625:srcc/main.c   ****     LCD_ShowString(180,189,BLUE,GRAY,"      ");
 847              		.loc 1 625 0
 848 01fe 494B     		ldr	r3, .L16+84
 849 0200 0093     		str	r3, [sp]
 850 0202 2300     		movs	r3, r4
 851 0204 1F22     		movs	r2, #31
 852 0206 BD21     		movs	r1, #189
 853 0208 B420     		movs	r0, #180
 854 020a FFF7FEFF 		bl	LCD_ShowString
 855              	.LVL90:
 626:srcc/main.c   ****     LCD_ShowString(180,189,BLUE,GRAY,
 627:srcc/main.c   ****             (uint_8 *)IntConvertToStr(gFlashData.sendFrequencySec,temp));
 856              		.loc 1 627 0
 857 020e 4246     		mov	r2, r8
 858 0210 643A     		subs	r2, r2, #100
 859 0212 A323     		movs	r3, #163
 860 0214 D05C     		ldrb	r0, [r2, r3]
 861 0216 0133     		adds	r3, r3, #1
 862 0218 D35C     		ldrb	r3, [r2, r3]
 863 021a 1B02     		lsls	r3, r3, #8
 864 021c 0343     		orrs	r3, r0
 865 021e A521     		movs	r1, #165
 866 0220 505C     		ldrb	r0, [r2, r1]
 867 0222 0004     		lsls	r0, r0, #16
 868 0224 0343     		orrs	r3, r0
 869 0226 0131     		adds	r1, r1, #1
 870 0228 505C     		ldrb	r0, [r2, r1]
 871 022a 0006     		lsls	r0, r0, #24
 872 022c 1843     		orrs	r0, r3
 873 022e 2900     		movs	r1, r5
 874 0230 FFF7FEFF 		bl	IntConvertToStr
 875              	.LVL91:
 626:srcc/main.c   ****     LCD_ShowString(180,189,BLUE,GRAY,
 876              		.loc 1 626 0
 877 0234 0090     		str	r0, [sp]
 878 0236 2300     		movs	r3, r4
 879 0238 1F22     		movs	r2, #31
 880 023a BD21     		movs	r1, #189
 881 023c B420     		movs	r0, #180
 882 023e FFF7FEFF 		bl	LCD_ShowString
 883              	.LVL92:
 628:srcc/main.c   ****     LCD_ShowString(36,189,BLUE,GRAY,"0"); //显示TSI次数初值0
 884              		.loc 1 628 0
 885 0242 394B     		ldr	r3, .L16+88
 886 0244 0093     		str	r3, [sp]
 887 0246 2300     		movs	r3, r4
 888 0248 1F22     		movs	r2, #31
 889 024a BD21     		movs	r1, #189
 890 024c 2420     		movs	r0, #36
 891 024e FFF7FEFF 		bl	LCD_ShowString
 892              	.LVL93:
 629:srcc/main.c   ****     LCD_ShowString(6,209,BLACK,GRAY,"Time:                      ");
 893              		.loc 1 629 0
 894 0252 364B     		ldr	r3, .L16+92
 895 0254 0093     		str	r3, [sp]
 896 0256 2300     		movs	r3, r4
 897 0258 0022     		movs	r2, #0
 898 025a D121     		movs	r1, #209
 899 025c 0620     		movs	r0, #6
 900 025e FFF7FEFF 		bl	LCD_ShowString
 901              	.LVL94:
 630:srcc/main.c   ****     LCD_ShowString(49,209,BLUE,GRAY,"2018-07-01 21:55:00" );
 902              		.loc 1 630 0
 903 0262 334B     		ldr	r3, .L16+96
 904 0264 0093     		str	r3, [sp]
 905 0266 2300     		movs	r3, r4
 906 0268 1F22     		movs	r2, #31
 907 026a D121     		movs	r1, #209
 908 026c 3120     		movs	r0, #49
 909 026e FFF7FEFF 		bl	LCD_ShowString
 910              	.LVL95:
 631:srcc/main.c   ****     LCD_aotu(2,232,238,271,0);            //LCD指定区域凹下
 911              		.loc 1 631 0
 912 0272 1023     		movs	r3, #16
 913 0274 0096     		str	r6, [sp]
 914 0276 FF33     		adds	r3, r3, #255
 915 0278 EE22     		movs	r2, #238
 916 027a E821     		movs	r1, #232
 917 027c 0220     		movs	r0, #2
 918 027e FFF7FEFF 		bl	LCD_aotu
 919              	.LVL96:
 632:srcc/main.c   ****     LCD_ShowString(6,235,BLACK,GRAY,"Reserved area,you can use it");
 920              		.loc 1 632 0
 921 0282 2C4B     		ldr	r3, .L16+100
 922 0284 0093     		str	r3, [sp]
 923 0286 2300     		movs	r3, r4
 924 0288 0022     		movs	r2, #0
 925 028a EB21     		movs	r1, #235
 926 028c 0620     		movs	r0, #6
 927 028e FFF7FEFF 		bl	LCD_ShowString
 928              	.LVL97:
 633:srcc/main.c   ****     LCD_ShowString(6,253,BLACK,GRAY,"RecvCount:                 ");
 929              		.loc 1 633 0
 930 0292 294B     		ldr	r3, .L16+104
 931 0294 0093     		str	r3, [sp]
 932 0296 2300     		movs	r3, r4
 933 0298 0022     		movs	r2, #0
 934 029a FD21     		movs	r1, #253
 935 029c 0620     		movs	r0, #6
 936 029e FFF7FEFF 		bl	LCD_ShowString
 937              	.LVL98:
 634:srcc/main.c   ****     //（5）设置第四区（运行状态显示区）
 635:srcc/main.c   ****     LCD_aotu(2,275,238,317,1);            //LCD指定区域凸起
 938              		.loc 1 635 0
 939 02a2 3E23     		movs	r3, #62
 940 02a4 1421     		movs	r1, #20
 941 02a6 0097     		str	r7, [sp]
 942 02a8 FF33     		adds	r3, r3, #255
 943 02aa EE22     		movs	r2, #238
 944 02ac FF31     		adds	r1, r1, #255
 945 02ae 0220     		movs	r0, #2
 946 02b0 FFF7FEFF 		bl	LCD_aotu
 947              	.LVL99:
 636:srcc/main.c   ****     LCD_ShowString(6,278,BLACK,GRAY,"Run State:                 ");
 948              		.loc 1 636 0
 949 02b4 8B21     		movs	r1, #139
 950 02b6 214B     		ldr	r3, .L16+108
 951 02b8 0093     		str	r3, [sp]
 952 02ba 2300     		movs	r3, r4
 953 02bc 0022     		movs	r2, #0
 954 02be 4900     		lsls	r1, r1, #1
 955 02c0 0620     		movs	r0, #6
 956 02c2 FFF7FEFF 		bl	LCD_ShowString
 957              	.LVL100:
 637:srcc/main.c   **** }
 958              		.loc 1 637 0
 959 02c6 0CB0     		add	sp, sp, #48
 960              		@ sp needed
 961 02c8 04BC     		pop	{r2}
 962 02ca 9046     		mov	r8, r2
 963 02cc F0BD     		pop	{r4, r5, r6, r7, pc}
 964              	.L17:
 965 02ce C046     		.align	2
 966              	.L16:
 967 02d0 30840000 		.word	33840
 968 02d4 00000000 		.word	.LC17
 969 02d8 10000000 		.word	.LC19
 970 02dc 00000000 		.word	bios_fun_point
 971 02e0 2C000000 		.word	.LC22
 972 02e4 4C000000 		.word	.LC24
 973 02e8 64000000 		.word	gFlashData+100
 974 02ec 5C000000 		.word	.LC27
 975 02f0 7C000000 		.word	.LC29
 976 02f4 9A999999 		.word	-1717986918
 977 02f8 9999A93F 		.word	1068079513
 978 02fc 00788640 		.word	1082554368
 979 0300 713D0AD7 		.word	-687194767
 980 0304 A370FB3F 		.word	1073442979
 981 0308 00003940 		.word	1077477376
 982 030c 00002440 		.word	1076101120
 983 0310 9C000000 		.word	.LC31
 984 0314 B8000000 		.word	.LC33
 985 0318 D4000000 		.word	.LC35
 986 031c F0000000 		.word	.LC38
 987 0320 F4000000 		.word	.LC41
 988 0324 10010000 		.word	.LC43
 989 0328 18010000 		.word	.LC46
 990 032c 1C010000 		.word	.LC48
 991 0330 38010000 		.word	.LC50
 992 0334 4C010000 		.word	.LC52
 993 0338 6C010000 		.word	.LC54
 994 033c 88010000 		.word	.LC56
 995              		.cfi_endproc
 996              	.LFE41:
 998              		.global	__aeabi_uldivmod
 999              		.global	__aeabi_uidivmod
 1000              		.section	.text.main,"ax",%progbits
 1001              		.align	1
 1002              		.global	main
 1003              		.syntax unified
 1004              		.code	16
 1005              		.thumb_func
 1006              		.fpu softvfp
 1008              	main:
 1009              	.LFB38:
  44:srcc/main.c   ****     //（1）启动部分（开头）======
 1010              		.loc 1 44 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 1208
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1015              		.cfi_def_cfa_offset 20
 1016              		.cfi_offset 4, -20
 1017              		.cfi_offset 5, -16
 1018              		.cfi_offset 6, -12
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021 0002 DE46     		mov	lr, fp
 1022 0004 5746     		mov	r7, r10
 1023 0006 4E46     		mov	r6, r9
 1024 0008 4546     		mov	r5, r8
 1025 000a E0B5     		push	{r5, r6, r7, lr}
 1026              		.cfi_def_cfa_offset 36
 1027              		.cfi_offset 8, -36
 1028              		.cfi_offset 9, -32
 1029              		.cfi_offset 10, -28
 1030              		.cfi_offset 11, -24
 1031 000c E74C     		ldr	r4, .L105
 1032 000e A544     		add	sp, sp, r4
 1033              		.cfi_def_cfa_offset 1256
  70:srcc/main.c   ****     gTimeSec=1548950401;         //默认2019-02-01 00:00:01
 1034              		.loc 1 70 0
 1035 0010 FFF7FEFF 		bl	BIOS_API_Init
 1036              	.LVL101:
  71:srcc/main.c   ****     sysTimeSet(gTimeSec);        //设置系统时间初值
 1037              		.loc 1 71 0
 1038 0014 E64D     		ldr	r5, .L105+4
 1039 0016 E748     		ldr	r0, .L105+8
 1040 0018 0021     		movs	r1, #0
 1041 001a 2860     		str	r0, [r5]
 1042 001c 6960     		str	r1, [r5, #4]
  72:srcc/main.c   ****     mTmp=sysTimeGet();            //获得当前系统时间（s)
 1043              		.loc 1 72 0
 1044 001e E64C     		ldr	r4, .L105+12
 1045 0020 2368     		ldr	r3, [r4]
 1046 0022 9B68     		ldr	r3, [r3, #8]
 1047 0024 9847     		blx	r3
 1048              	.LVL102:
  73:srcc/main.c   ****     //特别注意，（1.2）程序段不能删除，否则系统不能运行
 1049              		.loc 1 73 0
 1050 0026 2368     		ldr	r3, [r4]
 1051 0028 5B68     		ldr	r3, [r3, #4]
 1052 002a 9847     		blx	r3
 1053              	.LVL103:
 1054              	.LBB6:
 1055              	.LBB7:
 1056              		.file 2 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
   1:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /**************************************************************************//**
   2:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @version  V4.10
   5:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @date     18. March 2015
   6:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  *
   7:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @note
   8:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  *
   9:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  ******************************************************************************/
  10:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  12:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    All rights reserved.
  13:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      specific prior written permission.
  23:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    *
  24:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  37:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  38:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  41:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  42:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   @{
  46:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  47:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  48:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* ARM armcc specific functions */
  50:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  51:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
  54:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  55:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  58:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Control Register
  59:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  60:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the Control Register.
  61:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  62:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Control Register value
  63:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  64:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  66:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regControl);
  68:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  69:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  70:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  71:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Control Register
  72:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  73:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  75:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  77:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  79:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regControl = control;
  81:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  82:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  83:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  84:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get IPSR Register
  85:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  86:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  88:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               IPSR Register value
  89:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  90:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  92:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regIPSR);
  94:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  95:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  96:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  97:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get APSR Register
  98:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  99:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 101:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               APSR Register value
 102:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 103:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 105:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regAPSR);
 107:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 108:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 109:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 110:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get xPSR Register
 111:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 112:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 114:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               xPSR Register value
 115:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 116:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 118:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regXPSR);
 120:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 121:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 122:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 123:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 125:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 127:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               PSP Register value
 128:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 129:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 131:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regProcessStackPointer);
 133:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 134:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 135:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 136:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 138:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 140:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 142:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 144:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 147:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 148:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 149:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 151:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 153:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               MSP Register value
 154:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 155:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 157:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regMainStackPointer);
 159:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 160:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 161:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 162:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 164:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 166:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 168:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 170:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 173:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 174:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 175:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Priority Mask
 176:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 177:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 179:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Priority Mask value
 180:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 181:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 183:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regPriMask);
 185:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 186:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 187:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 188:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Priority Mask
 189:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 190:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 192:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 194:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 196:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regPriMask = (priMask);
 198:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 199:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 200:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 201:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 202:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 203:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Enable FIQ
 204:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 205:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 208:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 210:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 211:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Disable FIQ
 212:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 213:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 216:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 218:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 219:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Base Priority
 220:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 221:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 223:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Base Priority register value
 224:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 225:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 227:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regBasePri);
 229:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 230:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 231:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 232:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Base Priority
 233:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 234:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 236:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 238:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 240:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 243:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 244:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 245:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Base Priority with condition
 246:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 247:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Base Priority register only if BASEPRI masking is 
 248:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     or the new value increases the BASEPRI priority level.
 249:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 250:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 251:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 252:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 253:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 254:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePriMax      __ASM("basepri_max");
 255:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regBasePriMax = (basePri & 0xff);
 256:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 257:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 258:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 259:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Fault Mask
 260:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 261:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 262:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 263:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Fault Mask register value
 264:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 265:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 266:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 267:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 268:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regFaultMask);
 269:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 270:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 271:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 272:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Fault Mask
 273:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 274:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 275:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 276:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 277:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 278:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 279:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 280:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 281:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 282:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 283:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 284:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 285:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 286:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 287:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
 288:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 289:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get FPSCR
 290:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 291:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 292:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 293:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 294:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 295:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 296:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 297:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 298:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 299:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regfpscr);
 300:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #else
 301:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    return(0);
 302:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
 303:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 304:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 305:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 306:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set FPSCR
 307:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 308:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 309:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 310:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 311:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 312:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 313:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 314:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 315:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 316:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regfpscr = (fpscr);
 317:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
 318:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 319:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 320:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
 321:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 322:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 323:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* GNU gcc specific functions */
 325:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 326:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 328:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 331:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 333:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 334:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 335:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 336:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 337:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 339:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 342:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 344:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1057              		.loc 2 344 0
 1058              		.syntax divided
 1059              	@ 344 "E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)
 1060 002c 72B6     		cpsid i
 1061              	@ 0 "" 2
 1062              	.LVL104:
 1063              		.thumb
 1064              		.syntax unified
 1065              	.LBE7:
 1066              	.LBE6:
  93:srcc/main.c   ****     flag=1;                            //标志位，需要更新模组信息
 1067              		.loc 1 93 0
 1068 002e E34B     		ldr	r3, .L105+16
 1069 0030 0022     		movs	r2, #0
 1070 0032 1A80     		strh	r2, [r3]
  94:srcc/main.c   **** 
 1071              		.loc 1 94 0
 1072 0034 E24B     		ldr	r3, .L105+20
 1073 0036 0132     		adds	r2, r2, #1
 1074 0038 1A70     		strb	r2, [r3]
  97:srcc/main.c   ****     gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_ON);    //初始化红灯
 1075              		.loc 1 97 0
 1076 003a B023     		movs	r3, #176
 1077 003c 5B00     		lsls	r3, r3, #1
 1078 003e 2268     		ldr	r2, [r4]
 1079 0040 D358     		ldr	r3, [r2, r3]
 1080 0042 0120     		movs	r0, #1
 1081 0044 9847     		blx	r3
 1082              	.LVL105:
  98:srcc/main.c   ****     timer_init(TIMER_LP,500);                   //LPTMR计时器初始化为500毫秒
 1083              		.loc 1 98 0
 1084 0046 2368     		ldr	r3, [r4]
 1085 0048 DB6D     		ldr	r3, [r3, #92]
 1086 004a 0022     		movs	r2, #0
 1087 004c 0121     		movs	r1, #1
 1088 004e 0520     		movs	r0, #5
 1089 0050 9847     		blx	r3
 1090              	.LVL106:
  99:srcc/main.c   ****     tsi_init(TSI_TOUCH,TSI_VALUE);     //初始化触摸按键TSI
 1091              		.loc 1 99 0
 1092 0052 FA21     		movs	r1, #250
 1093 0054 4900     		lsls	r1, r1, #1
 1094 0056 0020     		movs	r0, #0
 1095 0058 FFF7FEFF 		bl	timer_init
 1096              	.LVL107:
 100:srcc/main.c   ****     flash_init();                      //初始化flash
 1097              		.loc 1 100 0
 1098 005c D949     		ldr	r1, .L105+24
 1099 005e 0320     		movs	r0, #3
 1100 0060 FFF7FEFF 		bl	tsi_init
 1101              	.LVL108:
 101:srcc/main.c   ****     sysTimeSet(gTimeSec);              //设置系统时间初值
 1102              		.loc 1 101 0
 1103 0064 2368     		ldr	r3, [r4]
 1104 0066 5B6B     		ldr	r3, [r3, #52]
 1105 0068 9847     		blx	r3
 1106              	.LVL109:
 102:srcc/main.c   ****     LCD_Init();                        //初始化LCD
 1107              		.loc 1 102 0
 1108 006a 2868     		ldr	r0, [r5]
 1109 006c 6968     		ldr	r1, [r5, #4]
 1110 006e 2368     		ldr	r3, [r4]
 1111 0070 9B68     		ldr	r3, [r3, #8]
 1112 0072 9847     		blx	r3
 1113              	.LVL110:
 103:srcc/main.c   **** 
 1114              		.loc 1 103 0
 1115 0074 FFF7FEFF 		bl	LCD_Init
 1116              	.LVL111:
 115:srcc/main.c   ****     tsi_enable_re_int(TSI_TOUCH);               //使能TSI中断
 1117              		.loc 1 115 0
 1118 0078 0020     		movs	r0, #0
 1119 007a FFF7FEFF 		bl	timer_enable_int
 1120              	.LVL112:
 116:srcc/main.c   ****     //图形化编程之外设模块使能中断处【Graphic10】
 1121              		.loc 1 116 0
 1122 007e 0320     		movs	r0, #3
 1123 0080 FFF7FEFF 		bl	tsi_enable_re_int
 1124              	.LVL113:
 1125              	.LBB8:
 1126              	.LBB9:
 333:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 1127              		.loc 2 333 0
 1128              		.syntax divided
 1129              	@ 333 "E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)
 1130 0084 62B6     		cpsie i
 1131              	@ 0 "" 2
 1132              		.thumb
 1133              		.syntax unified
 1134              	.LBE9:
 1135              	.LBE8:
 127:srcc/main.c   ****     userData_init(&gUserData);         //初始化用户帧结构体gUserData
 1136              		.loc 1 127 0
 1137 0086 D04D     		ldr	r5, .L105+28
 1138 0088 2368     		ldr	r3, [r4]
 1139 008a 1C6C     		ldr	r4, [r3, #64]
 1140 008c AD23     		movs	r3, #173
 1141 008e 0022     		movs	r2, #0
 1142 0090 3F21     		movs	r1, #63
 1143 0092 2800     		movs	r0, r5
 1144 0094 A047     		blx	r4
 1145              	.LVL114:
 128:srcc/main.c   ****     LCD_Showfirst();                   //LCD显示初始内容
 1146              		.loc 1 128 0
 1147 0096 CD48     		ldr	r0, .L105+32
 1148 0098 FFF7FEFF 		bl	userData_init
 1149              	.LVL115:
 129:srcc/main.c   ****     //（1.9.2）判断复位状态，并将复位状态数据存储到flash中
 1150              		.loc 1 129 0
 1151 009c FFF7FEFF 		bl	LCD_Showfirst
 1152              	.LVL116:
 131:srcc/main.c   ****     if (BGET(RCM_SRS0_WDOG_SHIFT, RCM_SRS0))     //若为看门狗复位，则加1
 1153              		.loc 1 131 0
 1154 00a0 A723     		movs	r3, #167
 1155 00a2 EA5C     		ldrb	r2, [r5, r3]
 1156 00a4 0133     		adds	r3, r3, #1
 1157 00a6 EB5C     		ldrb	r3, [r5, r3]
 1158 00a8 1B02     		lsls	r3, r3, #8
 1159 00aa 1343     		orrs	r3, r2
 1160 00ac A922     		movs	r2, #169
 1161 00ae AA5C     		ldrb	r2, [r5, r2]
 1162 00b0 1204     		lsls	r2, r2, #16
 1163 00b2 1343     		orrs	r3, r2
 1164 00b4 AA22     		movs	r2, #170
 1165 00b6 AA5C     		ldrb	r2, [r5, r2]
 1166 00b8 1206     		lsls	r2, r2, #24
 1167 00ba 1A43     		orrs	r2, r3
 1168              	.LVL117:
 132:srcc/main.c   ****         gFlashData.resetCount++;
 1169              		.loc 1 132 0
 1170 00bc C44B     		ldr	r3, .L105+36
 1171 00be 1B78     		ldrb	r3, [r3]
 1172 00c0 9B06     		lsls	r3, r3, #26
 1173 00c2 69D5     		bpl	.L19
 133:srcc/main.c   ****     else if(BGET(RCM_SRS0_POR_SHIFT, RCM_SRS0))  //若为上电复位，则置零
 1174              		.loc 1 133 0
 1175 00c4 C049     		ldr	r1, .L105+28
 1176 00c6 531C     		adds	r3, r2, #1
 1177 00c8 A720     		movs	r0, #167
 1178 00ca 0B54     		strb	r3, [r1, r0]
 1179 00cc 180A     		lsrs	r0, r3, #8
 1180 00ce A731     		adds	r1, r1, #167
 1181 00d0 4870     		strb	r0, [r1, #1]
 1182 00d2 1802     		lsls	r0, r3, #8
 1183 00d4 000E     		lsrs	r0, r0, #24
 1184 00d6 8870     		strb	r0, [r1, #2]
 1185 00d8 1B0E     		lsrs	r3, r3, #24
 1186 00da CB70     		strb	r3, [r1, #3]
 1187              	.L20:
 137:srcc/main.c   ****     {
 1188              		.loc 1 137 0
 1189 00dc BA48     		ldr	r0, .L105+28
 1190 00de A723     		movs	r3, #167
 1191 00e0 C35C     		ldrb	r3, [r0, r3]
 1192 00e2 A821     		movs	r1, #168
 1193 00e4 415C     		ldrb	r1, [r0, r1]
 1194 00e6 0902     		lsls	r1, r1, #8
 1195 00e8 1943     		orrs	r1, r3
 1196 00ea A923     		movs	r3, #169
 1197 00ec C35C     		ldrb	r3, [r0, r3]
 1198 00ee 1B04     		lsls	r3, r3, #16
 1199 00f0 1943     		orrs	r1, r3
 1200 00f2 AA23     		movs	r3, #170
 1201 00f4 C35C     		ldrb	r3, [r0, r3]
 1202 00f6 1B06     		lsls	r3, r3, #24
 1203 00f8 0B43     		orrs	r3, r1
 1204 00fa 9A42     		cmp	r2, r3
 1205 00fc 0BD0     		beq	.L21
 139:srcc/main.c   ****         flash_write(63,0,mFlashLen,(uint_8*)(&gFlashData));
 1206              		.loc 1 139 0
 1207 00fe AE4C     		ldr	r4, .L105+12
 1208 0100 2368     		ldr	r3, [r4]
 1209 0102 9B6B     		ldr	r3, [r3, #56]
 1210 0104 3F20     		movs	r0, #63
 1211 0106 9847     		blx	r3
 1212              	.LVL118:
 140:srcc/main.c   ****     }
 1213              		.loc 1 140 0
 1214 0108 2368     		ldr	r3, [r4]
 1215 010a DC6B     		ldr	r4, [r3, #60]
 1216 010c AE4B     		ldr	r3, .L105+28
 1217 010e AD22     		movs	r2, #173
 1218 0110 0021     		movs	r1, #0
 1219 0112 3F20     		movs	r0, #63
 1220 0114 A047     		blx	r4
 1221              	.LVL119:
 1222              	.L21:
 144:srcc/main.c   ****     for(;;)                           //初始化通信模组循环
 1223              		.loc 1 144 0
 1224 0116 9621     		movs	r1, #150
 1225 0118 AE4B     		ldr	r3, .L105+40
 1226 011a 0093     		str	r3, [sp]
 1227 011c AE4B     		ldr	r3, .L105+44
 1228 011e 1F22     		movs	r2, #31
 1229 0120 4900     		lsls	r1, r1, #1
 1230 0122 0620     		movs	r0, #6
 1231 0124 FFF7FEFF 		bl	LCD_ShowString
 1232              	.LVL120:
  86:srcc/main.c   ****     mUserLen = sizeof(UserData);      //获得需要发送的字节长度
 1233              		.loc 1 86 0
 1234 0128 0025     		movs	r5, #0
 148:srcc/main.c   ****         Delay_ms(6000);               //延时6秒
 1235              		.loc 1 148 0
 1236 012a A34E     		ldr	r6, .L105+12
 213:srcc/main.c   ****         if(mflag)
 1237              		.loc 1 213 0
 1238 012c AB4B     		ldr	r3, .L105+48
 1239 012e 0F3B     		subs	r3, r3, #15
 1240 0130 0593     		str	r3, [sp, #20]
 1241              	.LVL121:
 1242              	.L22:
 148:srcc/main.c   ****         Delay_ms(6000);               //延时6秒
 1243              		.loc 1 148 0
 1244 0132 B023     		movs	r3, #176
 1245 0134 5B00     		lsls	r3, r3, #1
 1246 0136 3268     		ldr	r2, [r6]
 1247 0138 D358     		ldr	r3, [r2, r3]
 1248 013a 0120     		movs	r0, #1
 1249 013c 9847     		blx	r3
 1250              	.LVL122:
 149:srcc/main.c   ****         LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .                  ");
 1251              		.loc 1 149 0
 1252 013e A848     		ldr	r0, .L105+52
 1253 0140 FFF7FEFF 		bl	Delay_ms
 1254              	.LVL123:
 150:srcc/main.c   ****         Delay_ms(6000);               //延时6秒
 1255              		.loc 1 150 0
 1256 0144 A44F     		ldr	r7, .L105+44
 1257 0146 9624     		movs	r4, #150
 1258 0148 6400     		lsls	r4, r4, #1
 1259 014a A64B     		ldr	r3, .L105+56
 1260 014c 0093     		str	r3, [sp]
 1261 014e 3B00     		movs	r3, r7
 1262 0150 1F22     		movs	r2, #31
 1263 0152 2100     		movs	r1, r4
 1264 0154 0620     		movs	r0, #6
 1265 0156 FFF7FEFF 		bl	LCD_ShowString
 1266              	.LVL124:
 151:srcc/main.c   ****         //通信模组初始化，包括联网和建立网络连接过程
 1267              		.loc 1 151 0
 1268 015a A148     		ldr	r0, .L105+52
 1269 015c FFF7FEFF 		bl	Delay_ms
 1270              	.LVL125:
 154:srcc/main.c   ****         mflag =uecom_init();
 1271              		.loc 1 154 0
 1272 0160 A14B     		ldr	r3, .L105+60
 1273 0162 0093     		str	r3, [sp]
 1274 0164 3B00     		movs	r3, r7
 1275 0166 1F22     		movs	r2, #31
 1276 0168 2100     		movs	r1, r4
 1277 016a 0620     		movs	r0, #6
 1278 016c FFF7FEFF 		bl	LCD_ShowString
 1279              	.LVL126:
 155:srcc/main.c   **** 
 1280              		.loc 1 155 0
 1281 0170 B223     		movs	r3, #178
 1282 0172 5B00     		lsls	r3, r3, #1
 1283 0174 3268     		ldr	r2, [r6]
 1284 0176 D358     		ldr	r3, [r2, r3]
 1285 0178 9847     		blx	r3
 1286              	.LVL127:
 1287 017a 0490     		str	r0, [sp, #16]
 1288              	.LVL128:
 157:srcc/main.c   ****         {
 1289              		.loc 1 157 0
 1290 017c 0028     		cmp	r0, #0
 1291 017e 2CD0     		beq	.L23
 159:srcc/main.c   ****               LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .. AT Error        ");
 1292              		.loc 1 159 0
 1293 0180 0128     		cmp	r0, #1
 1294 0182 16D0     		beq	.L82
 161:srcc/main.c   ****               LCD_ShowString(6,300,BLUE,GRAY,"AHL Init .. sim Error       ");
 1295              		.loc 1 161 0
 1296 0184 0228     		cmp	r0, #2
 1297 0186 1ED0     		beq	.L83
 1298              	.L25:
 163:srcc/main.c   ****           continue;
 1299              		.loc 1 163 0
 1300 0188 8B4B     		ldr	r3, .L105+12
 1301 018a 1A68     		ldr	r2, [r3]
 1302 018c B023     		movs	r3, #176
 1303 018e 5B00     		lsls	r3, r3, #1
 1304 0190 D358     		ldr	r3, [r2, r3]
 1305 0192 0220     		movs	r0, #2
 1306 0194 9847     		blx	r3
 1307              	.LVL129:
 164:srcc/main.c   ****         }
 1308              		.loc 1 164 0
 1309 0196 CCE7     		b	.L22
 1310              	.LVL130:
 1311              	.L19:
 134:srcc/main.c   ****         gFlashData.resetCount = 0;
 1312              		.loc 1 134 0
 1313 0198 8D4B     		ldr	r3, .L105+36
 1314 019a 1B78     		ldrb	r3, [r3]
 1315 019c DB09     		lsrs	r3, r3, #7
 1316 019e BAD0     		beq	.L21
 135:srcc/main.c   ****     //若复位次数发送变化，则重新写入flash
 1317              		.loc 1 135 0
 1318 01a0 894B     		ldr	r3, .L105+28
 1319 01a2 0021     		movs	r1, #0
 1320 01a4 A720     		movs	r0, #167
 1321 01a6 1954     		strb	r1, [r3, r0]
 1322 01a8 1B18     		adds	r3, r3, r0
 1323 01aa 5970     		strb	r1, [r3, #1]
 1324 01ac 9970     		strb	r1, [r3, #2]
 1325 01ae D970     		strb	r1, [r3, #3]
 1326 01b0 94E7     		b	.L20
 1327              	.LVL131:
 1328              	.L82:
 160:srcc/main.c   ****           if (mflag==2)
 1329              		.loc 1 160 0
 1330 01b2 9621     		movs	r1, #150
 1331 01b4 8D4B     		ldr	r3, .L105+64
 1332 01b6 0093     		str	r3, [sp]
 1333 01b8 3B00     		movs	r3, r7
 1334 01ba 1F22     		movs	r2, #31
 1335 01bc 4900     		lsls	r1, r1, #1
 1336 01be 0620     		movs	r0, #6
 1337 01c0 FFF7FEFF 		bl	LCD_ShowString
 1338              	.LVL132:
 1339 01c4 E0E7     		b	.L25
 1340              	.L83:
 162:srcc/main.c   ****           uecom_power(UECOM_REBOOT);  //通信模组重启
 1341              		.loc 1 162 0
 1342 01c6 9621     		movs	r1, #150
 1343 01c8 894B     		ldr	r3, .L105+68
 1344 01ca 0093     		str	r3, [sp]
 1345 01cc 824B     		ldr	r3, .L105+44
 1346 01ce 1F22     		movs	r2, #31
 1347 01d0 4900     		lsls	r1, r1, #1
 1348 01d2 0620     		movs	r0, #6
 1349 01d4 FFF7FEFF 		bl	LCD_ShowString
 1350              	.LVL133:
 1351 01d8 D6E7     		b	.L25
 1352              	.L23:
 167:srcc/main.c   ****         LCD_ShowString(60,85,BLUE,GRAY,mRetdata+20);
 1353              		.loc 1 167 0
 1354 01da 774F     		ldr	r7, .L105+12
 1355 01dc BE23     		movs	r3, #190
 1356 01de 5B00     		lsls	r3, r3, #1
 1357 01e0 3A68     		ldr	r2, [r7]
 1358 01e2 D358     		ldr	r3, [r2, r3]
 1359 01e4 FFA8     		add	r0, sp, #1020
 1360 01e6 6030     		adds	r0, r0, #96
 1361 01e8 9847     		blx	r3
 1362              	.LVL134:
 168:srcc/main.c   **** 
 1363              		.loc 1 168 0
 1364 01ea 7B4C     		ldr	r4, .L105+44
 1365 01ec FFAB     		add	r3, sp, #1020
 1366 01ee 7433     		adds	r3, r3, #116
 1367 01f0 0093     		str	r3, [sp]
 1368 01f2 2300     		movs	r3, r4
 1369 01f4 1F22     		movs	r2, #31
 1370 01f6 5521     		movs	r1, #85
 1371 01f8 3C20     		movs	r0, #60
 1372 01fa FFF7FEFF 		bl	LCD_ShowString
 1373              	.LVL135:
 171:srcc/main.c   ****         mflag =uecom_linkBase();
 1374              		.loc 1 171 0
 1375 01fe 9621     		movs	r1, #150
 1376 0200 7C4B     		ldr	r3, .L105+72
 1377 0202 0093     		str	r3, [sp]
 1378 0204 2300     		movs	r3, r4
 1379 0206 1F22     		movs	r2, #31
 1380 0208 4900     		lsls	r1, r1, #1
 1381 020a 0620     		movs	r0, #6
 1382 020c FFF7FEFF 		bl	LCD_ShowString
 1383              	.LVL136:
 172:srcc/main.c   ****         while(mflag)
 1384              		.loc 1 172 0
 1385 0210 3A68     		ldr	r2, [r7]
 1386 0212 B423     		movs	r3, #180
 1387 0214 5B00     		lsls	r3, r3, #1
 1388 0216 D358     		ldr	r3, [r2, r3]
 1389 0218 9847     		blx	r3
 1390              	.LVL137:
 173:srcc/main.c   ****          {
 1391              		.loc 1 173 0
 1392 021a 0028     		cmp	r0, #0
 1393 021c 0ED0     		beq	.L27
 175:srcc/main.c   ****          	mLinkCount++; //连接次数+1
 1394              		.loc 1 175 0
 1395 021e 664B     		ldr	r3, .L105+12
 1396 0220 9946     		mov	r9, r3
 1397 0222 B427     		movs	r7, #180
 1398 0224 7F00     		lsls	r7, r7, #1
 1399              	.LVL138:
 1400              	.L31:
 1401 0226 4B46     		mov	r3, r9
 1402 0228 1B68     		ldr	r3, [r3]
 1403 022a DB59     		ldr	r3, [r3, r7]
 1404 022c 9847     		blx	r3
 1405              	.LVL139:
 1406 022e 0400     		movs	r4, r0
 1407              	.LVL140:
 176:srcc/main.c   ****          	if(mLinkCount>10)
 1408              		.loc 1 176 0
 1409 0230 0135     		adds	r5, r5, #1
 1410              	.LVL141:
 1411 0232 EDB2     		uxtb	r5, r5
 1412              	.LVL142:
 177:srcc/main.c   ****          	{
 1413              		.loc 1 177 0
 1414 0234 0A2D     		cmp	r5, #10
 1415 0236 03D8     		bhi	.L84
 173:srcc/main.c   ****          {
 1416              		.loc 1 173 0
 1417 0238 0028     		cmp	r0, #0
 1418 023a F4D1     		bne	.L31
 1419              	.LVL143:
 1420              	.L27:
  86:srcc/main.c   ****     mUserLen = sizeof(UserData);      //获得需要发送的字节长度
 1421              		.loc 1 86 0
 1422 023c 2C00     		movs	r4, r5
 1423 023e 12E0     		b	.L30
 1424              	.LVL144:
 1425              	.L84:
 180:srcc/main.c   ****  				uecom_delay_ms(6000);      //延时
 1426              		.loc 1 180 0
 1427 0240 5D4D     		ldr	r5, .L105+12
 1428 0242 B027     		movs	r7, #176
 1429 0244 7F00     		lsls	r7, r7, #1
 1430 0246 2B68     		ldr	r3, [r5]
 1431 0248 DB59     		ldr	r3, [r3, r7]
 1432 024a 0020     		movs	r0, #0
 1433              	.LVL145:
 1434 024c 9847     		blx	r3
 1435              	.LVL146:
 181:srcc/main.c   ****  				uecom_power(UECOM_REBOOT); //通信模组重启
 1436              		.loc 1 181 0
 1437 024e 6448     		ldr	r0, .L105+52
 1438 0250 FFF7FEFF 		bl	Delay_ms
 1439              	.LVL147:
 182:srcc/main.c   ****  				uecom_delay_ms(6000);      //延时
 1440              		.loc 1 182 0
 1441 0254 2B68     		ldr	r3, [r5]
 1442 0256 DB59     		ldr	r3, [r3, r7]
 1443 0258 0220     		movs	r0, #2
 1444 025a 9847     		blx	r3
 1445              	.LVL148:
 183:srcc/main.c   ****  				break;
 1446              		.loc 1 183 0
 1447 025c 6048     		ldr	r0, .L105+52
 1448 025e FFF7FEFF 		bl	Delay_ms
 1449              	.LVL149:
 187:srcc/main.c   ****          {
 1450              		.loc 1 187 0
 1451 0262 002C     		cmp	r4, #0
 1452 0264 0BD1     		bne	.L85
 1453              	.LVL150:
 1454              	.L30:
  86:srcc/main.c   ****     mUserLen = sizeof(UserData);      //获得需要发送的字节长度
 1455              		.loc 1 86 0
 1456 0266 0525     		movs	r5, #5
 200:srcc/main.c   ****             if(mflag)
 1457              		.loc 1 200 0
 1458 0268 FFAB     		add	r3, sp, #1020
 1459 026a 6033     		adds	r3, r3, #96
 1460 026c 9846     		mov	r8, r3
 1461 026e 524B     		ldr	r3, .L105+12
 1462 0270 9B46     		mov	fp, r3
 1463 0272 BC27     		movs	r7, #188
 1464 0274 7F00     		lsls	r7, r7, #1
 1465 0276 2300     		movs	r3, r4
 1466 0278 2C00     		movs	r4, r5
 1467              	.LVL151:
 1468 027a 1D00     		movs	r5, r3
 1469 027c 24E0     		b	.L32
 1470              	.LVL152:
 1471              	.L85:
 189:srcc/main.c   ****  			uecom_power(UECOM_OFF);    //通信模组重启
 1472              		.loc 1 189 0
 1473 027e 9621     		movs	r1, #150
 1474 0280 5D4B     		ldr	r3, .L105+76
 1475 0282 0093     		str	r3, [sp]
 1476 0284 544B     		ldr	r3, .L105+44
 1477 0286 1F22     		movs	r2, #31
 1478 0288 4900     		lsls	r1, r1, #1
 1479 028a 0620     		movs	r0, #6
 1480 028c FFF7FEFF 		bl	LCD_ShowString
 1481              	.LVL153:
 190:srcc/main.c   ****  			uecom_delay_ms(6000);      //延时
 1482              		.loc 1 190 0
 1483 0290 494F     		ldr	r7, .L105+12
 1484 0292 B025     		movs	r5, #176
 1485 0294 6D00     		lsls	r5, r5, #1
 1486 0296 3B68     		ldr	r3, [r7]
 1487 0298 5B59     		ldr	r3, [r3, r5]
 1488 029a 0020     		movs	r0, #0
 1489 029c 9847     		blx	r3
 1490              	.LVL154:
 191:srcc/main.c   ****  			uecom_power(UECOM_REBOOT); //通信模组重启
 1491              		.loc 1 191 0
 1492 029e 504C     		ldr	r4, .L105+52
 1493              	.LVL155:
 1494 02a0 2000     		movs	r0, r4
 1495 02a2 FFF7FEFF 		bl	Delay_ms
 1496              	.LVL156:
 192:srcc/main.c   ****  			uecom_delay_ms(6000);      //延时
 1497              		.loc 1 192 0
 1498 02a6 3B68     		ldr	r3, [r7]
 1499 02a8 5B59     		ldr	r3, [r3, r5]
 1500 02aa 0220     		movs	r0, #2
 1501 02ac 9847     		blx	r3
 1502              	.LVL157:
 193:srcc/main.c   ****  			continue;
 1503              		.loc 1 193 0
 1504 02ae 2000     		movs	r0, r4
 1505 02b0 FFF7FEFF 		bl	Delay_ms
 1506              	.LVL158:
 179:srcc/main.c   ****  				uecom_power(UECOM_OFF);    //通信模组重启
 1507              		.loc 1 179 0
 1508 02b4 049D     		ldr	r5, [sp, #16]
 194:srcc/main.c   **** 
 1509              		.loc 1 194 0
 1510 02b6 3CE7     		b	.L22
 1511              	.LVL159:
 1512              	.L87:
 203:srcc/main.c   ****                 continue;
 1513              		.loc 1 203 0
 1514 02b8 FA20     		movs	r0, #250
 1515              	.LVL160:
 1516 02ba 8000     		lsls	r0, r0, #2
 1517 02bc FFF7FEFF 		bl	Delay_ms
 1518              	.LVL161:
 1519              	.L34:
 1520 02c0 013C     		subs	r4, r4, #1
 1521              	.LVL162:
 1522 02c2 A4B2     		uxth	r4, r4
 198:srcc/main.c   ****         {
 1523              		.loc 1 198 0 discriminator 2
 1524 02c4 002C     		cmp	r4, #0
 1525 02c6 24D0     		beq	.L86
 1526              	.L32:
 1527              	.LVL163:
 200:srcc/main.c   ****             if(mflag)
 1528              		.loc 1 200 0
 1529 02c8 5B46     		mov	r3, fp
 1530 02ca 1B68     		ldr	r3, [r3]
 1531 02cc DB59     		ldr	r3, [r3, r7]
 1532 02ce 4046     		mov	r0, r8
 1533 02d0 9847     		blx	r3
 1534              	.LVL164:
 201:srcc/main.c   ****             {
 1535              		.loc 1 201 0
 1536 02d2 0028     		cmp	r0, #0
 1537 02d4 F0D1     		bne	.L87
 206:srcc/main.c   ****             LCD_ShowString(60,131,BLUE,GRAY,mRetdata+1);  //基站位置
 1538              		.loc 1 206 0
 1539 02d6 FFAB     		add	r3, sp, #1020
 1540 02d8 6133     		adds	r3, r3, #97
 1541 02da 9A46     		mov	r10, r3
 1542 02dc 1322     		movs	r2, #19
 1543 02de 1900     		movs	r1, r3
 1544 02e0 0CA8     		add	r0, sp, #48
 1545              	.LVL165:
 1546 02e2 FFF7FEFF 		bl	ArrayCopy
 1547              	.LVL166:
 207:srcc/main.c   ****             LCD_ShowString(170,150,BLUE,GRAY,
 1548              		.loc 1 207 0
 1549 02e6 5346     		mov	r3, r10
 1550 02e8 0093     		str	r3, [sp]
 1551 02ea 3B4B     		ldr	r3, .L105+44
 1552 02ec 1F22     		movs	r2, #31
 1553 02ee 8321     		movs	r1, #131
 1554 02f0 3C20     		movs	r0, #60
 1555 02f2 FFF7FEFF 		bl	LCD_ShowString
 1556              	.LVL167:
 209:srcc/main.c   ****         }
 1557              		.loc 1 209 0
 1558 02f6 4346     		mov	r3, r8
 1559 02f8 1878     		ldrb	r0, [r3]
 1560 02fa FFA9     		add	r1, sp, #1020
 1561 02fc 4031     		adds	r1, r1, #64
 1562 02fe FFF7FEFF 		bl	IntConvertToStr
 1563              	.LVL168:
 208:srcc/main.c   ****                     (uint_8 *)IntConvertToStr(mRetdata[0],mString));
 1564              		.loc 1 208 0
 1565 0302 0090     		str	r0, [sp]
 1566 0304 344B     		ldr	r3, .L105+44
 1567 0306 1F22     		movs	r2, #31
 1568 0308 9621     		movs	r1, #150
 1569 030a AA20     		movs	r0, #170
 1570 030c FFF7FEFF 		bl	LCD_ShowString
 1571              	.LVL169:
 1572 0310 D6E7     		b	.L34
 1573              	.LVL170:
 1574              	.L86:
 212:srcc/main.c   ****         mflag =uecom_linkCS(gFlashData.serverIP,gFlashData.serverPort);
 1575              		.loc 1 212 0
 1576 0312 9621     		movs	r1, #150
 1577 0314 394B     		ldr	r3, .L105+80
 1578 0316 0093     		str	r3, [sp]
 1579 0318 2F4B     		ldr	r3, .L105+44
 1580 031a 1F22     		movs	r2, #31
 1581 031c 4900     		lsls	r1, r1, #1
 1582 031e 0620     		movs	r0, #6
 1583 0320 FFF7FEFF 		bl	LCD_ShowString
 1584              	.LVL171:
 213:srcc/main.c   ****         if(mflag)
 1585              		.loc 1 213 0
 1586 0324 244B     		ldr	r3, .L105+12
 1587 0326 1A68     		ldr	r2, [r3]
 1588 0328 B623     		movs	r3, #182
 1589 032a 5B00     		lsls	r3, r3, #1
 1590 032c D358     		ldr	r3, [r2, r3]
 1591 032e 2B49     		ldr	r1, .L105+48
 1592 0330 0598     		ldr	r0, [sp, #20]
 1593 0332 9847     		blx	r3
 1594              	.LVL172:
 1595 0334 0890     		str	r0, [sp, #32]
 1596              	.LVL173:
 214:srcc/main.c   ****         {
 1597              		.loc 1 214 0
 1598 0336 0028     		cmp	r0, #0
 1599 0338 27D1     		bne	.L88
 220:srcc/main.c   ****         break;
 1600              		.loc 1 220 0
 1601 033a 9621     		movs	r1, #150
 1602 033c 304B     		ldr	r3, .L105+84
 1603 033e 0093     		str	r3, [sp]
 1604 0340 254B     		ldr	r3, .L105+44
 1605 0342 1F22     		movs	r2, #31
 1606 0344 4900     		lsls	r1, r1, #1
 1607 0346 0620     		movs	r0, #6
 1608              	.LVL174:
 1609 0348 FFF7FEFF 		bl	LCD_ShowString
 1610              	.LVL175:
 225:srcc/main.c   ****     //图形化编程之主循环开始前的初始化处【Graphic11】
 1611              		.loc 1 225 0
 1612 034c 1A4B     		ldr	r3, .L105+12
 1613 034e 1A68     		ldr	r2, [r3]
 1614 0350 C423     		movs	r3, #196
 1615 0352 5B00     		lsls	r3, r3, #1
 1616 0354 D358     		ldr	r3, [r2, r3]
 1617 0356 0320     		movs	r0, #3
 1618 0358 9847     		blx	r3
 1619              	.LVL176:
 1620 035a 0F23     		movs	r3, #15
 1621 035c 08AA     		add	r2, sp, #32
 1622              	.LVL177:
 1623 035e 9446     		mov	ip, r2
 1624 0360 6344     		add	r3, r3, ip
 1625 0362 1870     		strb	r0, [r3]
  90:srcc/main.c   **** 
 1626              		.loc 1 90 0
 1627 0364 089B     		ldr	r3, [sp, #32]
 1628 0366 9846     		mov	r8, r3
  89:srcc/main.c   ****     mLCDFlag = 0;                      //清零LCD更新标志位
 1629              		.loc 1 89 0
 1630 0368 0023     		movs	r3, #0
 1631 036a 0024     		movs	r4, #0
 1632 036c 0693     		str	r3, [sp, #24]
 1633 036e 0794     		str	r4, [sp, #28]
  84:srcc/main.c   ****     mFlashFlag = 0;                    //默认不写入flash
 1634              		.loc 1 84 0
 1635 0370 0124     		movs	r4, #1
  83:srcc/main.c   ****     mSendFlag = 1;                     //默认终端发送数据
 1636              		.loc 1 83 0
 1637 0372 0025     		movs	r5, #0
 237:srcc/main.c   ****         mTmp1=mTmp;
 1638              		.loc 1 237 0
 1639 0374 104B     		ldr	r3, .L105+12
 1640 0376 9A46     		mov	r10, r3
 239:srcc/main.c   ****         {
 1641              		.loc 1 239 0
 1642 0378 0D4B     		ldr	r3, .L105+4
 1643 037a 9946     		mov	r9, r3
 322:srcc/main.c   ****             if(mflag)
 1644              		.loc 1 322 0
 1645 037c 174B     		ldr	r3, .L105+48
 1646 037e 0F3B     		subs	r3, r3, #15
 1647 0380 0593     		str	r3, [sp, #20]
 279:srcc/main.c   **** 				ArrayCopy(mSendData+25,(uint_8 *)&gUserData.mcuTemp,4);
 1648              		.loc 1 279 0
 1649 0382 204B     		ldr	r3, .L105+88
 1650 0384 2333     		adds	r3, r3, #35
 1651 0386 0993     		str	r3, [sp, #36]
 1652 0388 7DE2     		b	.L36
 1653              	.LVL178:
 1654              	.L88:
 216:srcc/main.c   ****             uecom_power(UECOM_REBOOT);  //通信模组重启
 1655              		.loc 1 216 0
 1656 038a 9621     		movs	r1, #150
 1657 038c 1E4B     		ldr	r3, .L105+92
 1658 038e 0093     		str	r3, [sp]
 1659 0390 114B     		ldr	r3, .L105+44
 1660 0392 1F22     		movs	r2, #31
 1661 0394 4900     		lsls	r1, r1, #1
 1662 0396 0620     		movs	r0, #6
 1663              	.LVL179:
 1664 0398 FFF7FEFF 		bl	LCD_ShowString
 1665              	.LVL180:
 217:srcc/main.c   ****             continue;
 1666              		.loc 1 217 0
 1667 039c 064B     		ldr	r3, .L105+12
 1668 039e 1A68     		ldr	r2, [r3]
 1669 03a0 B023     		movs	r3, #176
 1670 03a2 5B00     		lsls	r3, r3, #1
 1671 03a4 D358     		ldr	r3, [r2, r3]
 1672 03a6 0220     		movs	r0, #2
 1673 03a8 9847     		blx	r3
 1674              	.LVL181:
 218:srcc/main.c   ****         }
 1675              		.loc 1 218 0
 1676 03aa C2E6     		b	.L22
 1677              	.L106:
 1678              		.align	2
 1679              	.L105:
 1680 03ac 3CFBFFFF 		.word	-1220
 1681 03b0 00000000 		.word	gTimeSec
 1682 03b4 811B535C 		.word	1548950401
 1683 03b8 00000000 		.word	bios_fun_point
 1684 03bc 00000000 		.word	gRecvLength
 1685 03c0 00000000 		.word	flag
 1686 03c4 1100CC00 		.word	13369361
 1687 03c8 00000000 		.word	gFlashData
 1688 03cc 00000000 		.word	gUserData
 1689 03d0 00F00740 		.word	1074262016
 1690 03d4 00000000 		.word	.LC64
 1691 03d8 30840000 		.word	33840
 1692 03dc 9E000000 		.word	gFlashData+158
 1693 03e0 70170000 		.word	6000
 1694 03e4 20000000 		.word	.LC66
 1695 03e8 40000000 		.word	.LC68
 1696 03ec 60000000 		.word	.LC70
 1697 03f0 80000000 		.word	.LC72
 1698 03f4 A0000000 		.word	.LC74
 1699 03f8 C0000000 		.word	.LC76
 1700 03fc E0000000 		.word	.LC78
 1701 0400 20010000 		.word	.LC84
 1702 0404 04000000 		.word	gUserData+4
 1703 0408 00010000 		.word	.LC82
 1704              	.LVL182:
 1705              	.L75:
 241:srcc/main.c   ****             gUserData.currentTime = mTmp;
 1706              		.loc 1 241 0
 1707 040c D84B     		ldr	r3, .L107
 1708 040e 1860     		str	r0, [r3]
 1709 0410 5960     		str	r1, [r3, #4]
 242:srcc/main.c   ****             //（2.1.1）更新当前秒数并在LCD上显示时间(time)
 1710              		.loc 1 242 0
 1711 0412 D84E     		ldr	r6, .L107+4
 1712 0414 3300     		movs	r3, r6
 1713 0416 2733     		adds	r3, r3, #39
 1714 0418 1870     		strb	r0, [r3]
 1715 041a 020A     		lsrs	r2, r0, #8
 1716 041c 5A70     		strb	r2, [r3, #1]
 1717 041e 020C     		lsrs	r2, r0, #16
 1718 0420 9A70     		strb	r2, [r3, #2]
 1719 0422 020E     		lsrs	r2, r0, #24
 1720 0424 DA70     		strb	r2, [r3, #3]
 1721 0426 1971     		strb	r1, [r3, #4]
 1722 0428 0A0A     		lsrs	r2, r1, #8
 1723 042a 5A71     		strb	r2, [r3, #5]
 1724 042c 0A02     		lsls	r2, r1, #8
 1725 042e 120E     		lsrs	r2, r2, #24
 1726 0430 9A71     		strb	r2, [r3, #6]
 1727 0432 0A0E     		lsrs	r2, r1, #24
 1728 0434 DA71     		strb	r2, [r3, #7]
 244:srcc/main.c   ****             printf(gTimeString);
 1729              		.loc 1 244 0
 1730 0436 D04F     		ldr	r7, .L107+8
 1731 0438 3A00     		movs	r2, r7
 1732 043a FFF7FEFF 		bl	timeChange
 1733              	.LVL183:
 245:srcc/main.c   ****             printf("  \n");
 1734              		.loc 1 245 0
 1735 043e 3800     		movs	r0, r7
 1736 0440 FFF7FEFF 		bl	myprintf
 1737              	.LVL184:
 246:srcc/main.c   ****             LCD_ShowString(49,209,BLUE,GRAY,gTimeString);//LCD上显示时间
 1738              		.loc 1 246 0
 1739 0444 CD48     		ldr	r0, .L107+12
 1740 0446 FFF7FEFF 		bl	myprintf
 1741              	.LVL185:
 247:srcc/main.c   ****             //（2.1.2）控制红灯闪烁
 1742              		.loc 1 247 0
 1743 044a 0097     		str	r7, [sp]
 1744 044c CC4B     		ldr	r3, .L107+16
 1745 044e 1F22     		movs	r2, #31
 1746 0450 D121     		movs	r1, #209
 1747 0452 3120     		movs	r0, #49
 1748 0454 FFF7FEFF 		bl	LCD_ShowString
 1749              	.LVL186:
 249:srcc/main.c   ****             //（2.1.3）判断是否到达发送数据的时间
 1750              		.loc 1 249 0
 1751 0458 CA4B     		ldr	r3, .L107+20
 1752 045a 1B68     		ldr	r3, [r3]
 1753 045c 9B6E     		ldr	r3, [r3, #104]
 1754 045e 0520     		movs	r0, #5
 1755 0460 9847     		blx	r3
 1756              	.LVL187:
 251:srcc/main.c   ****             {
 1757              		.loc 1 251 0
 1758 0462 2723     		movs	r3, #39
 1759 0464 F05C     		ldrb	r0, [r6, r3]
 1760 0466 0133     		adds	r3, r3, #1
 1761 0468 F35C     		ldrb	r3, [r6, r3]
 1762 046a 1B02     		lsls	r3, r3, #8
 1763 046c 0343     		orrs	r3, r0
 1764 046e 2922     		movs	r2, #41
 1765 0470 B05C     		ldrb	r0, [r6, r2]
 1766 0472 0004     		lsls	r0, r0, #16
 1767 0474 0343     		orrs	r3, r0
 1768 0476 0132     		adds	r2, r2, #1
 1769 0478 B05C     		ldrb	r0, [r6, r2]
 1770 047a 0006     		lsls	r0, r0, #24
 1771 047c 1843     		orrs	r0, r3
 1772 047e 2B23     		movs	r3, #43
 1773 0480 F15C     		ldrb	r1, [r6, r3]
 1774 0482 0133     		adds	r3, r3, #1
 1775 0484 F35C     		ldrb	r3, [r6, r3]
 1776 0486 1B02     		lsls	r3, r3, #8
 1777 0488 0B43     		orrs	r3, r1
 1778 048a 0332     		adds	r2, r2, #3
 1779 048c B15C     		ldrb	r1, [r6, r2]
 1780 048e 0904     		lsls	r1, r1, #16
 1781 0490 0B43     		orrs	r3, r1
 1782 0492 0132     		adds	r2, r2, #1
 1783 0494 B15C     		ldrb	r1, [r6, r2]
 1784 0496 0906     		lsls	r1, r1, #24
 1785 0498 1943     		orrs	r1, r3
 1786 049a BB4A     		ldr	r2, .L107+24
 1787 049c A323     		movs	r3, #163
 1788 049e D65C     		ldrb	r6, [r2, r3]
 1789 04a0 0133     		adds	r3, r3, #1
 1790 04a2 D35C     		ldrb	r3, [r2, r3]
 1791 04a4 1B02     		lsls	r3, r3, #8
 1792 04a6 1E43     		orrs	r6, r3
 1793 04a8 A523     		movs	r3, #165
 1794 04aa D35C     		ldrb	r3, [r2, r3]
 1795 04ac 1B04     		lsls	r3, r3, #16
 1796 04ae 3343     		orrs	r3, r6
 1797 04b0 A626     		movs	r6, #166
 1798 04b2 925D     		ldrb	r2, [r2, r6]
 1799 04b4 1206     		lsls	r2, r2, #24
 1800 04b6 1A43     		orrs	r2, r3
 1801 04b8 0023     		movs	r3, #0
 1802 04ba FFF7FEFF 		bl	__aeabi_uldivmod
 1803              	.LVL188:
 1804 04be 1A43     		orrs	r2, r3
 1805 04c0 00D0     		beq	.LCB1702
 1806 04c2 EEE1     		b	.L37	@long jump
 1807              	.LCB1702:
 1808              	.LVL189:
 257:srcc/main.c   ****         {
 1809              		.loc 1 257 0
 1810 04c4 AB4B     		ldr	r3, .L107+4
 1811 04c6 E822     		movs	r2, #232
 1812 04c8 9A5C     		ldrb	r2, [r3, r2]
 1813 04ca E921     		movs	r1, #233
 1814 04cc 585C     		ldrb	r0, [r3, r1]
 1815 04ce 0002     		lsls	r0, r0, #8
 1816 04d0 1043     		orrs	r0, r2
 1817 04d2 0490     		str	r0, [sp, #16]
 253:srcc/main.c   ****             }
 1818              		.loc 1 253 0
 1819 04d4 0124     		movs	r4, #1
 257:srcc/main.c   ****         {
 1820              		.loc 1 257 0
 1821 04d6 8542     		cmp	r5, r0
 1822 04d8 00D0     		beq	.LCB1715
 1823 04da ECE1     		b	.L71	@long jump
 1824              	.LCB1715:
 1825 04dc 0495     		str	r5, [sp, #16]
 1826 04de 00E0     		b	.L42
 1827              	.LVL190:
 1828              	.L98:
 1829 04e0 0495     		str	r5, [sp, #16]
 1830              	.LVL191:
 1831              	.L42:
 267:srcc/main.c   **** 			//（2.3.2）根据命令，获得需要发送的数据
 1832              		.loc 1 267 0
 1833 04e2 A448     		ldr	r0, .L107+4
 1834 04e4 FFF7FEFF 		bl	userData_get
 1835              	.LVL192:
 269:srcc/main.c   **** 			{
 1836              		.loc 1 269 0
 1837 04e8 A74A     		ldr	r2, .L107+24
 1838 04ea AB23     		movs	r3, #171
 1839 04ec D35C     		ldrb	r3, [r2, r3]
 1840 04ee 552B     		cmp	r3, #85
 1841 04f0 3FD0     		beq	.L89
 1842              	.LVL193:
 1843              	.L44:
 289:srcc/main.c   **** 			LCD_ShowString(170,150,BLUE,GRAY,
 1844              		.loc 1 289 0
 1845 04f2 A34C     		ldr	r4, .L107+16
 1846 04f4 A54B     		ldr	r3, .L107+28
 1847 04f6 0093     		str	r3, [sp]
 1848 04f8 2300     		movs	r3, r4
 1849 04fa 1F22     		movs	r2, #31
 1850 04fc 9621     		movs	r1, #150
 1851 04fe AA20     		movs	r0, #170
 1852 0500 FFF7FEFF 		bl	LCD_ShowString
 1853              	.LVL194:
 291:srcc/main.c   **** 			//（2.3.4）UE模块发送数据
 1854              		.loc 1 291 0
 1855 0504 9B4A     		ldr	r2, .L107+4
 1856 0506 E523     		movs	r3, #229
 1857 0508 D05C     		ldrb	r0, [r2, r3]
 1858 050a FFA9     		add	r1, sp, #1020
 1859 050c 4031     		adds	r1, r1, #64
 1860 050e FFF7FEFF 		bl	IntConvertToStr
 1861              	.LVL195:
 290:srcc/main.c   **** 					(uint_8 *)IntConvertToStr(gUserData.signalPower,mString));
 1862              		.loc 1 290 0
 1863 0512 0090     		str	r0, [sp]
 1864 0514 2300     		movs	r3, r4
 1865 0516 1F22     		movs	r2, #31
 1866 0518 9621     		movs	r1, #150
 1867 051a AA20     		movs	r0, #170
 1868 051c FFF7FEFF 		bl	LCD_ShowString
 1869              	.LVL196:
 293:srcc/main.c   **** 
 1870              		.loc 1 293 0
 1871 0520 9625     		movs	r5, #150
 1872 0522 6D00     		lsls	r5, r5, #1
 1873 0524 9A4B     		ldr	r3, .L107+32
 1874 0526 0093     		str	r3, [sp]
 1875 0528 2300     		movs	r3, r4
 1876 052a 1F22     		movs	r2, #31
 1877 052c 2900     		movs	r1, r5
 1878 052e 0620     		movs	r0, #6
 1879 0530 FFF7FEFF 		bl	LCD_ShowString
 1880              	.LVL197:
 296:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Send ..                 ");
 1881              		.loc 1 296 0
 1882 0534 934B     		ldr	r3, .L107+20
 1883 0536 1A68     		ldr	r2, [r3]
 1884 0538 B823     		movs	r3, #184
 1885 053a 5B00     		lsls	r3, r3, #1
 1886 053c D358     		ldr	r3, [r2, r3]
 1887 053e 14A9     		add	r1, sp, #80
 1888 0540 0398     		ldr	r0, [sp, #12]
 1889 0542 9847     		blx	r3
 1890              	.LVL198:
 1891 0544 0600     		movs	r6, r0
 1892              	.LVL199:
 297:srcc/main.c   ****             if(mflag)  goto main_loop1;    //数据发送失败，LCD显示提示
 1893              		.loc 1 297 0
 1894 0546 934B     		ldr	r3, .L107+36
 1895 0548 0093     		str	r3, [sp]
 1896 054a 2300     		movs	r3, r4
 1897 054c 1F22     		movs	r2, #31
 1898 054e 2900     		movs	r1, r5
 1899 0550 0620     		movs	r0, #6
 1900              	.LVL200:
 1901 0552 FFF7FEFF 		bl	LCD_ShowString
 1902              	.LVL201:
 298:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Send Successfully       ");
 1903              		.loc 1 298 0
 1904 0556 002E     		cmp	r6, #0
 1905 0558 00D0     		beq	.LCB1795
 1906 055a C8E0     		b	.L46	@long jump
 1907              	.LCB1795:
 299:srcc/main.c   ****             goto main_loop;
 1908              		.loc 1 299 0
 1909 055c 9621     		movs	r1, #150
 1910 055e 8E4B     		ldr	r3, .L107+40
 1911 0560 0093     		str	r3, [sp]
 1912 0562 2300     		movs	r3, r4
 1913 0564 1F22     		movs	r2, #31
 1914 0566 4900     		lsls	r1, r1, #1
 1915 0568 0620     		movs	r0, #6
 1916 056a FFF7FEFF 		bl	LCD_ShowString
 1917              	.LVL202:
 300:srcc/main.c   ****         main_loop1:
 1918              		.loc 1 300 0
 1919 056e 049D     		ldr	r5, [sp, #16]
 1920 0570 ACE1     		b	.L43
 1921              	.LVL203:
 1922              	.L89:
 269:srcc/main.c   **** 			{
 1923              		.loc 1 269 0 discriminator 1
 1924 0572 5733     		adds	r3, r3, #87
 1925 0574 D35C     		ldrb	r3, [r2, r3]
 1926 0576 302B     		cmp	r3, #48
 1927 0578 41D0     		beq	.L90
 275:srcc/main.c   **** 			{
 1928              		.loc 1 275 0 discriminator 1
 1929 057a 312B     		cmp	r3, #49
 1930 057c B9D1     		bne	.L44
 277:srcc/main.c   **** 				ArrayCopy(mSendData+2,gUserData.IMSI,15);
 1931              		.loc 1 277 0
 1932 057e 0222     		movs	r2, #2
 1933 0580 8649     		ldr	r1, .L107+44
 1934 0582 14A8     		add	r0, sp, #80
 1935 0584 FFF7FEFF 		bl	ArrayCopy
 1936              	.LVL204:
 278:srcc/main.c   **** 				ArrayCopy(mSendData+17,(uint_8 *)&gUserData.currentTime,8);
 1937              		.loc 1 278 0
 1938 0588 0F22     		movs	r2, #15
 1939 058a 8549     		ldr	r1, .L107+48
 1940 058c 3220     		movs	r0, #50
 1941 058e 08AB     		add	r3, sp, #32
 1942 0590 9C46     		mov	ip, r3
 1943 0592 6044     		add	r0, r0, ip
 1944 0594 FFF7FEFF 		bl	ArrayCopy
 1945              	.LVL205:
 279:srcc/main.c   **** 				ArrayCopy(mSendData+25,(uint_8 *)&gUserData.mcuTemp,4);
 1946              		.loc 1 279 0
 1947 0598 0822     		movs	r2, #8
 1948 059a 0999     		ldr	r1, [sp, #36]
 1949 059c 4120     		movs	r0, #65
 1950 059e 08AB     		add	r3, sp, #32
 1951 05a0 9C46     		mov	ip, r3
 1952 05a2 6044     		add	r0, r0, ip
 1953 05a4 FFF7FEFF 		bl	ArrayCopy
 1954              	.LVL206:
 280:srcc/main.c   **** 				ArrayCopy(mSendData+29,(uint_8 *)&gUserData.signalPower,1);
 1955              		.loc 1 280 0
 1956 05a8 7D49     		ldr	r1, .L107+48
 1957 05aa AF31     		adds	r1, r1, #175
 1958 05ac 0422     		movs	r2, #4
 1959 05ae 4920     		movs	r0, #73
 1960 05b0 08AB     		add	r3, sp, #32
 1961 05b2 9C46     		mov	ip, r3
 1962 05b4 6044     		add	r0, r0, ip
 1963 05b6 FFF7FEFF 		bl	ArrayCopy
 1964              	.LVL207:
 281:srcc/main.c   **** 				ArrayCopy(mSendData+30,(uint_8 *)&gUserData.bright,2);
 1965              		.loc 1 281 0
 1966 05ba 7949     		ldr	r1, .L107+48
 1967 05bc E131     		adds	r1, r1, #225
 1968 05be 0122     		movs	r2, #1
 1969 05c0 4D20     		movs	r0, #77
 1970 05c2 08AB     		add	r3, sp, #32
 1971 05c4 9C46     		mov	ip, r3
 1972 05c6 6044     		add	r0, r0, ip
 1973 05c8 FFF7FEFF 		bl	ArrayCopy
 1974              	.LVL208:
 282:srcc/main.c   **** 				ArrayCopy(mSendData+32,(uint_8 *)&gUserData.touchNum,2);
 1975              		.loc 1 282 0
 1976 05cc 7449     		ldr	r1, .L107+48
 1977 05ce E231     		adds	r1, r1, #226
 1978 05d0 0222     		movs	r2, #2
 1979 05d2 4E20     		movs	r0, #78
 1980 05d4 08AB     		add	r3, sp, #32
 1981 05d6 9C46     		mov	ip, r3
 1982 05d8 6044     		add	r0, r0, ip
 1983 05da FFF7FEFF 		bl	ArrayCopy
 1984              	.LVL209:
 283:srcc/main.c   **** 				ArrayCopy(mSendData+34,gUserData.lbs_location,25);
 1985              		.loc 1 283 0
 1986 05de 7049     		ldr	r1, .L107+48
 1987 05e0 E431     		adds	r1, r1, #228
 1988 05e2 0222     		movs	r2, #2
 1989 05e4 1CA8     		add	r0, sp, #112
 1990 05e6 FFF7FEFF 		bl	ArrayCopy
 1991              	.LVL210:
 284:srcc/main.c   **** 				//【画瓢处3】更改“U1”命令发送的数据
 1992              		.loc 1 284 0
 1993 05ea 6D49     		ldr	r1, .L107+48
 1994 05ec FA31     		adds	r1, r1, #250
 1995 05ee 1922     		movs	r2, #25
 1996 05f0 5220     		movs	r0, #82
 1997 05f2 08AB     		add	r3, sp, #32
 1998 05f4 9C46     		mov	ip, r3
 1999 05f6 6044     		add	r0, r0, ip
 2000 05f8 FFF7FEFF 		bl	ArrayCopy
 2001              	.LVL211:
 2002 05fc 79E7     		b	.L44
 2003              	.L90:
 2004              	.LVL212:
 272:srcc/main.c   **** 				ArrayCopy(mSendData,(uint_8 *)&gUserData,mSendLen);
 2005              		.loc 1 272 0
 2006 05fe 5D4C     		ldr	r4, .L107+4
 2007 0600 0222     		movs	r2, #2
 2008 0602 6649     		ldr	r1, .L107+44
 2009 0604 2000     		movs	r0, r4
 2010 0606 FFF7FEFF 		bl	ArrayCopy
 2011              	.LVL213:
 273:srcc/main.c   **** 			}
 2012              		.loc 1 273 0
 2013 060a 1827     		movs	r7, #24
 2014 060c FF37     		adds	r7, r7, #255
 2015 060e 3A00     		movs	r2, r7
 2016 0610 2100     		movs	r1, r4
 2017 0612 14A8     		add	r0, sp, #80
 2018 0614 FFF7FEFF 		bl	ArrayCopy
 2019              	.LVL214:
 271:srcc/main.c   **** 				ArrayCopy(gUserData.cmd,gFlashData.frameCmd,2);
 2020              		.loc 1 271 0
 2021 0618 0397     		str	r7, [sp, #12]
 273:srcc/main.c   **** 			}
 2022              		.loc 1 273 0
 2023 061a 6AE7     		b	.L44
 2024              	.LVL215:
 2025              	.L48:
 306:srcc/main.c   ****                     break;
 2026              		.loc 1 306 0
 2027 061c 9621     		movs	r1, #150
 2028 061e 614B     		ldr	r3, .L107+52
 2029 0620 0093     		str	r3, [sp]
 2030 0622 574B     		ldr	r3, .L107+16
 2031 0624 1F22     		movs	r2, #31
 2032 0626 4900     		lsls	r1, r1, #1
 2033 0628 0620     		movs	r0, #6
 2034 062a FFF7FEFF 		bl	LCD_ShowString
 2035              	.LVL216:
 2036              	.L47:
 313:srcc/main.c   ****             uecom_init();
 2037              		.loc 1 313 0
 2038 062e 9625     		movs	r5, #150
 2039 0630 6D00     		lsls	r5, r5, #1
 2040 0632 5D4F     		ldr	r7, .L107+56
 2041 0634 0097     		str	r7, [sp]
 2042 0636 524B     		ldr	r3, .L107+16
 2043 0638 1F22     		movs	r2, #31
 2044 063a 2900     		movs	r1, r5
 2045 063c 0620     		movs	r0, #6
 2046 063e FFF7FEFF 		bl	LCD_ShowString
 2047              	.LVL217:
 314:srcc/main.c   ****             Delay_ms(100);
 2048              		.loc 1 314 0
 2049 0642 504C     		ldr	r4, .L107+20
 2050 0644 B226     		movs	r6, #178
 2051              	.LVL218:
 2052 0646 7600     		lsls	r6, r6, #1
 2053 0648 2368     		ldr	r3, [r4]
 2054 064a 9B59     		ldr	r3, [r3, r6]
 2055 064c 9847     		blx	r3
 2056              	.LVL219:
 315:srcc/main.c   ****             //进行两次初始化（防错）
 2057              		.loc 1 315 0
 2058 064e 6420     		movs	r0, #100
 2059 0650 FFF7FEFF 		bl	Delay_ms
 2060              	.LVL220:
 317:srcc/main.c   ****             uecom_init();
 2061              		.loc 1 317 0
 2062 0654 0097     		str	r7, [sp]
 2063 0656 4A4B     		ldr	r3, .L107+16
 2064 0658 1F22     		movs	r2, #31
 2065 065a 2900     		movs	r1, r5
 2066 065c 0620     		movs	r0, #6
 2067 065e FFF7FEFF 		bl	LCD_ShowString
 2068              	.LVL221:
 318:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit ..               ");
 2069              		.loc 1 318 0
 2070 0662 2368     		ldr	r3, [r4]
 2071 0664 9B59     		ldr	r3, [r3, r6]
 2072 0666 9847     		blx	r3
 2073              	.LVL222:
 319:srcc/main.c   ****             uecom_linkBase();
 2074              		.loc 1 319 0
 2075 0668 504B     		ldr	r3, .L107+60
 2076 066a 0093     		str	r3, [sp]
 2077 066c 444B     		ldr	r3, .L107+16
 2078 066e 1F22     		movs	r2, #31
 2079 0670 2900     		movs	r1, r5
 2080 0672 0620     		movs	r0, #6
 2081 0674 FFF7FEFF 		bl	LCD_ShowString
 2082              	.LVL223:
 320:srcc/main.c   ****             LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit ...               ");
 2083              		.loc 1 320 0
 2084 0678 B423     		movs	r3, #180
 2085 067a 5B00     		lsls	r3, r3, #1
 2086 067c 2268     		ldr	r2, [r4]
 2087 067e D358     		ldr	r3, [r2, r3]
 2088 0680 9847     		blx	r3
 2089              	.LVL224:
 321:srcc/main.c   ****             mflag = uecom_linkCS(gFlashData.serverIP,gFlashData.serverPort);
 2090              		.loc 1 321 0
 2091 0682 4B4B     		ldr	r3, .L107+64
 2092 0684 0093     		str	r3, [sp]
 2093 0686 3E4B     		ldr	r3, .L107+16
 2094 0688 1F22     		movs	r2, #31
 2095 068a 2900     		movs	r1, r5
 2096 068c 0620     		movs	r0, #6
 2097 068e FFF7FEFF 		bl	LCD_ShowString
 2098              	.LVL225:
 322:srcc/main.c   ****             if(mflag)
 2099              		.loc 1 322 0
 2100 0692 2268     		ldr	r2, [r4]
 2101 0694 B623     		movs	r3, #182
 2102 0696 5B00     		lsls	r3, r3, #1
 2103 0698 D358     		ldr	r3, [r2, r3]
 2104 069a 4649     		ldr	r1, .L107+68
 2105 069c 0598     		ldr	r0, [sp, #20]
 2106 069e 9847     		blx	r3
 2107              	.LVL226:
 323:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Reinit .... Fail        ");
 2108              		.loc 1 323 0
 2109 06a0 0028     		cmp	r0, #0
 2110 06a2 32D1     		bne	.L91
 327:srcc/main.c   ****                 //重新初始化成功后进行数据发送
 2111              		.loc 1 327 0
 2112 06a4 9624     		movs	r4, #150
 2113 06a6 6400     		lsls	r4, r4, #1
 2114 06a8 434B     		ldr	r3, .L107+72
 2115 06aa 0093     		str	r3, [sp]
 2116 06ac 344B     		ldr	r3, .L107+16
 2117 06ae 1F22     		movs	r2, #31
 2118 06b0 2100     		movs	r1, r4
 2119 06b2 0620     		movs	r0, #6
 2120              	.LVL227:
 2121 06b4 FFF7FEFF 		bl	LCD_ShowString
 2122              	.LVL228:
 329:srcc/main.c   ****                 //结构体的地址可直接强制转为数组的地址
 2123              		.loc 1 329 0
 2124 06b8 354B     		ldr	r3, .L107+32
 2125 06ba 0093     		str	r3, [sp]
 2126 06bc 304B     		ldr	r3, .L107+16
 2127 06be 1F22     		movs	r2, #31
 2128 06c0 2100     		movs	r1, r4
 2129 06c2 0620     		movs	r0, #6
 2130 06c4 FFF7FEFF 		bl	LCD_ShowString
 2131              	.LVL229:
 331:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Send ..                 ");
 2132              		.loc 1 331 0
 2133 06c8 2E4B     		ldr	r3, .L107+20
 2134 06ca 1A68     		ldr	r2, [r3]
 2135 06cc B823     		movs	r3, #184
 2136 06ce 5B00     		lsls	r3, r3, #1
 2137 06d0 D358     		ldr	r3, [r2, r3]
 2138 06d2 14A9     		add	r1, sp, #80
 2139 06d4 0398     		ldr	r0, [sp, #12]
 2140 06d6 9847     		blx	r3
 2141              	.LVL230:
 2142 06d8 0600     		movs	r6, r0
 2143              	.LVL231:
 332:srcc/main.c   ****                 if(mflag)  goto main_loop1;    //数据发送失败，LCD显示提示
 2144              		.loc 1 332 0
 2145 06da 2E4B     		ldr	r3, .L107+36
 2146 06dc 0093     		str	r3, [sp]
 2147 06de 284B     		ldr	r3, .L107+16
 2148 06e0 1F22     		movs	r2, #31
 2149 06e2 2100     		movs	r1, r4
 2150 06e4 0620     		movs	r0, #6
 2151              	.LVL232:
 2152 06e6 FFF7FEFF 		bl	LCD_ShowString
 2153              	.LVL233:
 333:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Send Successfully       ");
 2154              		.loc 1 333 0
 2155 06ea 002E     		cmp	r6, #0
 2156 06ec 18D0     		beq	.L92
 2157              	.LVL234:
 2158              	.L46:
 303:srcc/main.c   ****             {
 2159              		.loc 1 303 0
 2160 06ee 012E     		cmp	r6, #1
 2161 06f0 94D0     		beq	.L48
 2162 06f2 022E     		cmp	r6, #2
 2163 06f4 9BD1     		bne	.L47
 309:srcc/main.c   ****                     break;
 2164              		.loc 1 309 0
 2165 06f6 9621     		movs	r1, #150
 2166 06f8 304B     		ldr	r3, .L107+76
 2167 06fa 0093     		str	r3, [sp]
 2168 06fc 204B     		ldr	r3, .L107+16
 2169 06fe 1F22     		movs	r2, #31
 2170 0700 4900     		lsls	r1, r1, #1
 2171 0702 0620     		movs	r0, #6
 2172 0704 FFF7FEFF 		bl	LCD_ShowString
 2173              	.LVL235:
 310:srcc/main.c   ****             }
 2174              		.loc 1 310 0
 2175 0708 91E7     		b	.L47
 2176              	.LVL236:
 2177              	.L91:
 324:srcc/main.c   ****             else
 2178              		.loc 1 324 0
 2179 070a 9621     		movs	r1, #150
 2180 070c 2C4B     		ldr	r3, .L107+80
 2181 070e 0093     		str	r3, [sp]
 2182 0710 1B4B     		ldr	r3, .L107+16
 2183 0712 1F22     		movs	r2, #31
 2184 0714 4900     		lsls	r1, r1, #1
 2185 0716 0620     		movs	r0, #6
 2186              	.LVL237:
 2187 0718 FFF7FEFF 		bl	LCD_ShowString
 2188              	.LVL238:
 2189 071c 049D     		ldr	r5, [sp, #16]
 2190 071e D5E0     		b	.L43
 2191              	.LVL239:
 2192              	.L92:
 334:srcc/main.c   ****             }
 2193              		.loc 1 334 0
 2194 0720 9621     		movs	r1, #150
 2195 0722 1D4B     		ldr	r3, .L107+40
 2196 0724 0093     		str	r3, [sp]
 2197 0726 164B     		ldr	r3, .L107+16
 2198 0728 1F22     		movs	r2, #31
 2199 072a 4900     		lsls	r1, r1, #1
 2200 072c 0620     		movs	r0, #6
 2201 072e FFF7FEFF 		bl	LCD_ShowString
 2202              	.LVL240:
 2203 0732 049D     		ldr	r5, [sp, #16]
 2204 0734 CAE0     		b	.L43
 2205              	.LVL241:
 2206              	.L99:
 352:srcc/main.c   ****             {
 2207              		.loc 1 352 0 discriminator 1
 2208 0736 FFAB     		add	r3, sp, #1020
 2209 0738 3C33     		adds	r3, r3, #60
 2210 073a 5B78     		ldrb	r3, [r3, #1]
 2211 073c 302B     		cmp	r3, #48
 2212 073e 45D0     		beq	.L93
 357:srcc/main.c   ****             {
 2213              		.loc 1 357 0 discriminator 1
 2214 0740 312B     		cmp	r3, #49
 2215 0742 00D1     		bne	.LCB2088
 2216 0744 40E1     		b	.L94	@long jump
 2217              	.LCB2088:
 362:srcc/main.c   ****             {
 2218              		.loc 1 362 0 discriminator 1
 2219 0746 322B     		cmp	r3, #50
 2220 0748 00D1     		bne	.LCB2090
 2221 074a 48E1     		b	.L95	@long jump
 2222              	.LCB2090:
 367:srcc/main.c   ****             {
 2223              		.loc 1 367 0 discriminator 1
 2224 074c 332B     		cmp	r3, #51
 2225 074e 00D1     		bne	.LCB2092
 2226 0750 50E1     		b	.L96	@long jump
 2227              	.LCB2092:
 2228              	.LVL242:
 2229              	.L57:
 453:srcc/main.c   ****             if(mflag==0)
 2230              		.loc 1 453 0
 2231 0752 1C4B     		ldr	r3, .L107+84
 2232 0754 0022     		movs	r2, #0
 2233 0756 1A80     		strh	r2, [r3]
 2234 0758 0023     		movs	r3, #0
 2235 075a 0393     		str	r3, [sp, #12]
 2236              	.LVL243:
 2237              	.L64:
 457:srcc/main.c   ****             else
 2238              		.loc 1 457 0
 2239 075c 9621     		movs	r1, #150
 2240 075e 1A4B     		ldr	r3, .L107+88
 2241 0760 0093     		str	r3, [sp]
 2242 0762 074B     		ldr	r3, .L107+16
 2243 0764 1F22     		movs	r2, #31
 2244 0766 4900     		lsls	r1, r1, #1
 2245 0768 0620     		movs	r0, #6
 2246 076a FFF7FEFF 		bl	LCD_ShowString
 2247              	.LVL244:
 2248 076e 50E0     		b	.L65
 2249              	.L108:
 2250              		.align	2
 2251              	.L107:
 2252 0770 00000000 		.word	gTimeSec
 2253 0774 00000000 		.word	gUserData
 2254 0778 00000000 		.word	gTimeString
 2255 077c 40010000 		.word	.LC87
 2256 0780 30840000 		.word	33840
 2257 0784 00000000 		.word	bios_fun_point
 2258 0788 00000000 		.word	gFlashData
 2259 078c 44010000 		.word	.LC97
 2260 0790 4C010000 		.word	.LC99
 2261 0794 6C010000 		.word	.LC101
 2262 0798 8C010000 		.word	.LC103
 2263 079c AB000000 		.word	gFlashData+171
 2264 07a0 04000000 		.word	gUserData+4
 2265 07a4 AC010000 		.word	.LC105
 2266 07a8 EC010000 		.word	.LC109
 2267 07ac 0C020000 		.word	.LC111
 2268 07b0 2C020000 		.word	.LC113
 2269 07b4 9E000000 		.word	gFlashData+158
 2270 07b8 6C020000 		.word	.LC117
 2271 07bc CC010000 		.word	.LC107
 2272 07c0 4C020000 		.word	.LC115
 2273 07c4 00000000 		.word	gRecvLength
 2274 07c8 D4020000 		.word	.LC148
 2275              	.LVL245:
 2276              	.L93:
 355:srcc/main.c   ****             }
 2277              		.loc 1 355 0
 2278 07cc AD22     		movs	r2, #173
 2279 07ce B749     		ldr	r1, .L109
 2280 07d0 3220     		movs	r0, #50
 2281 07d2 08AB     		add	r3, sp, #32
 2282 07d4 9C46     		mov	ip, r3
 2283 07d6 6044     		add	r0, r0, ip
 2284 07d8 FFF7FEFF 		bl	ArrayCopy
 2285              	.LVL246:
 354:srcc/main.c   ****                 ArrayCopy(mSendData+2,(uint_8*)(&gFlashData),mFlashLen);
 2286              		.loc 1 354 0
 2287 07dc AF23     		movs	r3, #175
 2288 07de 0393     		str	r3, [sp, #12]
 2289              	.LVL247:
 2290              	.L54:
 451:srcc/main.c   ****             }
 2291              		.loc 1 451 0
 2292 07e0 B34B     		ldr	r3, .L109+4
 2293 07e2 1A68     		ldr	r2, [r3]
 2294 07e4 B823     		movs	r3, #184
 2295 07e6 5B00     		lsls	r3, r3, #1
 2296 07e8 D358     		ldr	r3, [r2, r3]
 2297 07ea 14A9     		add	r1, sp, #80
 2298 07ec 0398     		ldr	r0, [sp, #12]
 2299 07ee 9847     		blx	r3
 2300              	.LVL248:
 453:srcc/main.c   ****             if(mflag==0)
 2301              		.loc 1 453 0
 2302 07f0 B04B     		ldr	r3, .L109+8
 2303 07f2 0022     		movs	r2, #0
 2304 07f4 1A80     		strh	r2, [r3]
 454:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Reply Successfully      ");
 2305              		.loc 1 454 0
 2306 07f6 0028     		cmp	r0, #0
 2307 07f8 00D1     		bne	.LCB2188
 2308 07fa 24E2     		b	.L97	@long jump
 2309              	.LCB2188:
 456:srcc/main.c   ****                 LCD_ShowString(6,300,BLUE,GRAY,"AHL Recv Successfully       ");
 2310              		.loc 1 456 0
 2311 07fc FF28     		cmp	r0, #255
 2312 07fe ADD0     		beq	.L64
 459:srcc/main.c   ****              //判断是否需要写flash
 2313              		.loc 1 459 0
 2314 0800 9621     		movs	r1, #150
 2315 0802 AD4B     		ldr	r3, .L109+12
 2316 0804 0093     		str	r3, [sp]
 2317 0806 AD4B     		ldr	r3, .L109+16
 2318 0808 1F22     		movs	r2, #31
 2319 080a 4900     		lsls	r1, r1, #1
 2320 080c 0620     		movs	r0, #6
 2321              	.LVL249:
 2322 080e FFF7FEFF 		bl	LCD_ShowString
 2323              	.LVL250:
 2324              	.L65:
 461:srcc/main.c   ****              {
 2325              		.loc 1 461 0
 2326 0812 012C     		cmp	r4, #1
 2327 0814 00D0     		beq	.LCB2209
 2328 0816 20E2     		b	.L67	@long jump
 2329              	.LCB2209:
 463:srcc/main.c   ****                 flash_write(63,0,mFlashLen,(uint_8*)(&gFlashData));
 2330              		.loc 1 463 0
 2331 0818 A54C     		ldr	r4, .L109+4
 2332              	.LVL251:
 2333 081a 2368     		ldr	r3, [r4]
 2334 081c 9B6B     		ldr	r3, [r3, #56]
 2335 081e 3F20     		movs	r0, #63
 2336 0820 9847     		blx	r3
 2337              	.LVL252:
 464:srcc/main.c   ****                 mFlashFlag = 0;
 2338              		.loc 1 464 0
 2339 0822 2368     		ldr	r3, [r4]
 2340 0824 DC6B     		ldr	r4, [r3, #60]
 2341 0826 A14B     		ldr	r3, .L109
 2342 0828 AD22     		movs	r2, #173
 2343 082a 0021     		movs	r1, #0
 2344 082c 3F20     		movs	r0, #63
 2345 082e A047     		blx	r4
 2346              	.LVL253:
 2347              	.L68:
 470:srcc/main.c   ****                 //补充显示显示设备的IMSI号、基站位置信息、接收次数
 2348              		.loc 1 470 0
 2349 0830 FFF7FEFF 		bl	LCD_Showfirst
 2350              	.LVL254:
 472:srcc/main.c   ****                 LCD_ShowString(60,85,BLUE,GRAY,mRetdata+20);
 2351              		.loc 1 472 0
 2352 0834 9E4B     		ldr	r3, .L109+4
 2353 0836 1A68     		ldr	r2, [r3]
 2354 0838 BE23     		movs	r3, #190
 2355 083a 5B00     		lsls	r3, r3, #1
 2356 083c D358     		ldr	r3, [r2, r3]
 2357 083e FFA8     		add	r0, sp, #1020
 2358 0840 6030     		adds	r0, r0, #96
 2359 0842 9847     		blx	r3
 2360              	.LVL255:
 473:srcc/main.c   ****                 LCD_ShowString(60,131,BLUE,GRAY,mLBS);  //基站位置
 2361              		.loc 1 473 0
 2362 0844 9D4C     		ldr	r4, .L109+16
 2363 0846 FFAB     		add	r3, sp, #1020
 2364 0848 7433     		adds	r3, r3, #116
 2365 084a 0093     		str	r3, [sp]
 2366 084c 2300     		movs	r3, r4
 2367 084e 1F22     		movs	r2, #31
 2368 0850 5521     		movs	r1, #85
 2369 0852 3C20     		movs	r0, #60
 2370 0854 FFF7FEFF 		bl	LCD_ShowString
 2371              	.LVL256:
 474:srcc/main.c   ****                 LCD_ShowString(90,251,BLUE,GRAY,IntConvertToStr(mRecvCount,mString));
 2372              		.loc 1 474 0
 2373 0858 0CAB     		add	r3, sp, #48
 2374 085a 0093     		str	r3, [sp]
 2375 085c 2300     		movs	r3, r4
 2376 085e 1F22     		movs	r2, #31
 2377 0860 8321     		movs	r1, #131
 2378 0862 3C20     		movs	r0, #60
 2379 0864 FFF7FEFF 		bl	LCD_ShowString
 2380              	.LVL257:
 475:srcc/main.c   ****              }
 2381              		.loc 1 475 0
 2382 0868 FFA9     		add	r1, sp, #1020
 2383 086a 4031     		adds	r1, r1, #64
 2384 086c 0698     		ldr	r0, [sp, #24]
 2385 086e FFF7FEFF 		bl	IntConvertToStr
 2386              	.LVL258:
 2387 0872 0090     		str	r0, [sp]
 2388 0874 2300     		movs	r3, r4
 2389 0876 1F22     		movs	r2, #31
 2390 0878 FB21     		movs	r1, #251
 2391 087a 5A20     		movs	r0, #90
 2392 087c FFF7FEFF 		bl	LCD_ShowString
 2393              	.LVL259:
 2394 0880 0123     		movs	r3, #1
 2395 0882 9846     		mov	r8, r3
 2396              	.L51:
 2397 0884 089C     		ldr	r4, [sp, #32]
 2398              	.LVL260:
 2399              	.L36:
 237:srcc/main.c   ****         mTmp1=mTmp;
 2400              		.loc 1 237 0
 2401 0886 5346     		mov	r3, r10
 2402 0888 1B68     		ldr	r3, [r3]
 2403 088a 5B68     		ldr	r3, [r3, #4]
 2404 088c 9847     		blx	r3
 2405              	.LVL261:
 239:srcc/main.c   ****         {
 2406              		.loc 1 239 0
 2407 088e 4B46     		mov	r3, r9
 2408 0890 1B68     		ldr	r3, [r3]
 2409 0892 8342     		cmp	r3, r0
 2410 0894 00D0     		beq	.LCB2300
 2411 0896 B9E5     		b	.L75	@long jump
 2412              	.LCB2300:
 2413 0898 4B46     		mov	r3, r9
 2414 089a 5B68     		ldr	r3, [r3, #4]
 2415 089c 8B42     		cmp	r3, r1
 2416 089e 00D0     		beq	.LCB2305
 2417 08a0 B4E5     		b	.L75	@long jump
 2418              	.LCB2305:
 2419              	.LVL262:
 2420              	.L37:
 257:srcc/main.c   ****         {
 2421              		.loc 1 257 0
 2422 08a2 874B     		ldr	r3, .L109+20
 2423 08a4 E822     		movs	r2, #232
 2424 08a6 9A5C     		ldrb	r2, [r3, r2]
 2425 08a8 E921     		movs	r1, #233
 2426 08aa 585C     		ldrb	r0, [r3, r1]
 2427 08ac 0002     		lsls	r0, r0, #8
 2428 08ae 1043     		orrs	r0, r2
 2429 08b0 0490     		str	r0, [sp, #16]
 2430 08b2 A842     		cmp	r0, r5
 2431 08b4 07D0     		beq	.L41
 2432              	.LVL263:
 2433              	.L71:
 260:srcc/main.c   ****                 mSendFlag = 1;
 2434              		.loc 1 260 0
 2435 08b6 0321     		movs	r1, #3
 2436 08b8 FFF7FEFF 		bl	__aeabi_uidivmod
 2437              	.LVL264:
 2438 08bc 89B2     		uxth	r1, r1
 2439 08be 0029     		cmp	r1, #0
 2440 08c0 00D1     		bne	.LCB2329
 2441 08c2 0EE6     		b	.L42	@long jump
 2442              	.LCB2329:
 2443 08c4 049D     		ldr	r5, [sp, #16]
 2444              	.LVL265:
 2445              	.L41:
 264:srcc/main.c   ****         {
 2446              		.loc 1 264 0
 2447 08c6 012C     		cmp	r4, #1
 2448 08c8 00D1     		bne	.LCB2337
 2449 08ca 09E6     		b	.L98	@long jump
 2450              	.LCB2337:
 2451              	.LVL266:
 2452              	.L43:
 342:srcc/main.c   ****         {
 2453              		.loc 1 342 0
 2454 08cc 784B     		ldr	r3, .L109+4
 2455 08ce 1A68     		ldr	r2, [r3]
 2456 08d0 CE23     		movs	r3, #206
 2457 08d2 5B00     		lsls	r3, r3, #1
 2458 08d4 D358     		ldr	r3, [r2, r3]
 2459 08d6 7749     		ldr	r1, .L109+8
 2460 08d8 7A48     		ldr	r0, .L109+24
 2461 08da 9847     		blx	r3
 2462              	.LVL267:
 2463 08dc 041E     		subs	r4, r0, #0
 2464 08de D1D1     		bne	.L51
 344:srcc/main.c   **** 
 2465              		.loc 1 344 0
 2466 08e0 0122     		movs	r2, #1
 2467 08e2 0023     		movs	r3, #0
 2468 08e4 0698     		ldr	r0, [sp, #24]
 2469 08e6 0799     		ldr	r1, [sp, #28]
 2470 08e8 8018     		adds	r0, r0, r2
 2471 08ea 5941     		adcs	r1, r1, r3
 2472 08ec 0690     		str	r0, [sp, #24]
 2473 08ee 0791     		str	r1, [sp, #28]
 2474              	.LVL268:
 346:srcc/main.c   **** 
 2475              		.loc 1 346 0
 2476 08f0 9621     		movs	r1, #150
 2477 08f2 754B     		ldr	r3, .L109+28
 2478 08f4 0093     		str	r3, [sp]
 2479 08f6 714B     		ldr	r3, .L109+16
 2480 08f8 1E32     		adds	r2, r2, #30
 2481 08fa 4900     		lsls	r1, r1, #1
 2482 08fc 0620     		movs	r0, #6
 2483              	.LVL269:
 2484 08fe FFF7FEFF 		bl	LCD_ShowString
 2485              	.LVL270:
 350:srcc/main.c   ****             ArrayCopy(mSendData,gRecvBuf,2);
 2486              		.loc 1 350 0
 2487 0902 704E     		ldr	r6, .L109+24
 2488 0904 FFAF     		add	r7, sp, #1020
 2489 0906 3C37     		adds	r7, r7, #60
 2490 0908 0222     		movs	r2, #2
 2491 090a 3100     		movs	r1, r6
 2492 090c 3800     		movs	r0, r7
 2493 090e FFF7FEFF 		bl	ArrayCopy
 2494              	.LVL271:
 351:srcc/main.c   ****             if(mCmd[0]=='A'&&mCmd[1]=='0')       //读取flash中的所有信息
 2495              		.loc 1 351 0
 2496 0912 0222     		movs	r2, #2
 2497 0914 3100     		movs	r1, r6
 2498 0916 14A8     		add	r0, sp, #80
 2499 0918 FFF7FEFF 		bl	ArrayCopy
 2500              	.LVL272:
 352:srcc/main.c   ****             {
 2501              		.loc 1 352 0
 2502 091c 3B78     		ldrb	r3, [r7]
 2503 091e 412B     		cmp	r3, #65
 2504 0920 00D1     		bne	.LCB2390
 2505 0922 08E7     		b	.L99	@long jump
 2506              	.LCB2390:
 372:srcc/main.c   ****             {
 2507              		.loc 1 372 0
 2508 0924 422B     		cmp	r3, #66
 2509 0926 70D0     		beq	.L100
 400:srcc/main.c   ****             {
 2510              		.loc 1 400 0
 2511 0928 552B     		cmp	r3, #85
 2512 092a 00D0     		beq	.LCB2394
 2513 092c 11E7     		b	.L57	@long jump
 2514              	.LCB2394:
 400:srcc/main.c   ****             {
 2515              		.loc 1 400 0 is_stmt 0 discriminator 1
 2516 092e FFAB     		add	r3, sp, #1020
 2517 0930 3C33     		adds	r3, r3, #60
 2518 0932 5B78     		ldrb	r3, [r3, #1]
 2519 0934 302B     		cmp	r3, #48
 2520 0936 00D1     		bne	.LCB2399
 2521 0938 D2E0     		b	.L101	@long jump
 2522              	.LCB2399:
 430:srcc/main.c   ****             {
 2523              		.loc 1 430 0 is_stmt 1 discriminator 1
 2524 093a 312B     		cmp	r3, #49
 2525 093c 00D0     		beq	.LCB2401
 2526 093e 08E7     		b	.L57	@long jump
 2527              	.LCB2401:
 432:srcc/main.c   ****                 if(gRecvLength == 59)
 2528              		.loc 1 432 0
 2529 0940 0222     		movs	r2, #2
 2530 0942 FFA9     		add	r1, sp, #1020
 2531 0944 3C31     		adds	r1, r1, #60
 2532 0946 6148     		ldr	r0, .L109+32
 2533 0948 FFF7FEFF 		bl	ArrayCopy
 2534              	.LVL273:
 433:srcc/main.c   ****                 {
 2535              		.loc 1 433 0
 2536 094c 594B     		ldr	r3, .L109+8
 2537 094e 1B88     		ldrh	r3, [r3]
 444:srcc/main.c   ****             }
 2538              		.loc 1 444 0
 2539 0950 0122     		movs	r2, #1
 2540 0952 9046     		mov	r8, r2
 2541              	.LVL274:
 433:srcc/main.c   ****                 {
 2542              		.loc 1 433 0
 2543 0954 3B2B     		cmp	r3, #59
 2544 0956 00D0     		beq	.LCB2414
 2545 0958 FBE6     		b	.L57	@long jump
 2546              	.LCB2414:
 435:srcc/main.c   ****                 	ArrayCopy(gUserData.IMSI,gRecvBuf+2,15);
 2547              		.loc 1 435 0
 2548 095a 5A4E     		ldr	r6, .L109+24
 2549 095c 584F     		ldr	r7, .L109+20
 2550 095e 0132     		adds	r2, r2, #1
 2551 0960 3100     		movs	r1, r6
 2552 0962 3800     		movs	r0, r7
 2553 0964 FFF7FEFF 		bl	ArrayCopy
 2554              	.LVL275:
 436:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.currentTime,gRecvBuf+17,8);
 2555              		.loc 1 436 0
 2556 0968 B11C     		adds	r1, r6, #2
 2557 096a 381D     		adds	r0, r7, #4
 2558 096c 0F22     		movs	r2, #15
 2559 096e FFF7FEFF 		bl	ArrayCopy
 2560              	.LVL276:
 437:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.mcuTemp,gRecvBuf+25,4);
 2561              		.loc 1 437 0
 2562 0972 3100     		movs	r1, r6
 2563 0974 1131     		adds	r1, r1, #17
 2564 0976 3800     		movs	r0, r7
 2565 0978 2730     		adds	r0, r0, #39
 2566 097a 0822     		movs	r2, #8
 2567 097c FFF7FEFF 		bl	ArrayCopy
 2568              	.LVL277:
 438:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.signalPower,gRecvBuf+29,1);
 2569              		.loc 1 438 0
 2570 0980 3100     		movs	r1, r6
 2571 0982 1931     		adds	r1, r1, #25
 2572 0984 3800     		movs	r0, r7
 2573 0986 B330     		adds	r0, r0, #179
 2574 0988 0422     		movs	r2, #4
 2575 098a FFF7FEFF 		bl	ArrayCopy
 2576              	.LVL278:
 439:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.bright,gRecvBuf+30,2);
 2577              		.loc 1 439 0
 2578 098e 3100     		movs	r1, r6
 2579 0990 1D31     		adds	r1, r1, #29
 2580 0992 3800     		movs	r0, r7
 2581 0994 E530     		adds	r0, r0, #229
 2582 0996 0122     		movs	r2, #1
 2583 0998 FFF7FEFF 		bl	ArrayCopy
 2584              	.LVL279:
 440:srcc/main.c   ****                 	ArrayCopy((uint_8 *)&gUserData.touchNum,gRecvBuf+32,2);
 2585              		.loc 1 440 0
 2586 099c 3100     		movs	r1, r6
 2587 099e 1E31     		adds	r1, r1, #30
 2588 09a0 3800     		movs	r0, r7
 2589 09a2 E630     		adds	r0, r0, #230
 2590 09a4 0222     		movs	r2, #2
 2591 09a6 FFF7FEFF 		bl	ArrayCopy
 2592              	.LVL280:
 441:srcc/main.c   ****                 	ArrayCopy(gUserData.lbs_location,gRecvBuf+34,25);
 2593              		.loc 1 441 0
 2594 09aa 3100     		movs	r1, r6
 2595 09ac 2031     		adds	r1, r1, #32
 2596 09ae 3800     		movs	r0, r7
 2597 09b0 E830     		adds	r0, r0, #232
 2598 09b2 0222     		movs	r2, #2
 2599 09b4 FFF7FEFF 		bl	ArrayCopy
 2600              	.LVL281:
 442:srcc/main.c   ****                 }
 2601              		.loc 1 442 0
 2602 09b8 3100     		movs	r1, r6
 2603 09ba 2231     		adds	r1, r1, #34
 2604 09bc 3800     		movs	r0, r7
 2605 09be FE30     		adds	r0, r0, #254
 2606 09c0 1922     		movs	r2, #25
 2607 09c2 FFF7FEFF 		bl	ArrayCopy
 2608              	.LVL282:
 2609 09c6 C4E6     		b	.L57
 2610              	.LVL283:
 2611              	.L94:
 360:srcc/main.c   ****             }
 2612              		.loc 1 360 0
 2613 09c8 8F22     		movs	r2, #143
 2614 09ca 3849     		ldr	r1, .L109
 2615 09cc 3220     		movs	r0, #50
 2616 09ce 08AB     		add	r3, sp, #32
 2617 09d0 9C46     		mov	ip, r3
 2618 09d2 6044     		add	r0, r0, ip
 2619 09d4 FFF7FEFF 		bl	ArrayCopy
 2620              	.LVL284:
 359:srcc/main.c   ****                 ArrayCopy(mSendData+2,gFlashData.equipName,mSendLen-2);
 2621              		.loc 1 359 0
 2622 09d8 9123     		movs	r3, #145
 2623 09da 0393     		str	r3, [sp, #12]
 360:srcc/main.c   ****             }
 2624              		.loc 1 360 0
 2625 09dc 00E7     		b	.L54
 2626              	.LVL285:
 2627              	.L95:
 365:srcc/main.c   ****             }
 2628              		.loc 1 365 0
 2629 09de 1422     		movs	r2, #20
 2630 09e0 3B49     		ldr	r1, .L109+36
 2631 09e2 3220     		movs	r0, #50
 2632 09e4 08AB     		add	r3, sp, #32
 2633 09e6 9C46     		mov	ip, r3
 2634 09e8 6044     		add	r0, r0, ip
 2635 09ea FFF7FEFF 		bl	ArrayCopy
 2636              	.LVL286:
 364:srcc/main.c   ****                 ArrayCopy(mSendData+2,gFlashData.serverIP,mSendLen-2);
 2637              		.loc 1 364 0
 2638 09ee 1623     		movs	r3, #22
 2639 09f0 0393     		str	r3, [sp, #12]
 365:srcc/main.c   ****             }
 2640              		.loc 1 365 0
 2641 09f2 F5E6     		b	.L54
 2642              	.LVL287:
 2643              	.L96:
 370:srcc/main.c   ****             }
 2644              		.loc 1 370 0
 2645 09f4 0822     		movs	r2, #8
 2646 09f6 3749     		ldr	r1, .L109+40
 2647 09f8 3220     		movs	r0, #50
 2648 09fa 08AB     		add	r3, sp, #32
 2649 09fc 9C46     		mov	ip, r3
 2650 09fe 6044     		add	r0, r0, ip
 2651 0a00 FFF7FEFF 		bl	ArrayCopy
 2652              	.LVL288:
 369:srcc/main.c   ****                 ArrayCopy(mSendData+2,(uint_8*)(&gFlashData.sendFrequencySec),mSendLen-2);
 2653              		.loc 1 369 0
 2654 0a04 0A23     		movs	r3, #10
 2655 0a06 0393     		str	r3, [sp, #12]
 370:srcc/main.c   ****             }
 2656              		.loc 1 370 0
 2657 0a08 EAE6     		b	.L54
 2658              	.LVL289:
 2659              	.L100:
 372:srcc/main.c   ****             {
 2660              		.loc 1 372 0 discriminator 1
 2661 0a0a FFAB     		add	r3, sp, #1020
 2662 0a0c 3C33     		adds	r3, r3, #60
 2663 0a0e 5B78     		ldrb	r3, [r3, #1]
 2664 0a10 302B     		cmp	r3, #48
 2665 0a12 17D0     		beq	.L102
 379:srcc/main.c   ****             {
 2666              		.loc 1 379 0 discriminator 1
 2667 0a14 312B     		cmp	r3, #49
 2668 0a16 26D0     		beq	.L103
 386:srcc/main.c   ****             {
 2669              		.loc 1 386 0 discriminator 1
 2670 0a18 322B     		cmp	r3, #50
 2671 0a1a 35D0     		beq	.L104
 393:srcc/main.c   ****             {
 2672              		.loc 1 393 0 discriminator 1
 2673 0a1c 332B     		cmp	r3, #51
 2674 0a1e 00D0     		beq	.LCB2532
 2675 0a20 97E6     		b	.L57	@long jump
 2676              	.LCB2532:
 395:srcc/main.c   ****                 mFlashFlag = 1;
 2677              		.loc 1 395 0
 2678 0a22 0822     		movs	r2, #8
 2679 0a24 2C49     		ldr	r1, .L109+44
 2680 0a26 2B48     		ldr	r0, .L109+40
 2681 0a28 FFF7FEFF 		bl	ArrayCopy
 2682              	.LVL290:
 398:srcc/main.c   ****             }
 2683              		.loc 1 398 0
 2684 0a2c 0722     		movs	r2, #7
 2685 0a2e 2B49     		ldr	r1, .L109+48
 2686 0a30 3220     		movs	r0, #50
 2687 0a32 08AB     		add	r3, sp, #32
 2688 0a34 9C46     		mov	ip, r3
 2689 0a36 6044     		add	r0, r0, ip
 2690 0a38 FFF7FEFF 		bl	ArrayCopy
 2691              	.LVL291:
 397:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 2692              		.loc 1 397 0
 2693 0a3c 0923     		movs	r3, #9
 2694 0a3e 0393     		str	r3, [sp, #12]
 396:srcc/main.c   ****                 mSendLen = 9;
 2695              		.loc 1 396 0
 2696 0a40 0124     		movs	r4, #1
 398:srcc/main.c   ****             }
 2697              		.loc 1 398 0
 2698 0a42 CDE6     		b	.L54
 2699              	.LVL292:
 2700              	.L102:
 374:srcc/main.c   ****                 mFlashFlag = 1;
 2701              		.loc 1 374 0
 2702 0a44 AD22     		movs	r2, #173
 2703 0a46 2449     		ldr	r1, .L109+44
 2704 0a48 1848     		ldr	r0, .L109
 2705 0a4a FFF7FEFF 		bl	ArrayCopy
 2706              	.LVL293:
 377:srcc/main.c   ****             }
 2707              		.loc 1 377 0
 2708 0a4e 0722     		movs	r2, #7
 2709 0a50 2249     		ldr	r1, .L109+48
 2710 0a52 3220     		movs	r0, #50
 2711 0a54 08AB     		add	r3, sp, #32
 2712 0a56 9C46     		mov	ip, r3
 2713 0a58 6044     		add	r0, r0, ip
 2714 0a5a FFF7FEFF 		bl	ArrayCopy
 2715              	.LVL294:
 376:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 2716              		.loc 1 376 0
 2717 0a5e 0923     		movs	r3, #9
 2718 0a60 0393     		str	r3, [sp, #12]
 375:srcc/main.c   ****                 mSendLen = 9;
 2719              		.loc 1 375 0
 2720 0a62 0124     		movs	r4, #1
 377:srcc/main.c   ****             }
 2721              		.loc 1 377 0
 2722 0a64 BCE6     		b	.L54
 2723              	.LVL295:
 2724              	.L103:
 381:srcc/main.c   ****                 mFlashFlag = 1;
 2725              		.loc 1 381 0
 2726 0a66 7C22     		movs	r2, #124
 2727 0a68 1B49     		ldr	r1, .L109+44
 2728 0a6a 1048     		ldr	r0, .L109
 2729 0a6c FFF7FEFF 		bl	ArrayCopy
 2730              	.LVL296:
 384:srcc/main.c   ****             }
 2731              		.loc 1 384 0
 2732 0a70 0722     		movs	r2, #7
 2733 0a72 1A49     		ldr	r1, .L109+48
 2734 0a74 3220     		movs	r0, #50
 2735 0a76 08AB     		add	r3, sp, #32
 2736 0a78 9C46     		mov	ip, r3
 2737 0a7a 6044     		add	r0, r0, ip
 2738 0a7c FFF7FEFF 		bl	ArrayCopy
 2739              	.LVL297:
 383:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 2740              		.loc 1 383 0
 2741 0a80 0923     		movs	r3, #9
 2742 0a82 0393     		str	r3, [sp, #12]
 382:srcc/main.c   ****                 mSendLen = 9;
 2743              		.loc 1 382 0
 2744 0a84 0124     		movs	r4, #1
 384:srcc/main.c   ****             }
 2745              		.loc 1 384 0
 2746 0a86 ABE6     		b	.L54
 2747              	.LVL298:
 2748              	.L104:
 388:srcc/main.c   ****                 mFlashFlag = 1;
 2749              		.loc 1 388 0
 2750 0a88 1E22     		movs	r2, #30
 2751 0a8a 1349     		ldr	r1, .L109+44
 2752 0a8c 1048     		ldr	r0, .L109+36
 2753 0a8e FFF7FEFF 		bl	ArrayCopy
 2754              	.LVL299:
 391:srcc/main.c   ****             }
 2755              		.loc 1 391 0
 2756 0a92 0722     		movs	r2, #7
 2757 0a94 1149     		ldr	r1, .L109+48
 2758 0a96 3220     		movs	r0, #50
 2759 0a98 08AB     		add	r3, sp, #32
 2760 0a9a 9C46     		mov	ip, r3
 2761 0a9c 6044     		add	r0, r0, ip
 2762 0a9e FFF7FEFF 		bl	ArrayCopy
 2763              	.LVL300:
 390:srcc/main.c   ****                 ArrayCopy(mSendData+2,"success",mSendLen-2);
 2764              		.loc 1 390 0
 2765 0aa2 0923     		movs	r3, #9
 2766 0aa4 0393     		str	r3, [sp, #12]
 389:srcc/main.c   ****                 mSendLen = 9;
 2767              		.loc 1 389 0
 2768 0aa6 0124     		movs	r4, #1
 391:srcc/main.c   ****             }
 2769              		.loc 1 391 0
 2770 0aa8 9AE6     		b	.L54
 2771              	.L110:
 2772 0aaa C046     		.align	2
 2773              	.L109:
 2774 0aac 00000000 		.word	gFlashData
 2775 0ab0 00000000 		.word	bios_fun_point
 2776 0ab4 00000000 		.word	gRecvLength
 2777 0ab8 CC010000 		.word	.LC107
 2778 0abc 30840000 		.word	33840
 2779 0ac0 00000000 		.word	gUserData
 2780 0ac4 00000000 		.word	gRecvBuf
 2781 0ac8 8C020000 		.word	.LC120
 2782 0acc AB000000 		.word	gFlashData+171
 2783 0ad0 8F000000 		.word	gFlashData+143
 2784 0ad4 A3000000 		.word	gFlashData+163
 2785 0ad8 02000000 		.word	gRecvBuf+2
 2786 0adc AC020000 		.word	.LC124
 2787              	.LVL301:
 2788              	.L101:
 402:srcc/main.c   ****                 if(gRecvLength == mUserLen)       //若为整帧数据
 2789              		.loc 1 402 0
 2790 0ae0 0222     		movs	r2, #2
 2791 0ae2 FFA9     		add	r1, sp, #1020
 2792 0ae4 3C31     		adds	r1, r1, #60
 2793 0ae6 5F48     		ldr	r0, .L111
 2794 0ae8 FFF7FEFF 		bl	ArrayCopy
 2795              	.LVL302:
 403:srcc/main.c   ****                 {
 2796              		.loc 1 403 0
 2797 0aec 1823     		movs	r3, #24
 2798 0aee FF33     		adds	r3, r3, #255
 2799 0af0 5D4A     		ldr	r2, .L111+4
 2800 0af2 1288     		ldrh	r2, [r2]
 428:srcc/main.c   ****             }
 2801              		.loc 1 428 0
 2802 0af4 0121     		movs	r1, #1
 2803 0af6 8846     		mov	r8, r1
 2804              	.LVL303:
 403:srcc/main.c   ****                 {
 2805              		.loc 1 403 0
 2806 0af8 9A42     		cmp	r2, r3
 2807 0afa 00D0     		beq	.LCB2661
 2808 0afc 29E6     		b	.L57	@long jump
 2809              	.LCB2661:
 405:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipName,gUserData.equipName,30);
 2810              		.loc 1 405 0
 2811 0afe 1822     		movs	r2, #24
 2812 0b00 5A4C     		ldr	r4, .L111+8
 2813 0b02 FF32     		adds	r2, r2, #255
 2814 0b04 5A49     		ldr	r1, .L111+12
 2815 0b06 2000     		movs	r0, r4
 2816 0b08 FFF7FEFF 		bl	ArrayCopy
 2817              	.LVL304:
 406:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipID,gUserData.equipID,20);
 2818              		.loc 1 406 0
 2819 0b0c 2100     		movs	r1, r4
 2820 0b0e 4F31     		adds	r1, r1, #79
 2821 0b10 584E     		ldr	r6, .L111+16
 2822 0b12 1E22     		movs	r2, #30
 2823 0b14 3000     		movs	r0, r6
 2824 0b16 FFF7FEFF 		bl	ArrayCopy
 2825              	.LVL305:
 407:srcc/main.c   ****                 	ArrayCopy(gFlashData.equipType,gUserData.equipType,20);
 2826              		.loc 1 407 0
 2827 0b1a 2100     		movs	r1, r4
 2828 0b1c 6D31     		adds	r1, r1, #109
 2829 0b1e 3000     		movs	r0, r6
 2830 0b20 1E30     		adds	r0, r0, #30
 2831 0b22 1422     		movs	r2, #20
 2832 0b24 FFF7FEFF 		bl	ArrayCopy
 2833              	.LVL306:
 408:srcc/main.c   ****                 	ArrayCopy(gFlashData.vendor,gUserData.vendor,30);
 2834              		.loc 1 408 0
 2835 0b28 2100     		movs	r1, r4
 2836 0b2a 8131     		adds	r1, r1, #129
 2837 0b2c 3000     		movs	r0, r6
 2838 0b2e 3230     		adds	r0, r0, #50
 2839 0b30 1422     		movs	r2, #20
 2840 0b32 FFF7FEFF 		bl	ArrayCopy
 2841              	.LVL307:
 409:srcc/main.c   ****                     //[2018.8.18] 发送的软件版本取BIOS
 2842              		.loc 1 409 0
 2843 0b36 2100     		movs	r1, r4
 2844 0b38 9531     		adds	r1, r1, #149
 2845 0b3a 3000     		movs	r0, r6
 2846 0b3c 4630     		adds	r0, r0, #70
 2847 0b3e 1E22     		movs	r2, #30
 2848 0b40 FFF7FEFF 		bl	ArrayCopy
 2849              	.LVL308:
 411:srcc/main.c   ****                     ArrayCopy(gUserData.softVer,mString,4);
 2850              		.loc 1 411 0
 2851 0b44 4C4F     		ldr	r7, .L111+20
 2852 0b46 3B68     		ldr	r3, [r7]
 2853 0b48 1B69     		ldr	r3, [r3, #16]
 2854 0b4a FFA8     		add	r0, sp, #1020
 2855 0b4c 4030     		adds	r0, r0, #64
 2856 0b4e 9847     		blx	r3
 2857              	.LVL309:
 412:srcc/main.c   ****                     sysTimeSet(gUserData.currentTime);
 2858              		.loc 1 412 0
 2859 0b50 2000     		movs	r0, r4
 2860 0b52 4B30     		adds	r0, r0, #75
 2861 0b54 0422     		movs	r2, #4
 2862 0b56 FFA9     		add	r1, sp, #1020
 2863 0b58 4031     		adds	r1, r1, #64
 2864 0b5a FFF7FEFF 		bl	ArrayCopy
 2865              	.LVL310:
 413:srcc/main.c   ****                     ArrayCopy(gFlashData.userName,gUserData.userName,20);
 2866              		.loc 1 413 0
 2867 0b5e 2723     		movs	r3, #39
 2868 0b60 E05C     		ldrb	r0, [r4, r3]
 2869 0b62 0133     		adds	r3, r3, #1
 2870 0b64 E35C     		ldrb	r3, [r4, r3]
 2871 0b66 1B02     		lsls	r3, r3, #8
 2872 0b68 0343     		orrs	r3, r0
 2873 0b6a 2922     		movs	r2, #41
 2874 0b6c A05C     		ldrb	r0, [r4, r2]
 2875 0b6e 0004     		lsls	r0, r0, #16
 2876 0b70 0343     		orrs	r3, r0
 2877 0b72 0132     		adds	r2, r2, #1
 2878 0b74 A05C     		ldrb	r0, [r4, r2]
 2879 0b76 0006     		lsls	r0, r0, #24
 2880 0b78 1843     		orrs	r0, r3
 2881 0b7a 2B23     		movs	r3, #43
 2882 0b7c E15C     		ldrb	r1, [r4, r3]
 2883 0b7e 0133     		adds	r3, r3, #1
 2884 0b80 E35C     		ldrb	r3, [r4, r3]
 2885 0b82 1B02     		lsls	r3, r3, #8
 2886 0b84 0B43     		orrs	r3, r1
 2887 0b86 0332     		adds	r2, r2, #3
 2888 0b88 A15C     		ldrb	r1, [r4, r2]
 2889 0b8a 0904     		lsls	r1, r1, #16
 2890 0b8c 0B43     		orrs	r3, r1
 2891 0b8e 0132     		adds	r2, r2, #1
 2892 0b90 A15C     		ldrb	r1, [r4, r2]
 2893 0b92 0906     		lsls	r1, r1, #24
 2894 0b94 1943     		orrs	r1, r3
 2895 0b96 3B68     		ldr	r3, [r7]
 2896 0b98 9B68     		ldr	r3, [r3, #8]
 2897 0b9a 9847     		blx	r3
 2898              	.LVL311:
 414:srcc/main.c   ****                     ArrayCopy(gFlashData.phone,gUserData.phone,11);
 2899              		.loc 1 414 0
 2900 0b9c 2100     		movs	r1, r4
 2901 0b9e 3731     		adds	r1, r1, #55
 2902 0ba0 3000     		movs	r0, r6
 2903 0ba2 7030     		adds	r0, r0, #112
 2904 0ba4 1422     		movs	r2, #20
 2905 0ba6 FFF7FEFF 		bl	ArrayCopy
 2906              	.LVL312:
 415:srcc/main.c   ****                     ArrayCopy(gFlashData.serverIP,gUserData.serverIP,15);
 2907              		.loc 1 415 0
 2908 0baa 2100     		movs	r1, r4
 2909 0bac CB31     		adds	r1, r1, #203
 2910 0bae 3000     		movs	r0, r6
 2911 0bb0 8430     		adds	r0, r0, #132
 2912 0bb2 0B22     		movs	r2, #11
 2913 0bb4 FFF7FEFF 		bl	ArrayCopy
 2914              	.LVL313:
 416:srcc/main.c   ****                     ArrayCopy(gFlashData.serverPort,gUserData.serverPort,5);
 2915              		.loc 1 416 0
 2916 0bb8 2100     		movs	r1, r4
 2917 0bba 1331     		adds	r1, r1, #19
 2918 0bbc 3000     		movs	r0, r6
 2919 0bbe 8F30     		adds	r0, r0, #143
 2920 0bc0 0F22     		movs	r2, #15
 2921 0bc2 FFF7FEFF 		bl	ArrayCopy
 2922              	.LVL314:
 417:srcc/main.c   ****                     gFlashData.sendFrequencySec = gUserData.sendFrequencySec;
 2923              		.loc 1 417 0
 2924 0bc6 2100     		movs	r1, r4
 2925 0bc8 2231     		adds	r1, r1, #34
 2926 0bca 3000     		movs	r0, r6
 2927 0bcc 9E30     		adds	r0, r0, #158
 2928 0bce 0522     		movs	r2, #5
 2929 0bd0 FFF7FEFF 		bl	ArrayCopy
 2930              	.LVL315:
 418:srcc/main.c   ****                     gFlashData.resetCount = gUserData.resetCount;
 2931              		.loc 1 418 0
 2932 0bd4 3323     		movs	r3, #51
 2933 0bd6 E35C     		ldrb	r3, [r4, r3]
 2934 0bd8 3422     		movs	r2, #52
 2935 0bda A25C     		ldrb	r2, [r4, r2]
 2936 0bdc 1202     		lsls	r2, r2, #8
 2937 0bde 1A43     		orrs	r2, r3
 2938 0be0 3523     		movs	r3, #53
 2939 0be2 E35C     		ldrb	r3, [r4, r3]
 2940 0be4 1B04     		lsls	r3, r3, #16
 2941 0be6 1A43     		orrs	r2, r3
 2942 0be8 3623     		movs	r3, #54
 2943 0bea E35C     		ldrb	r3, [r4, r3]
 2944 0bec 1B06     		lsls	r3, r3, #24
 2945 0bee 1343     		orrs	r3, r2
 2946 0bf0 A322     		movs	r2, #163
 2947 0bf2 B354     		strb	r3, [r6, r2]
 2948 0bf4 190A     		lsrs	r1, r3, #8
 2949 0bf6 3200     		movs	r2, r6
 2950 0bf8 A332     		adds	r2, r2, #163
 2951 0bfa 5170     		strb	r1, [r2, #1]
 2952 0bfc 190C     		lsrs	r1, r3, #16
 2953 0bfe 9170     		strb	r1, [r2, #2]
 2954 0c00 1B0E     		lsrs	r3, r3, #24
 2955 0c02 D370     		strb	r3, [r2, #3]
 419:srcc/main.c   ****                     ArrayCopy(gFlashData.frameCmd,gUserData.cmd,2);
 2956              		.loc 1 419 0
 2957 0c04 2F23     		movs	r3, #47
 2958 0c06 E35C     		ldrb	r3, [r4, r3]
 2959 0c08 3022     		movs	r2, #48
 2960 0c0a A25C     		ldrb	r2, [r4, r2]
 2961 0c0c 1202     		lsls	r2, r2, #8
 2962 0c0e 1A43     		orrs	r2, r3
 2963 0c10 3123     		movs	r3, #49
 2964 0c12 E35C     		ldrb	r3, [r4, r3]
 2965 0c14 1B04     		lsls	r3, r3, #16
 2966 0c16 1A43     		orrs	r2, r3
 2967 0c18 3223     		movs	r3, #50
 2968 0c1a E35C     		ldrb	r3, [r4, r3]
 2969 0c1c 1B06     		lsls	r3, r3, #24
 2970 0c1e 1343     		orrs	r3, r2
 2971 0c20 A722     		movs	r2, #167
 2972 0c22 B354     		strb	r3, [r6, r2]
 2973 0c24 1A0A     		lsrs	r2, r3, #8
 2974 0c26 3100     		movs	r1, r6
 2975 0c28 A731     		adds	r1, r1, #167
 2976 0c2a 4A70     		strb	r2, [r1, #1]
 2977 0c2c 1A02     		lsls	r2, r3, #8
 2978 0c2e 120E     		lsrs	r2, r2, #24
 2979 0c30 8A70     		strb	r2, [r1, #2]
 2980 0c32 1B0E     		lsrs	r3, r3, #24
 2981 0c34 CB70     		strb	r3, [r1, #3]
 420:srcc/main.c   ****                     mLCDFlag==1;
 2982              		.loc 1 420 0
 2983 0c36 3000     		movs	r0, r6
 2984 0c38 AB30     		adds	r0, r0, #171
 2985 0c3a 0222     		movs	r2, #2
 2986 0c3c 2100     		movs	r1, r4
 2987 0c3e FFF7FEFF 		bl	ArrayCopy
 2988              	.LVL316:
 422:srcc/main.c   ****                 }
 2989              		.loc 1 422 0
 2990 0c42 0124     		movs	r4, #1
 2991 0c44 85E5     		b	.L57
 2992              	.LVL317:
 2993              	.L97:
 455:srcc/main.c   ****             else if(mflag == 0xff)
 2994              		.loc 1 455 0
 2995 0c46 9621     		movs	r1, #150
 2996 0c48 0C4B     		ldr	r3, .L111+24
 2997 0c4a 0093     		str	r3, [sp]
 2998 0c4c 0C4B     		ldr	r3, .L111+28
 2999 0c4e 1F22     		movs	r2, #31
 3000 0c50 4900     		lsls	r1, r1, #1
 3001 0c52 0620     		movs	r0, #6
 3002              	.LVL318:
 3003 0c54 FFF7FEFF 		bl	LCD_ShowString
 3004              	.LVL319:
 3005 0c58 DBE5     		b	.L65
 3006              	.LVL320:
 3007              	.L67:
 468:srcc/main.c   ****              {
 3008              		.loc 1 468 0
 3009 0c5a 4346     		mov	r3, r8
 3010 0c5c 012B     		cmp	r3, #1
 3011 0c5e 00D0     		beq	.LCB2865
 3012 0c60 10E6     		b	.L51	@long jump
 3013              	.LCB2865:
 3014 0c62 E5E5     		b	.L68
 3015              	.L112:
 3016              		.align	2
 3017              	.L111:
 3018 0c64 AB000000 		.word	gFlashData+171
 3019 0c68 00000000 		.word	gRecvLength
 3020 0c6c 00000000 		.word	gUserData
 3021 0c70 00000000 		.word	gRecvBuf
 3022 0c74 00000000 		.word	gFlashData
 3023 0c78 00000000 		.word	bios_fun_point
 3024 0c7c B4020000 		.word	.LC146
 3025 0c80 30840000 		.word	33840
 3026              		.cfi_endproc
 3027              	.LFE38:
 3029              		.comm	flag,1,1
 3030              		.global	flashInit
 3031              		.comm	gRecvLength,2,2
 3032              		.comm	gRecvBuf,1024,4
 3033              		.comm	gTimeString,20,4
 3034              		.comm	gTimeSec,8,8
 3035              		.comm	gFlashData,173,4
 3036              		.comm	gUserData,279,4
 3037              		.comm	bios_fun_point,4,4
 3038              		.section	.MacConfig,"a",%progbits
 3039              		.align	2
 3042              	flashInit:
 3043 0000 205BBDF0 		.ascii	" [\275\360\272\371\302\253\316\357\301\252\315\370]"
 3043      BAF9C2AB 
 3043      CEEFC1AA 
 3043      CDF85D
 3044 000f 20BAF9C2 		.ascii	" \272\371\302\253\304\243\260\345  \000"
 3044      ABC4A3B0 
 3044      E5202000 
 3045 001b 000000   		.space	3
 3046 001e 32313530 		.ascii	"215000-000000-00001 "
 3046      30302D30 
 3046      30303030 
 3046      302D3030 
 3046      30303120 
 3047 0032 41484C2D 		.ascii	"AHL-IoT-GEC   \000"
 3047      496F542D 
 3047      47454320 
 3047      202000
 3048 0041 00000000 		.space	5
 3048      00
 3049 0046 2020BDF0 		.ascii	"  \275\360\272\371\302\253\316\357\301\252\315\370\323"
 3049      BAF9C2AB 
 3049      CEEFC1AA 
 3049      CDF8D3
 3050 0055 D0CFDED4 		.ascii	"\320\317\336\324\360\310\316\326\306\271\253\313\276"
 3050      F0C8CED6 
 3050      C6B9ABCB 
 3050      BE
 3051 0062 2020     		.ascii	"  "
 3052 0064 412E3530 		.ascii	"A.50"
 3053 0068 003D2A5C 		.word	1546272000
 3054 006c 00000000 		.word	0
 3055 0070 CBD5D6DD 		.ascii	"\313\325\326\335\264\363\321\247\310\355\274\376\277"
 3055      B4F3D1A7 
 3055      C8EDBCFE 
 3055      BF
 3056 007d AAB7A2C8 		.ascii	"\252\267\242\310\313\324\261"
 3056      CBD4B1
 3057 0084 31333030 		.ascii	"13000000000"
 3057      30303030 
 3057      303030
 3058 008f 3131362E 		.ascii	"116.62.63.164\000"
 3058      36322E36 
 3058      332E3136 
 3058      3400
 3059 009d 00       		.space	1
 3060 009e 32363132 		.ascii	"26123"
 3060      33
 3061 00a3 58020000 		.4byte	600
 3062 00a7 00000000 		.4byte	0
 3063 00ab 5530     		.ascii	"U0"
 3064              		.section	.bss.sn.6238,"aw",%nobits
 3065              		.align	2
 3066              		.set	.LANCHOR0,. + 0
 3069              	sn.6238:
 3070 0000 00000000 		.space	4
 3071              		.section	.rodata.LCD_Showfirst.str1.4,"aMS",%progbits,1
 3072              		.align	2
 3073              	.LC17:
 3074 0000 BDF0BAF9 		.ascii	"\275\360\272\371\302\253IoT-GEC\000"
 3074      C2AB496F 
 3074      542D4745 
 3074      4300
 3075 000e 0000     		.space	2
 3076              	.LC19:
 3077 0010 5B547970 		.ascii	"[Type]                     \000"
 3077      655D2020 
 3077      20202020 
 3077      20202020 
 3077      20202020 
 3078              	.LC22:
 3079 002c 5B42494F 		.ascii	"[BIOS_VER]                  \000"
 3079      535F5645 
 3079      525D2020 
 3079      20202020 
 3079      20202020 
 3080 0049 000000   		.space	3
 3081              	.LC24:
 3082 004c 5B555345 		.ascii	"[USER_VER]    \000"
 3082      525F5645 
 3082      525D2020 
 3082      202000
 3083 005b 00       		.space	1
 3084              	.LC27:
 3085 005c 5B494D53 		.ascii	"[IMSI]                      \000"
 3085      495D2020 
 3085      20202020 
 3085      20202020 
 3085      20202020 
 3086 0079 000000   		.space	3
 3087              	.LC29:
 3088 007c 5B4D4355 		.ascii	"[MCU_temperature]           \000"
 3088      5F74656D 
 3088      70657261 
 3088      74757265 
 3088      5D202020 
 3089 0099 000000   		.space	3
 3090              	.LC31:
 3091 009c 5B4C4253 		.ascii	"[LBS]                      \000"
 3091      5D202020 
 3091      20202020 
 3091      20202020 
 3091      20202020 
 3092              	.LC33:
 3093 00b8 5B536967 		.ascii	"[Signal strength(%)]       \000"
 3093      6E616C20 
 3093      73747265 
 3093      6E677468 
 3093      2825295D 
 3094              	.LC35:
 3095 00d4 5B49503A 		.ascii	"[IP:PT]                    \000"
 3095      50545D20 
 3095      20202020 
 3095      20202020 
 3095      20202020 
 3096              	.LC38:
 3097 00f0 3A00     		.ascii	":\000"
 3098 00f2 0000     		.space	2
 3099              	.LC41:
 3100 00f4 5453493A 		.ascii	"TSI:       Freq(s):        \000"
 3100      20202020 
 3100      20202046 
 3100      72657128 
 3100      73293A20 
 3101              	.LC43:
 3102 0110 20202020 		.ascii	"      \000"
 3102      202000
 3103 0117 00       		.space	1
 3104              	.LC46:
 3105 0118 3000     		.ascii	"0\000"
 3106 011a 0000     		.space	2
 3107              	.LC48:
 3108 011c 54696D65 		.ascii	"Time:                      \000"
 3108      3A202020 
 3108      20202020 
 3108      20202020 
 3108      20202020 
 3109              	.LC50:
 3110 0138 32303138 		.ascii	"2018-07-01 21:55:00\000"
 3110      2D30372D 
 3110      30312032 
 3110      313A3535 
 3110      3A303000 
 3111              	.LC52:
 3112 014c 52657365 		.ascii	"Reserved area,you can use it\000"
 3112      72766564 
 3112      20617265 
 3112      612C796F 
 3112      75206361 
 3113 0169 000000   		.space	3
 3114              	.LC54:
 3115 016c 52656376 		.ascii	"RecvCount:                 \000"
 3115      436F756E 
 3115      743A2020 
 3115      20202020 
 3115      20202020 
 3116              	.LC56:
 3117 0188 52756E20 		.ascii	"Run State:                 \000"
 3117      53746174 
 3117      653A2020 
 3117      20202020 
 3117      20202020 
 3118              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3119              		.align	2
 3120              	.LC64:
 3121 0000 41484C20 		.ascii	"AHL Init                    \000"
 3121      496E6974 
 3121      20202020 
 3121      20202020 
 3121      20202020 
 3122 001d 000000   		.space	3
 3123              	.LC66:
 3124 0020 41484C20 		.ascii	"AHL Init .                  \000"
 3124      496E6974 
 3124      202E2020 
 3124      20202020 
 3124      20202020 
 3125 003d 000000   		.space	3
 3126              	.LC68:
 3127 0040 41484C20 		.ascii	"AHL Init ..                 \000"
 3127      496E6974 
 3127      202E2E20 
 3127      20202020 
 3127      20202020 
 3128 005d 000000   		.space	3
 3129              	.LC70:
 3130 0060 41484C20 		.ascii	"AHL Init .. AT Error        \000"
 3130      496E6974 
 3130      202E2E20 
 3130      41542045 
 3130      72726F72 
 3131 007d 000000   		.space	3
 3132              	.LC72:
 3133 0080 41484C20 		.ascii	"AHL Init .. sim Error       \000"
 3133      496E6974 
 3133      202E2E20 
 3133      73696D20 
 3133      4572726F 
 3134 009d 000000   		.space	3
 3135              	.LC74:
 3136 00a0 41484C20 		.ascii	"AHL Init ...                \000"
 3136      496E6974 
 3136      202E2E2E 
 3136      20202020 
 3136      20202020 
 3137 00bd 000000   		.space	3
 3138              	.LC76:
 3139 00c0 41484C20 		.ascii	"AHL Init ...link base Error \000"
 3139      496E6974 
 3139      202E2E2E 
 3139      6C696E6B 
 3139      20626173 
 3140 00dd 000000   		.space	3
 3141              	.LC78:
 3142 00e0 41484C20 		.ascii	"AHL Init ....               \000"
 3142      496E6974 
 3142      202E2E2E 
 3142      2E202020 
 3142      20202020 
 3143 00fd 000000   		.space	3
 3144              	.LC82:
 3145 0100 41484C2E 		.ascii	"AHL....Link CS-Monitor Error\000"
 3145      2E2E2E4C 
 3145      696E6B20 
 3145      43532D4D 
 3145      6F6E6974 
 3146 011d 000000   		.space	3
 3147              	.LC84:
 3148 0120 41484C20 		.ascii	"AHL Init ..... Successfully \000"
 3148      496E6974 
 3148      202E2E2E 
 3148      2E2E2053 
 3148      75636365 
 3149 013d 000000   		.space	3
 3150              	.LC87:
 3151 0140 20200A00 		.ascii	"  \012\000"
 3152              	.LC97:
 3153 0144 20202020 		.ascii	"     \000"
 3153      2000
 3154 014a 0000     		.space	2
 3155              	.LC99:
 3156 014c 41484C20 		.ascii	"AHL Send .                  \000"
 3156      53656E64 
 3156      202E2020 
 3156      20202020 
 3156      20202020 
 3157 0169 000000   		.space	3
 3158              	.LC101:
 3159 016c 41484C20 		.ascii	"AHL Send ..                 \000"
 3159      53656E64 
 3159      202E2E20 
 3159      20202020 
 3159      20202020 
 3160 0189 000000   		.space	3
 3161              	.LC103:
 3162 018c 41484C20 		.ascii	"AHL Send Successfully       \000"
 3162      53656E64 
 3162      20537563 
 3162      63657373 
 3162      66756C6C 
 3163 01a9 000000   		.space	3
 3164              	.LC105:
 3165 01ac 53656E64 		.ascii	"Send Error:Send Not Start   \000"
 3165      20457272 
 3165      6F723A53 
 3165      656E6420 
 3165      4E6F7420 
 3166 01c9 000000   		.space	3
 3167              	.LC107:
 3168 01cc 53656E64 		.ascii	"Send Error:Send Data Not OK \000"
 3168      20457272 
 3168      6F723A53 
 3168      656E6420 
 3168      44617461 
 3169 01e9 000000   		.space	3
 3170              	.LC109:
 3171 01ec 41484C20 		.ascii	"AHL Reinit .                \000"
 3171      5265696E 
 3171      6974202E 
 3171      20202020 
 3171      20202020 
 3172 0209 000000   		.space	3
 3173              	.LC111:
 3174 020c 41484C20 		.ascii	"AHL Reinit ..               \000"
 3174      5265696E 
 3174      6974202E 
 3174      2E202020 
 3174      20202020 
 3175 0229 000000   		.space	3
 3176              	.LC113:
 3177 022c 41484C20 		.ascii	"AHL Reinit ...               \000"
 3177      5265696E 
 3177      6974202E 
 3177      2E2E2020 
 3177      20202020 
 3178 024a 0000     		.space	2
 3179              	.LC115:
 3180 024c 41484C20 		.ascii	"AHL Reinit .... Fail        \000"
 3180      5265696E 
 3180      6974202E 
 3180      2E2E2E20 
 3180      4661696C 
 3181 0269 000000   		.space	3
 3182              	.LC117:
 3183 026c 41484C20 		.ascii	"AHL Reinit .... Success     \000"
 3183      5265696E 
 3183      6974202E 
 3183      2E2E2E20 
 3183      53756363 
 3184 0289 000000   		.space	3
 3185              	.LC120:
 3186 028c 41484C20 		.ascii	"AHL Recv one frame          \000"
 3186      52656376 
 3186      206F6E65 
 3186      20667261 
 3186      6D652020 
 3187 02a9 000000   		.space	3
 3188              	.LC124:
 3189 02ac 73756363 		.ascii	"success\000"
 3189      65737300 
 3190              	.LC146:
 3191 02b4 41484C20 		.ascii	"AHL Reply Successfully      \000"
 3191      5265706C 
 3191      79205375 
 3191      63636573 
 3191      7366756C 
 3192 02d1 000000   		.space	3
 3193              	.LC148:
 3194 02d4 41484C20 		.ascii	"AHL Recv Successfully       \000"
 3194      52656376 
 3194      20537563 
 3194      63657373 
 3194      66756C6C 
 3195              		.section	.rodata.userData_init.str1.4,"aMS",%progbits,1
 3196              		.align	2
 3197              	.LC0:
 3198 0000 553000   		.ascii	"U0\000"
 3199              		.text
 3200              	.Letext0:
 3201              		.file 3 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\machine\\_default_types.h"
 3202              		.file 4 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\_stdint.h"
 3203              		.file 5 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3204              		.file 6 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3205              		.file 7 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3206              		.file 8 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3207              		.file 9 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\lock.h"
 3208              		.file 10 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\_types.h"
 3209              		.file 11 "d:\\arm-aupulu\\bin\\armcompilefile\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h"
 3210              		.file 12 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\reent.h"
 3211              		.file 13 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3212              		.file 14 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3213              		.file 15 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3214              		.file 16 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3215              		.file 17 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3216              		.file 18 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3217              		.file 19 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3218              		.file 20 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3219              		.file 21 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3220              		.file 22 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3221              		.file 23 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:16     .text.userData_init:00000000 $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:23     .text.userData_init:00000000 userData_init
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:250    .text.userData_init:00000178 $d
                            *COM*:000000ad gFlashData
                            *COM*:00000004 bios_fun_point
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:262    .text.userData_get:00000000 $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:269    .text.userData_get:00000000 userData_get
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:518    .text.userData_get:0000016c $d
                            *COM*:00000001 flag
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:534    .text.LCD_Showfirst:00000000 $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:541    .text.LCD_Showfirst:00000000 LCD_Showfirst
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:967    .text.LCD_Showfirst:000002d0 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:1001   .text.main:00000000 $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:1008   .text.main:00000000 main
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:1680   .text.main:000003ac $d
                            *COM*:00000008 gTimeSec
                            *COM*:00000002 gRecvLength
                            *COM*:00000117 gUserData
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:1707   .text.main:0000040c $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:2252   .text.main:00000770 $d
                            *COM*:00000014 gTimeString
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:2278   .text.main:000007cc $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:2774   .text.main:00000aac $d
                            *COM*:00000400 gRecvBuf
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:2790   .text.main:00000ae0 $t
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3018   .text.main:00000c64 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3042   .MacConfig:00000000 flashInit
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3039   .MacConfig:00000000 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3065   .bss.sn.6238:00000000 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3069   .bss.sn.6238:00000000 sn.6238
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3072   .rodata.LCD_Showfirst.str1.4:00000000 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3119   .rodata.main.str1.4:00000000 $d
C:\Users\WYH\AppData\Local\Temp\cc2LpPDf.s:3196   .rodata.userData_init.str1.4:00000000 $d
                           .group:00000000 wm4.0.6b3c261c075bbc2e3a26f120e5522d74
                           .group:00000000 wm4.common.h.8.6facd6346498fe3b182946a20345c657
                           .group:00000000 wm4.MKL36Z4.h.89.233797f6f4773763e2e98c6b40e4b5ad
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.cf97d4c9a045ebab6d282f6356e11363
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.MKL36Z4.h.102.9aa70adc1bfde53db48a5cdc9c11b855
                           .group:00000000 wm4.core_cm0plus.h.43.8d0a7c3b62d57d3de08e0cf260e796f5
                           .group:00000000 wm4.core_cmInstr.h.39.440aa208ad4c1679c5765c09acc09994
                           .group:00000000 wm4.core_cm0plus.h.160.b16144213bf005ce96482cc39658f3eb
                           .group:00000000 wm4.MKL36Z4.h.268.27ad2c3218b31878c72d973b76832d3c
                           .group:00000000 wm4.mcu.h.18.69f4b5b87d8a116f794509cd91218d13
                           .group:00000000 wm4.svc.h.9.5456cf514b156c422bc4546fad33f63e
                           .group:00000000 wm4.common.h.16.7db62d7e34981cef069189d29572a8d0
                           .group:00000000 wm4.newlib.h.8.e0fd068ed40a600f7426443f865dd469
                           .group:00000000 wm4.ieeefp.h.77.49bcce8a603f3d93a95080d6a3573782
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.7120b8bb2e0149e2359704f4e2251b68
                           .group:00000000 wm4.reent.h.17.87376802c2b370b32a762f0a30482d9e
                           .group:00000000 wm4.cdefs.h.47.b99d69adf76e00132150c6ca209cbd8f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.adc.h.16.46085ea51e91d3cad1570882ff063879
                           .group:00000000 wm4.gpio.h.10.986b0e721a5f8dc53d90b6e6479bc010
                           .group:00000000 wm4.timer.h.9.0c2434e998dc154a3e9828da4a1f6235
                           .group:00000000 wm4.uart.h.10.bff5e701e40630e1d7de2b8037fde34b
                           .group:00000000 wm4.flash.h.10.6c61dd182e565e4eb3a9a8d3876dbdb0
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stdlib.h.56.b4ddaf162082f284ba35b4444af99a9a
                           .group:00000000 wm4.uecom.h.31.34c033455bb0111d79414f629e02f44f
                           .group:00000000 wm4.gec.h.47.b03261d3256f000bba71e6d32e104a70
                           .group:00000000 wm4.printf.h.2.493aaa82044ebe79719bfb3e8ed3fd79
                           .group:00000000 wm4.lcd.h.2.9f31459a7cada666e5dec916ed74d713
                           .group:00000000 wm4.user.h.19.9a5f0b0cf9510e73e5d38fa500f70ec0
                           .group:00000000 wm4.time.h.8.db4619001f026d0b4874c029fef0e91f
                           .group:00000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:00000000 wm4.time.h.25.0e6a0fdbc9955f5707ed54246ed2e089
                           .group:00000000 wm4.time.h.243.a9f48603a5d5dd23632068f19327a890
                           .group:00000000 wm4.includes.h.23.0ee9abd09da1e58b86e4885ecba18e18

UNDEFINED SYMBOLS
ArrayCopy
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_d2iz
adc_init
adc_read
DoubleConvertToStr
LCD_ShowString
__aeabi_ui2d
memset
LCD_DrawSurface
LCD_aotu
IntConvertToStr
__aeabi_uldivmod
__aeabi_uidivmod
BIOS_API_Init
timer_init
tsi_init
LCD_Init
timer_enable_int
tsi_enable_re_int
Delay_ms
timeChange
myprintf
