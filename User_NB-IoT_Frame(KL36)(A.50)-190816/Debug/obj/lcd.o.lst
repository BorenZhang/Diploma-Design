   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.mypow,"ax",%progbits
  16              		.align	1
  17              		.global	mypow
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	mypow:
  24              	.LFB49:
  25              		.file 1 "srcc/lcd.c"
   1:srcc/lcd.c    **** 
   2:srcc/lcd.c    **** #include "lcd.h"
   3:srcc/lcd.c    **** 
   4:srcc/lcd.c    **** uint_32 mypow(uint_8 m,uint_8 n);
   5:srcc/lcd.c    **** void LCD_WR_DATA8(uint_8 da); //发送数据-8位参数
   6:srcc/lcd.c    **** void LCD_WR_DATA(uint_16 da);
   7:srcc/lcd.c    **** void LCD_WR_REG(uint_8 da);
   8:srcc/lcd.c    **** void LCD_WR_REG_DATA(uint_8 reg,uint_16 da);
   9:srcc/lcd.c    **** void Address_set(uint_16 x1,uint_16 y1,uint_16 x2,uint_16 y2);
  10:srcc/lcd.c    **** 
  11:srcc/lcd.c    **** //=====================================================================
  12:srcc/lcd.c    **** //函数名称：Lcd_Init。
  13:srcc/lcd.c    **** //函数返回：无
  14:srcc/lcd.c    **** //参数说明：无
  15:srcc/lcd.c    **** //功能概要：LCD初始化
  16:srcc/lcd.c    **** //修改记录：王宜怀，2018年7月23日，利用常数数组，简化LCD_Init编程
  17:srcc/lcd.c    **** //=====================================================================
  18:srcc/lcd.c    **** const uint_8 cmdA[15]={0x0F,0x20,0x1E,0x09,0x12,0x0B,0x50,0XBA,
  19:srcc/lcd.c    **** 		0x44,0x09,0x14,0x05,0x23,0x21,0x00};
  20:srcc/lcd.c    **** const uint_8 cmdB[15]={0x00,0x19,0x19,0x00,0x12,0x07,0x2D,0x28,
  21:srcc/lcd.c    **** 		0x3F,0x02,0x0A,0x08,0x25,0x2D,0x0F};
  22:srcc/lcd.c    **** const uint_8 cmdC[4]={0x64,0x03,0X12,0X81};
  23:srcc/lcd.c    **** 
  24:srcc/lcd.c    **** void LCD_Init(void)     //LCD初始化
  25:srcc/lcd.c    **** {
  26:srcc/lcd.c    **** 	uint_8 i;
  27:srcc/lcd.c    **** 
  28:srcc/lcd.c    **** 	spi_init(SPIA,1,6000,0,0);
  29:srcc/lcd.c    **** 	gpio_init(LCD_RS,1,0);
  30:srcc/lcd.c    **** 	gpio_init(LCD_DC,1,0);
  31:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,1);
  32:srcc/lcd.c    **** 
  33:srcc/lcd.c    **** 	LCD_WR_REG_DATA(0,0);
  34:srcc/lcd.c    **** 
  35:srcc/lcd.c    **** 	gpio_set(LCD_RS,0);
  36:srcc/lcd.c    **** 	Delay_ms(20);
  37:srcc/lcd.c    **** 	gpio_set(LCD_RS,1);
  38:srcc/lcd.c    **** 	Delay_ms(20);
  39:srcc/lcd.c    **** //==========ILI9341V芯片初始化内容========================
  40:srcc/lcd.c    **** //	//************* Start Initial Sequence **********//
  41:srcc/lcd.c    **** //	LCD_WR_REG(0xCF);   //功耗控制
  42:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);
  43:srcc/lcd.c    **** //	LCD_WR_DATA8(0xD9);
  44:srcc/lcd.c    **** //	LCD_WR_DATA8(0X30);
  45:srcc/lcd.c    **** //
  46:srcc/lcd.c    **** //	LCD_WR_REG(0xED);  //电源序列控制
  47:srcc/lcd.c    **** //	for (i=0;i<4;i++) LCD_WR_DATA8(cmdC[i]);
  48:srcc/lcd.c    **** //
  49:srcc/lcd.c    **** //	LCD_WR_REG(0xE8);  //驱动时序控制A
  50:srcc/lcd.c    **** //	LCD_WR_DATA8(0x85);
  51:srcc/lcd.c    **** //	LCD_WR_DATA8(0x10);
  52:srcc/lcd.c    **** //	LCD_WR_DATA8(0x78);
  53:srcc/lcd.c    **** //
  54:srcc/lcd.c    **** //	LCD_WR_REG(0xCB);   //功耗控制A
  55:srcc/lcd.c    **** //	LCD_WR_DATA8(0x39);
  56:srcc/lcd.c    **** //	LCD_WR_DATA8(0x2C);
  57:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);
  58:srcc/lcd.c    **** //	LCD_WR_DATA8(0x34);
  59:srcc/lcd.c    **** //	LCD_WR_DATA8(0x02);
  60:srcc/lcd.c    **** //
  61:srcc/lcd.c    **** //	LCD_WR_REG(0xF7);   //泵比控制
  62:srcc/lcd.c    **** //	LCD_WR_DATA8(0x20);
  63:srcc/lcd.c    **** //
  64:srcc/lcd.c    **** //	LCD_WR_REG(0xEA);   //驱动时序控制B
  65:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);
  66:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);
  67:srcc/lcd.c    **** //
  68:srcc/lcd.c    **** //	LCD_WR_REG(0xC0);    //功耗控制1
  69:srcc/lcd.c    **** //	LCD_WR_DATA8(0x21);   //VRH[5:0]
  70:srcc/lcd.c    **** //
  71:srcc/lcd.c    **** //	LCD_WR_REG(0xC1);    //功耗控制2
  72:srcc/lcd.c    **** //	LCD_WR_DATA8(0x12);   //SAP[2:0];BT[3:0]
  73:srcc/lcd.c    **** //
  74:srcc/lcd.c    **** //	LCD_WR_REG(0xC5);    //VCOM控制
  75:srcc/lcd.c    **** //	LCD_WR_DATA8(0x32);
  76:srcc/lcd.c    **** //	LCD_WR_DATA8(0x3C);
  77:srcc/lcd.c    **** //
  78:srcc/lcd.c    **** //	LCD_WR_REG(0xC7);    //VCOM控制2
  79:srcc/lcd.c    **** //	LCD_WR_DATA8(0XC1);
  80:srcc/lcd.c    **** //
  81:srcc/lcd.c    **** 
  82:srcc/lcd.c    **** 	LCD_WR_REG(0x36);    //存储器访问控制，显示屏正向显示写0x00/0x08,显示器反向显示写0xD0/0xD8
  83:srcc/lcd.c    **** 	LCD_WR_DATA8(0x00);  //0x00：ST7789V（新LCD）正常，ILI9341V红蓝颠倒
  84:srcc/lcd.c    **** 	                     //0x08：ILI9341V（就LCD）正常，ST7789V红蓝颜色颠倒
  85:srcc/lcd.c    **** //
  86:srcc/lcd.c    **** //	LCD_WR_REG(0x3A);    //像素格式控制
  87:srcc/lcd.c    **** //	LCD_WR_DATA8(0x55);
  88:srcc/lcd.c    **** //
  89:srcc/lcd.c    **** //	LCD_WR_REG(0xB1);    //帧速率控制
  90:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);
  91:srcc/lcd.c    **** //	LCD_WR_DATA8(0x18);
  92:srcc/lcd.c    **** ////
  93:srcc/lcd.c    **** 	LCD_WR_REG(0xB6);    //显示功能控制
  94:srcc/lcd.c    **** 	LCD_WR_DATA8(0x0A);
  95:srcc/lcd.c    **** 	LCD_WR_DATA8(0xA2);
  96:srcc/lcd.c    **** 
  97:srcc/lcd.c    **** //	LCD_WR_REG(0xF2);    //使能3伽马控制
  98:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);  //禁用
  99:srcc/lcd.c    **** //
 100:srcc/lcd.c    **** //	LCD_WR_REG(0x26);    //伽马设置
 101:srcc/lcd.c    **** //	LCD_WR_DATA8(0x01);
 102:srcc/lcd.c    **** //
 103:srcc/lcd.c    **** //	LCD_WR_REG(0xE0);    //正极伽马校准
 104:srcc/lcd.c    **** //    for (i=0;i<15;i++) LCD_WR_DATA8(cmdA[i]);
 105:srcc/lcd.c    **** //
 106:srcc/lcd.c    **** //	LCD_WR_REG(0XE1);    //负极伽马校准
 107:srcc/lcd.c    **** //	for (i=0;i<15;i++) LCD_WR_DATA8(cmdB[i]);
 108:srcc/lcd.c    **** 
 109:srcc/lcd.c    **** //	LCD_WR_REG(0x11);    //退出
 110:srcc/lcd.c    **** //	Delay_ms(120);
 111:srcc/lcd.c    **** //	LCD_WR_REG(0x29);    //Display on
 112:srcc/lcd.c    **** 	//===========================================================
 113:srcc/lcd.c    **** 
 114:srcc/lcd.c    **** 
 115:srcc/lcd.c    **** 	//==========ST7789V芯片初始化内容========================
 116:srcc/lcd.c    ****     //TFT:CTC2.8
 117:srcc/lcd.c    **** 	//------------------------------display and color format setting--------------------------------//
 118:srcc/lcd.c    **** //	LCD_WR_REG(0x36);  //设置扫描方式
 119:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00); //自上而下，自左而右
 120:srcc/lcd.c    **** 	LCD_WR_REG(0x3a);  //定义RGB图像数据格式
 121:srcc/lcd.c    **** 	LCD_WR_DATA8(0x05);//16位/像素
 122:srcc/lcd.c    **** //	//--------------------------------ST7789V Frame rate setting----------------------------------//
 123:srcc/lcd.c    **** //	LCD_WR_REG(0xb2);  //灯光设置，5个参数
 124:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0c);//设置后背光
 125:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0c);//设置前背光
 126:srcc/lcd.c    **** //	LCD_WR_DATA8(0x00);//0：不区分前后背光；1：区分前背光
 127:srcc/lcd.c    **** //	LCD_WR_DATA8(0x33);
 128:srcc/lcd.c    **** //	LCD_WR_DATA8(0x33);
 129:srcc/lcd.c    **** //	LCD_WR_REG(0xb7);//设置门电压
 130:srcc/lcd.c    **** //	LCD_WR_DATA8(0x35);//设置电压为-10.43到13.26
 131:srcc/lcd.c    **** //	//---------------------------------ST7789V Power setting--------------------------------------//
 132:srcc/lcd.c    **** //	LCD_WR_REG(0xbb);    //设置VCOM电压
 133:srcc/lcd.c    **** //	LCD_WR_DATA8(0x28);  //1.1V
 134:srcc/lcd.c    **** //	LCD_WR_REG(0xc0);    //LCM控制
 135:srcc/lcd.c    **** //	LCD_WR_DATA8(0x2c);  //default
 136:srcc/lcd.c    **** //	LCD_WR_REG(0xc2);     //VDV和VRH命令使能
 137:srcc/lcd.c    **** //	LCD_WR_DATA8(0x01);   //VDV和VRH寄存器的值为命令写入
 138:srcc/lcd.c    **** //	LCD_WR_REG(0xc3);     //设置VRH
 139:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0b);   //4.1+( vcom+vcom offset+vdv)
 140:srcc/lcd.c    **** //
 141:srcc/lcd.c    **** //	LCD_WR_REG(0xc4);     //设置VDV
 142:srcc/lcd.c    **** //	LCD_WR_DATA8(0x20);   //VDV=0V
 143:srcc/lcd.c    **** //	LCD_WR_REG(0xc6);     //正常模式下的帧率控制
 144:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0f);   //60HZ
 145:srcc/lcd.c    **** //	LCD_WR_REG(0xd0);     //电源控制
 146:srcc/lcd.c    **** //	LCD_WR_DATA8(0xa4);
 147:srcc/lcd.c    **** //	LCD_WR_DATA8(0xa1);   //AVDD=6.8V；AVCL=-4.8V；VDDS=2.3V；
 148:srcc/lcd.c    **** //	//--------------------------------ST7789V gamma setting---------------------------------------//
 149:srcc/lcd.c    **** //	LCD_WR_REG(0xe0);     //正电压gamma控制
 150:srcc/lcd.c    **** //	LCD_WR_DATA8(0xd0);
 151:srcc/lcd.c    **** //	LCD_WR_DATA8(0x01);
 152:srcc/lcd.c    **** //	LCD_WR_DATA8(0x08);
 153:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0f);
 154:srcc/lcd.c    **** //	LCD_WR_DATA8(0x11);
 155:srcc/lcd.c    **** //	LCD_WR_DATA8(0x2a);
 156:srcc/lcd.c    **** //	LCD_WR_DATA8(0x36);
 157:srcc/lcd.c    **** //	LCD_WR_DATA8(0x55);
 158:srcc/lcd.c    **** //	LCD_WR_DATA8(0x44);
 159:srcc/lcd.c    **** //	LCD_WR_DATA8(0x3a);
 160:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0b);
 161:srcc/lcd.c    **** //	LCD_WR_DATA8(0x06);
 162:srcc/lcd.c    **** //	LCD_WR_DATA8(0x11);
 163:srcc/lcd.c    **** //	LCD_WR_DATA8(0x20);
 164:srcc/lcd.c    **** //
 165:srcc/lcd.c    **** //	LCD_WR_REG(0xe1);     //负电压gamma控制
 166:srcc/lcd.c    **** //	LCD_WR_DATA8(0xd0);
 167:srcc/lcd.c    **** //	LCD_WR_DATA8(0x02);
 168:srcc/lcd.c    **** //	LCD_WR_DATA8(0x07);
 169:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0a);
 170:srcc/lcd.c    **** //	LCD_WR_DATA8(0x0b);
 171:srcc/lcd.c    **** //	LCD_WR_DATA8(0x18);
 172:srcc/lcd.c    **** //	LCD_WR_DATA8(0x34);
 173:srcc/lcd.c    **** //	LCD_WR_DATA8(0x43);
 174:srcc/lcd.c    **** //	LCD_WR_DATA8(0x4a);
 175:srcc/lcd.c    **** //	LCD_WR_DATA8(0x2b);
 176:srcc/lcd.c    **** //	LCD_WR_DATA8(0x1b);
 177:srcc/lcd.c    **** //	LCD_WR_DATA8(0x1c);
 178:srcc/lcd.c    **** //	LCD_WR_DATA8(0x22);
 179:srcc/lcd.c    **** //	LCD_WR_DATA8(0x1f);
 180:srcc/lcd.c    **** 
 181:srcc/lcd.c    **** 	LCD_WR_REG(0x11);     //退出睡眠模式
 182:srcc/lcd.c    **** 	Delay_ms(120);        //Delay_ms 120ms
 183:srcc/lcd.c    **** 	LCD_Clear(WHITE);
 184:srcc/lcd.c    **** 	LCD_WR_REG(0x29);
 185:srcc/lcd.c    **** 
 186:srcc/lcd.c    **** //	LCD_WR_REG(0x10);
 187:srcc/lcd.c    **** //	LCD_Clear(WHITE);
 188:srcc/lcd.c    **** //	LCD_WR_REG(0x11);
 189:srcc/lcd.c    **** 
 190:srcc/lcd.c    **** 
 191:srcc/lcd.c    **** 
 192:srcc/lcd.c    **** }
 193:srcc/lcd.c    **** 
 194:srcc/lcd.c    **** //=====================================================================
 195:srcc/lcd.c    **** //函数名称：LCD_Clear
 196:srcc/lcd.c    **** //函数返回：无
 197:srcc/lcd.c    **** //参数说明：background:背景颜色（使用本文件后画笔颜色宏定义）
 198:srcc/lcd.c    **** //功能概要：LCD清屏
 199:srcc/lcd.c    **** //=====================================================================
 200:srcc/lcd.c    **** void LCD_Clear(uint_16 background)  //LCD清屏
 201:srcc/lcd.c    **** {
 202:srcc/lcd.c    **** 	uint_16 i,j;
 203:srcc/lcd.c    **** 	Address_set(0,0,LCD_W-1,LCD_H-1);
 204:srcc/lcd.c    ****     for(i=0;i<LCD_W;i++)
 205:srcc/lcd.c    **** 	 {
 206:srcc/lcd.c    **** 	  for (j=0;j<LCD_H;j++) LCD_WR_DATA(background);
 207:srcc/lcd.c    ****      }
 208:srcc/lcd.c    **** }
 209:srcc/lcd.c    **** 
 210:srcc/lcd.c    **** 
 211:srcc/lcd.c    **** //=====================================================================
 212:srcc/lcd.c    **** //函数名称：LCD_DrawPoint
 213:srcc/lcd.c    **** //函数返回：无
 214:srcc/lcd.c    **** //参数说明：x,y:点坐标(240*320),
 215:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 216:srcc/lcd.c    **** //功能概要：在指定位置画一个点
 217:srcc/lcd.c    **** //=====================================================================
 218:srcc/lcd.c    **** void LCD_DrawPoint(uint_16 x,uint_16 y,uint_16 color)    //画点
 219:srcc/lcd.c    **** {
 220:srcc/lcd.c    **** 	Address_set(x,y,x,y);//设置光标位置
 221:srcc/lcd.c    **** 	LCD_WR_DATA(color);
 222:srcc/lcd.c    **** }
 223:srcc/lcd.c    **** 
 224:srcc/lcd.c    **** 
 225:srcc/lcd.c    **** //=====================================================================
 226:srcc/lcd.c    **** //函数名称：LCD_DrawPoint_big
 227:srcc/lcd.c    **** //函数返回：无
 228:srcc/lcd.c    **** //参数说明：x,y:点坐标(240*320)
 229:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 230:srcc/lcd.c    **** //功能概要：在指定位置画一个大点,大点的范围实际是一个以x-1,y-1为左上解，x+1,y+1为右下角的小矩形
 231:srcc/lcd.c    **** //       包含9个点（3*3）的大点。
 232:srcc/lcd.c    **** //=====================================================================
 233:srcc/lcd.c    **** void LCD_DrawPoint_big(uint_16 x,uint_16 y,uint_16 color) //画一个大点
 234:srcc/lcd.c    **** {
 235:srcc/lcd.c    **** 	LCD_DrawSurface(x-1,y-1,x+1,y+1,color);
 236:srcc/lcd.c    **** }
 237:srcc/lcd.c    **** 
 238:srcc/lcd.c    **** //=====================================================================
 239:srcc/lcd.c    **** //函数名称：Draw_Circle
 240:srcc/lcd.c    **** //函数返回：无
 241:srcc/lcd.c    **** //参数说明：x,y:中心点坐标(240*320),
 242:srcc/lcd.c    **** //       r:圆的半径,
 243:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 244:srcc/lcd.c    **** //功能概要：在指定位置画一个指定大小的圆
 245:srcc/lcd.c    **** //=====================================================================
 246:srcc/lcd.c    **** void LCD_DrawCircle(uint_16 x,uint_16 y,uint_8 r,uint_16 color)    //画圆
 247:srcc/lcd.c    **** {
 248:srcc/lcd.c    **** 	int a,b;
 249:srcc/lcd.c    **** 	int di;
 250:srcc/lcd.c    **** 	a=0;b=r;
 251:srcc/lcd.c    **** 	di=3-(r<<1);             //判断下个点位置的标志
 252:srcc/lcd.c    **** 	while(a<=b)
 253:srcc/lcd.c    **** 	{
 254:srcc/lcd.c    **** 		LCD_DrawPoint(x-b,y-a,color);             //3
 255:srcc/lcd.c    **** 		LCD_DrawPoint(x+b,y-a,color);             //0
 256:srcc/lcd.c    **** 		LCD_DrawPoint(x-a,y+b,color);             //1
 257:srcc/lcd.c    **** 		LCD_DrawPoint(x-b,y-a,color);             //7
 258:srcc/lcd.c    **** 		LCD_DrawPoint(x-a,y-b,color);             //2
 259:srcc/lcd.c    **** 		LCD_DrawPoint(x+b,y+a,color);             //4
 260:srcc/lcd.c    **** 		LCD_DrawPoint(x+a,y-b,color);             //5
 261:srcc/lcd.c    **** 		LCD_DrawPoint(x+a,y+b,color);             //6
 262:srcc/lcd.c    **** 		LCD_DrawPoint(x-b,y+a,color);
 263:srcc/lcd.c    **** 		a++;
 264:srcc/lcd.c    **** 		//使用Bresenham算法画圆
 265:srcc/lcd.c    **** 		if(di<0)di +=4*a+6;
 266:srcc/lcd.c    **** 		else
 267:srcc/lcd.c    **** 		{
 268:srcc/lcd.c    **** 			di+=10+4*(a-b);
 269:srcc/lcd.c    **** 			b--;
 270:srcc/lcd.c    **** 		}
 271:srcc/lcd.c    **** 		LCD_DrawPoint(x+a,y+b,color);
 272:srcc/lcd.c    **** 	}
 273:srcc/lcd.c    **** }
 274:srcc/lcd.c    **** 
 275:srcc/lcd.c    **** 
 276:srcc/lcd.c    **** //=====================================================================
 277:srcc/lcd.c    **** //函数名称：LCD_DrawRectangle
 278:srcc/lcd.c    **** //函数返回：无
 279:srcc/lcd.c    **** //参数说明：x1,y1:左上角点坐标(240*320),x2,y2:右下角点坐标(240*320),
 280:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 281:srcc/lcd.c    **** //功能概要：在指定左上角与右下角画一个指定线条颜色的矩形
 282:srcc/lcd.c    **** //=====================================================================
 283:srcc/lcd.c    **** void LCD_DrawRectangle(uint_16 x1, uint_16 y1,
 284:srcc/lcd.c    ****      uint_16 x2, uint_16 y2,uint_16 color)    //画矩形
 285:srcc/lcd.c    **** {
 286:srcc/lcd.c    **** 	LCD_DrawLine(x1,y1,x2,y1,color);
 287:srcc/lcd.c    **** 	LCD_DrawLine(x1,y1,x1,y2,color);
 288:srcc/lcd.c    **** 	LCD_DrawLine(x1,y2,x2,y2,color);
 289:srcc/lcd.c    **** 	LCD_DrawLine(x2,y1,x2,y2,color);
 290:srcc/lcd.c    **** }
 291:srcc/lcd.c    **** 
 292:srcc/lcd.c    **** 
 293:srcc/lcd.c    **** //=====================================================================
 294:srcc/lcd.c    **** //函数名称：LCD_ShowCharactor
 295:srcc/lcd.c    **** //函数返回：无
 296:srcc/lcd.c    **** //参数说明：x,y:起点坐标(240*320),index：汉字在字库中的索引,fontcolor:字体颜色,
 297:srcc/lcd.c    **** //       groundbackcolor:背景颜色，p:字库起始地址
 298:srcc/lcd.c    **** //功能概要：在指定位置显示一个汉字(16*16大小),汉字需要自行从字库提取
 299:srcc/lcd.c    **** //=====================================================================
 300:srcc/lcd.c    **** void LCD_ShowCharactor(uint_16  x,uint_16 y,uint_16 fontcolor,
 301:srcc/lcd.c    **** 	 uint_16 groundbackcolor,const uint_8 *p)    //显示16*16汉字
 302:srcc/lcd.c    **** {
 303:srcc/lcd.c    **** 	uint_8 i,j;
 304:srcc/lcd.c    **** 	const uint_8 *temp=p;
 305:srcc/lcd.c    ****     Address_set(x,y,x+15,y+15); //设置区域
 306:srcc/lcd.c    **** 	for(j=0;j<32;j++)
 307:srcc/lcd.c    **** 	{
 308:srcc/lcd.c    **** 		for(i=0;i<8;i++)
 309:srcc/lcd.c    **** 		{
 310:srcc/lcd.c    **** 		 	if((*temp&(1<<i))!=0)
 311:srcc/lcd.c    **** 				LCD_WR_DATA(fontcolor);
 312:srcc/lcd.c    **** 			else
 313:srcc/lcd.c    **** 
 314:srcc/lcd.c    **** 				LCD_WR_DATA(groundbackcolor);
 315:srcc/lcd.c    **** 		}
 316:srcc/lcd.c    **** 		temp++;
 317:srcc/lcd.c    **** 	 }
 318:srcc/lcd.c    **** }
 319:srcc/lcd.c    **** 
 320:srcc/lcd.c    **** 
 321:srcc/lcd.c    **** //=====================================================================
 322:srcc/lcd.c    **** //函数名称：LCD_ShowString
 323:srcc/lcd.c    **** //函数返回：无
 324:srcc/lcd.c    **** //参数说明：x,y:起点坐标(240*320),p:字符串起始地址（可以包含中文，但应包含在汉字字模中）
 325:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 326:srcc/lcd.c    **** //功能概要：在指定位置显示字符串，可指定显示画笔颜色和背景颜色。
 327:srcc/lcd.c    **** //        中文大小为（16*16）,英文大小为（8*16）
 328:srcc/lcd.c    **** //=====================================================================
 329:srcc/lcd.c    **** void LCD_ShowString(uint_16  x,uint_16 y,uint_16 fontcolor,
 330:srcc/lcd.c    **** 	 uint_16 groundbackcolor,const uint_8 *p)
 331:srcc/lcd.c    **** {
 332:srcc/lcd.c    **** 	uint_8 i,j,k;
 333:srcc/lcd.c    **** 	const uint_8 *temp;
 334:srcc/lcd.c    **** 	k = 0;
 335:srcc/lcd.c    **** 	while(*p != 0)
 336:srcc/lcd.c    **** 	{
 337:srcc/lcd.c    **** 		__disable_irq();
 338:srcc/lcd.c    **** 		if(*p>=0x20 && *p<=0x7e)
 339:srcc/lcd.c    **** 		{
 340:srcc/lcd.c    **** 			temp=nAsciiDot;
 341:srcc/lcd.c    **** 		    Address_set(x+8*k,y,x+7+8*k,y+15); //设置区域
 342:srcc/lcd.c    **** 			temp+=(*p-0x20)*16;
 343:srcc/lcd.c    **** 			for(j=0;j<16;j++)
 344:srcc/lcd.c    **** 			{
 345:srcc/lcd.c    **** 				for(i=0;i<8;i++)
 346:srcc/lcd.c    **** 				{
 347:srcc/lcd.c    **** 				 	if((*temp&(1<<i))!=0)
 348:srcc/lcd.c    **** 					{
 349:srcc/lcd.c    **** 						LCD_WR_DATA(fontcolor);
 350:srcc/lcd.c    **** 					}
 351:srcc/lcd.c    **** 					else
 352:srcc/lcd.c    **** 					{
 353:srcc/lcd.c    **** 						LCD_WR_DATA(groundbackcolor);
 354:srcc/lcd.c    **** 					}
 355:srcc/lcd.c    **** 				}
 356:srcc/lcd.c    **** 				temp++;
 357:srcc/lcd.c    **** 			 }
 358:srcc/lcd.c    **** 			k++;
 359:srcc/lcd.c    **** 		}
 360:srcc/lcd.c    **** 		else if(*p > 0x7e)
 361:srcc/lcd.c    **** 		{
 362:srcc/lcd.c    ****              for(i=0;i<ChineseCharacterLength;i++)
 363:srcc/lcd.c    ****              {
 364:srcc/lcd.c    ****             	 uint_8 a = *p;
 365:srcc/lcd.c    ****             	 uint_8 b = *(p+1);
 366:srcc/lcd.c    ****             	 uint_8 c = GB_16[i].Index[0];
 367:srcc/lcd.c    ****             	 uint_8 d = GB_16[i].Index[1];
 368:srcc/lcd.c    ****                  if( (a == c) && (b == d))
 369:srcc/lcd.c    ****                  {
 370:srcc/lcd.c    ****                 	 LCD_ShowCharactor(x+8*k,y,fontcolor,groundbackcolor,GB_16[i].Msk);
 371:srcc/lcd.c    ****                 	 break;
 372:srcc/lcd.c    ****                  }
 373:srcc/lcd.c    ****              }
 374:srcc/lcd.c    ****              k+=1;
 375:srcc/lcd.c    **** 		}
 376:srcc/lcd.c    **** 		p++;
 377:srcc/lcd.c    **** 		__enable_irq();
 378:srcc/lcd.c    **** 	}
 379:srcc/lcd.c    **** }
 380:srcc/lcd.c    **** 
 381:srcc/lcd.c    **** //=====================================================================
 382:srcc/lcd.c    **** //函数名称：LCD_aotu
 383:srcc/lcd.c    **** //函数返回：无
 384:srcc/lcd.c    **** //参数说明：x,y:左上坐标(240*320),x1,y1:右下角坐标(240*320)
 385:srcc/lcd.c    **** //功能概要：在指定位置显示一个凹凸按钮
 386:srcc/lcd.c    **** //=====================================================================
 387:srcc/lcd.c    **** void LCD_aotu(uint_16 x,uint_16 y,uint_16 x1,uint_16 y1,uint_8 s) //凹凸按钮
 388:srcc/lcd.c    **** {
 389:srcc/lcd.c    ****    uint_8 i,n;
 390:srcc/lcd.c    ****    uint_16 color;
 391:srcc/lcd.c    ****    color = GRAY;
 392:srcc/lcd.c    ****    LCD_DrawSurface(x,y,x1,y1,color);
 393:srcc/lcd.c    ****    n=2;
 394:srcc/lcd.c    ****    color = BLACK;
 395:srcc/lcd.c    ****    LCD_DrawLine(x,y,x1,y,color);
 396:srcc/lcd.c    ****    LCD_DrawLine(x,y,x,y1,color);
 397:srcc/lcd.c    ****    color = BLACK;
 398:srcc/lcd.c    ****    LCD_DrawLine(x1,y,x1,y1,color);
 399:srcc/lcd.c    ****    LCD_DrawLine(x,y1,x1,y1,color);
 400:srcc/lcd.c    **** 
 401:srcc/lcd.c    ****    for(i=1;i<n;i++)
 402:srcc/lcd.c    ****    {
 403:srcc/lcd.c    **** 
 404:srcc/lcd.c    ****    color=(s==0?BLACK:WHITE);  //
 405:srcc/lcd.c    **** 
 406:srcc/lcd.c    ****    LCD_DrawLine(x+i,y+i,x1-i,y+i,color);
 407:srcc/lcd.c    ****    LCD_DrawLine(x+i,y+i,x+i,y1-i,color);
 408:srcc/lcd.c    **** 
 409:srcc/lcd.c    ****    color=(s==0?WHITE:BLACK);
 410:srcc/lcd.c    **** 
 411:srcc/lcd.c    ****    LCD_DrawLine(x1-i,y+i,x1-i,y1-i,color);
 412:srcc/lcd.c    ****    LCD_DrawLine(x+i,y1-i,x1-i,y1-i,color);
 413:srcc/lcd.c    ****    };
 414:srcc/lcd.c    **** };
 415:srcc/lcd.c    **** 
 416:srcc/lcd.c    **** //=====================================================================
 417:srcc/lcd.c    **** //函数名称：LCD_DrawLine
 418:srcc/lcd.c    **** //函数返回：无
 419:srcc/lcd.c    **** //参数说明：x1,y1:起点坐标(240*320),x2,y2:终点坐标(240*320),
 420:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 421:srcc/lcd.c    **** //功能概要：在指定两点间画一条指定颜色的直线
 422:srcc/lcd.c    **** //=====================================================================
 423:srcc/lcd.c    **** void LCD_DrawLine(uint_16 x1,uint_16 y1,
 424:srcc/lcd.c    **** 	 uint_16 x2, uint_16 y2,uint_16 color)    //画线
 425:srcc/lcd.c    **** {
 426:srcc/lcd.c    **** 	uint_16 t;
 427:srcc/lcd.c    **** 	int xerr=0,yerr=0,delta_x,delta_y,distance;
 428:srcc/lcd.c    **** 	int incx,incy,uRow,uCol;
 429:srcc/lcd.c    **** 
 430:srcc/lcd.c    **** 	delta_x=x2-x1; //计算坐标增量
 431:srcc/lcd.c    **** 	delta_y=y2-y1;
 432:srcc/lcd.c    **** 	uRow=x1;
 433:srcc/lcd.c    **** 	uCol=y1;
 434:srcc/lcd.c    **** 	if(delta_x>0)incx=1; //设置单步方向
 435:srcc/lcd.c    **** 	else if(delta_x==0)incx=0;//垂直线
 436:srcc/lcd.c    **** 	else {incx=-1;delta_x=-delta_x;}
 437:srcc/lcd.c    **** 	if(delta_y>0)incy=1;
 438:srcc/lcd.c    **** 	else if(delta_y==0)incy=0;//水平线
 439:srcc/lcd.c    **** 	else{incy=-1;delta_y=-delta_y;}
 440:srcc/lcd.c    **** 	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 441:srcc/lcd.c    **** 	else distance=delta_y;
 442:srcc/lcd.c    **** 	for(t=0;t<=distance+1;t++ )//画线输出
 443:srcc/lcd.c    **** 	{
 444:srcc/lcd.c    **** 		LCD_DrawPoint(uRow,uCol,color);//画点
 445:srcc/lcd.c    **** 		xerr+=delta_x ;
 446:srcc/lcd.c    **** 		yerr+=delta_y ;
 447:srcc/lcd.c    **** 		if(xerr>distance)
 448:srcc/lcd.c    **** 		{
 449:srcc/lcd.c    **** 			xerr-=distance;
 450:srcc/lcd.c    **** 			uRow+=incx;
 451:srcc/lcd.c    **** 		}
 452:srcc/lcd.c    **** 		if(yerr>distance)
 453:srcc/lcd.c    **** 		{
 454:srcc/lcd.c    **** 			yerr-=distance;
 455:srcc/lcd.c    **** 			uCol+=incy;
 456:srcc/lcd.c    **** 		}
 457:srcc/lcd.c    **** 	}
 458:srcc/lcd.c    **** }
 459:srcc/lcd.c    **** 
 460:srcc/lcd.c    **** //=====================================================================
 461:srcc/lcd.c    **** //函数名称：LCD_DrawSurface
 462:srcc/lcd.c    **** //函数返回：无
 463:srcc/lcd.c    **** //参数说明：x1,y1:起点坐标(240*320),x2,y2:终点坐标(240*320),
 464:srcc/lcd.c    **** //       color:颜色（使用本文件后画笔颜色宏定义）
 465:srcc/lcd.c    **** //功能概要：指定颜色填充矩形区域，要确保x2>x1,y2>y1否则程序不能正常执行
 466:srcc/lcd.c    **** //=====================================================================
 467:srcc/lcd.c    **** void LCD_DrawSurface(uint_16 x1,uint_16 y1,
 468:srcc/lcd.c    ****      uint_16 x2,uint_16 y2,uint_16 color)    //填充矩形区域
 469:srcc/lcd.c    **** {
 470:srcc/lcd.c    **** 	uint_16 i,j;
 471:srcc/lcd.c    **** 	Address_set(x1,y1,x2,y2);      //设置光标位置
 472:srcc/lcd.c    **** 	for(i=y1;i<=y2;i++)
 473:srcc/lcd.c    **** 	{
 474:srcc/lcd.c    **** 		for(j=x1;j<=x2;j++)LCD_WR_DATA(color);//画点
 475:srcc/lcd.c    **** 	}
 476:srcc/lcd.c    **** }
 477:srcc/lcd.c    **** 
 478:srcc/lcd.c    **** //=====================================================================
 479:srcc/lcd.c    **** //内部函数
 480:srcc/lcd.c    **** //=====================================================================
 481:srcc/lcd.c    **** 
 482:srcc/lcd.c    **** //=====================================================================
 483:srcc/lcd.c    **** //函数名称：mypow
 484:srcc/lcd.c    **** //函数返回：m^n
 485:srcc/lcd.c    **** //参数说明：m底数,n指数
 486:srcc/lcd.c    **** //功能概要：计算m^n
 487:srcc/lcd.c    **** //=====================================================================
 488:srcc/lcd.c    **** uint_32 mypow(uint_8 m,uint_8 n)
 489:srcc/lcd.c    **** {
  26              		.loc 1 489 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 490:srcc/lcd.c    **** 	uint_32 result=1;
 491:srcc/lcd.c    **** 	while(n--)result*=m;
  32              		.loc 1 491 0
  33 0000 4B1E     		subs	r3, r1, #1
  34 0002 DBB2     		uxtb	r3, r3
  35              	.LVL1:
  36 0004 0029     		cmp	r1, #0
  37 0006 07D0     		beq	.L4
 490:srcc/lcd.c    **** 	uint_32 result=1;
  38              		.loc 1 490 0
  39 0008 0122     		movs	r2, #1
  40              	.LVL2:
  41              	.L3:
  42              		.loc 1 491 0 discriminator 2
  43 000a 4243     		muls	r2, r0
  44              	.LVL3:
  45 000c 013B     		subs	r3, r3, #1
  46              	.LVL4:
  47 000e DBB2     		uxtb	r3, r3
  48              	.LVL5:
  49 0010 FF2B     		cmp	r3, #255
  50 0012 FAD1     		bne	.L3
  51              	.LVL6:
  52              	.L1:
 492:srcc/lcd.c    **** 	return result;
 493:srcc/lcd.c    **** }
  53              		.loc 1 493 0
  54 0014 1000     		movs	r0, r2
  55              	.LVL7:
  56              		@ sp needed
  57 0016 7047     		bx	lr
  58              	.LVL8:
  59              	.L4:
 490:srcc/lcd.c    **** 	uint_32 result=1;
  60              		.loc 1 490 0
  61 0018 0122     		movs	r2, #1
 492:srcc/lcd.c    **** 	return result;
  62              		.loc 1 492 0
  63 001a FBE7     		b	.L1
  64              		.cfi_endproc
  65              	.LFE49:
  67              		.section	.text.LCD_WR_DATA8,"ax",%progbits
  68              		.align	1
  69              		.global	LCD_WR_DATA8
  70              		.syntax unified
  71              		.code	16
  72              		.thumb_func
  73              		.fpu softvfp
  75              	LCD_WR_DATA8:
  76              	.LFB50:
 494:srcc/lcd.c    **** void LCD_WR_DATA8(uint_8 da) //发送数据-8位参数
 495:srcc/lcd.c    **** {
  77              		.loc 1 495 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL9:
  82 0000 70B5     		push	{r4, r5, r6, lr}
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 4, -16
  85              		.cfi_offset 5, -12
  86              		.cfi_offset 6, -8
  87              		.cfi_offset 14, -4
  88 0002 0600     		movs	r6, r0
 496:srcc/lcd.c    **** 	gpio_set(LCD_DC,1);
  89              		.loc 1 496 0
  90 0004 0C4C     		ldr	r4, .L7
  91 0006 2368     		ldr	r3, [r4]
  92 0008 1B6E     		ldr	r3, [r3, #96]
  93 000a 0121     		movs	r1, #1
  94 000c 0B48     		ldr	r0, .L7+4
  95              	.LVL10:
  96 000e 9847     		blx	r3
  97              	.LVL11:
 497:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,0);
  98              		.loc 1 497 0
  99 0010 C025     		movs	r5, #192
 100 0012 AD00     		lsls	r5, r5, #2
 101 0014 2368     		ldr	r3, [r4]
 102 0016 DB6D     		ldr	r3, [r3, #92]
 103 0018 0022     		movs	r2, #0
 104 001a 0121     		movs	r1, #1
 105 001c 2800     		movs	r0, r5
 106 001e 9847     		blx	r3
 107              	.LVL12:
 498:srcc/lcd.c    **** 	spi_send1(0,da);
 108              		.loc 1 498 0
 109 0020 3100     		movs	r1, r6
 110 0022 0020     		movs	r0, #0
 111 0024 FFF7FEFF 		bl	spi_send1
 112              	.LVL13:
 499:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,1);
 113              		.loc 1 499 0
 114 0028 2368     		ldr	r3, [r4]
 115 002a DB6D     		ldr	r3, [r3, #92]
 116 002c 0122     		movs	r2, #1
 117 002e 0121     		movs	r1, #1
 118 0030 2800     		movs	r0, r5
 119 0032 9847     		blx	r3
 120              	.LVL14:
 500:srcc/lcd.c    **** }
 121              		.loc 1 500 0
 122              		@ sp needed
 123 0034 70BD     		pop	{r4, r5, r6, pc}
 124              	.L8:
 125 0036 C046     		.align	2
 126              	.L7:
 127 0038 00000000 		.word	bios_fun_point
 128 003c 01030000 		.word	769
 129              		.cfi_endproc
 130              	.LFE50:
 132              		.section	.text.LCD_WR_DATA,"ax",%progbits
 133              		.align	1
 134              		.global	LCD_WR_DATA
 135              		.syntax unified
 136              		.code	16
 137              		.thumb_func
 138              		.fpu softvfp
 140              	LCD_WR_DATA:
 141              	.LFB51:
 501:srcc/lcd.c    ****  void LCD_WR_DATA(uint_16 da)
 502:srcc/lcd.c    **** {
 142              		.loc 1 502 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              	.LVL15:
 147 0000 70B5     		push	{r4, r5, r6, lr}
 148              		.cfi_def_cfa_offset 16
 149              		.cfi_offset 4, -16
 150              		.cfi_offset 5, -12
 151              		.cfi_offset 6, -8
 152              		.cfi_offset 14, -4
 153 0002 0400     		movs	r4, r0
 503:srcc/lcd.c    **** 	gpio_set(LCD_DC,1);
 154              		.loc 1 503 0
 155 0004 0E4D     		ldr	r5, .L10
 156 0006 2B68     		ldr	r3, [r5]
 157 0008 1B6E     		ldr	r3, [r3, #96]
 158 000a 0121     		movs	r1, #1
 159 000c 0D48     		ldr	r0, .L10+4
 160              	.LVL16:
 161 000e 9847     		blx	r3
 162              	.LVL17:
 504:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,0);
 163              		.loc 1 504 0
 164 0010 C026     		movs	r6, #192
 165 0012 B600     		lsls	r6, r6, #2
 166 0014 2B68     		ldr	r3, [r5]
 167 0016 DB6D     		ldr	r3, [r3, #92]
 168 0018 0022     		movs	r2, #0
 169 001a 0121     		movs	r1, #1
 170 001c 3000     		movs	r0, r6
 171 001e 9847     		blx	r3
 172              	.LVL18:
 505:srcc/lcd.c    ****     spi_send1(0,da>>8);
 173              		.loc 1 505 0
 174 0020 210A     		lsrs	r1, r4, #8
 175 0022 0020     		movs	r0, #0
 176 0024 FFF7FEFF 		bl	spi_send1
 177              	.LVL19:
 506:srcc/lcd.c    ****     spi_send1(0,da);
 178              		.loc 1 506 0
 179 0028 E1B2     		uxtb	r1, r4
 180 002a 0020     		movs	r0, #0
 181 002c FFF7FEFF 		bl	spi_send1
 182              	.LVL20:
 507:srcc/lcd.c    ****     gpio_init(PTD_NUM|0,1,1);
 183              		.loc 1 507 0
 184 0030 2B68     		ldr	r3, [r5]
 185 0032 DB6D     		ldr	r3, [r3, #92]
 186 0034 0122     		movs	r2, #1
 187 0036 0121     		movs	r1, #1
 188 0038 3000     		movs	r0, r6
 189 003a 9847     		blx	r3
 190              	.LVL21:
 508:srcc/lcd.c    **** }
 191              		.loc 1 508 0
 192              		@ sp needed
 193 003c 70BD     		pop	{r4, r5, r6, pc}
 194              	.L11:
 195 003e C046     		.align	2
 196              	.L10:
 197 0040 00000000 		.word	bios_fun_point
 198 0044 01030000 		.word	769
 199              		.cfi_endproc
 200              	.LFE51:
 202              		.section	.text.LCD_WR_REG,"ax",%progbits
 203              		.align	1
 204              		.global	LCD_WR_REG
 205              		.syntax unified
 206              		.code	16
 207              		.thumb_func
 208              		.fpu softvfp
 210              	LCD_WR_REG:
 211              	.LFB52:
 509:srcc/lcd.c    **** void LCD_WR_REG(uint_8 da)
 510:srcc/lcd.c    **** {
 212              		.loc 1 510 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL22:
 217 0000 70B5     		push	{r4, r5, r6, lr}
 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 4, -16
 220              		.cfi_offset 5, -12
 221              		.cfi_offset 6, -8
 222              		.cfi_offset 14, -4
 223 0002 0600     		movs	r6, r0
 511:srcc/lcd.c    **** 	gpio_set(LCD_DC,0);
 224              		.loc 1 511 0
 225 0004 0C4C     		ldr	r4, .L13
 226 0006 2368     		ldr	r3, [r4]
 227 0008 1B6E     		ldr	r3, [r3, #96]
 228 000a 0021     		movs	r1, #0
 229 000c 0B48     		ldr	r0, .L13+4
 230              	.LVL23:
 231 000e 9847     		blx	r3
 232              	.LVL24:
 512:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,0);
 233              		.loc 1 512 0
 234 0010 C025     		movs	r5, #192
 235 0012 AD00     		lsls	r5, r5, #2
 236 0014 2368     		ldr	r3, [r4]
 237 0016 DB6D     		ldr	r3, [r3, #92]
 238 0018 0022     		movs	r2, #0
 239 001a 0121     		movs	r1, #1
 240 001c 2800     		movs	r0, r5
 241 001e 9847     		blx	r3
 242              	.LVL25:
 513:srcc/lcd.c    **** 	spi_send1(0,da);
 243              		.loc 1 513 0
 244 0020 3100     		movs	r1, r6
 245 0022 0020     		movs	r0, #0
 246 0024 FFF7FEFF 		bl	spi_send1
 247              	.LVL26:
 514:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,1);
 248              		.loc 1 514 0
 249 0028 2368     		ldr	r3, [r4]
 250 002a DB6D     		ldr	r3, [r3, #92]
 251 002c 0122     		movs	r2, #1
 252 002e 0121     		movs	r1, #1
 253 0030 2800     		movs	r0, r5
 254 0032 9847     		blx	r3
 255              	.LVL27:
 515:srcc/lcd.c    **** }
 256              		.loc 1 515 0
 257              		@ sp needed
 258 0034 70BD     		pop	{r4, r5, r6, pc}
 259              	.L14:
 260 0036 C046     		.align	2
 261              	.L13:
 262 0038 00000000 		.word	bios_fun_point
 263 003c 01030000 		.word	769
 264              		.cfi_endproc
 265              	.LFE52:
 267              		.section	.text.LCD_WR_REG_DATA,"ax",%progbits
 268              		.align	1
 269              		.global	LCD_WR_REG_DATA
 270              		.syntax unified
 271              		.code	16
 272              		.thumb_func
 273              		.fpu softvfp
 275              	LCD_WR_REG_DATA:
 276              	.LFB53:
 516:srcc/lcd.c    **** //void LCD_WR_REG_DATA(uint_16 reg,uint_16 da)
 517:srcc/lcd.c    ****  void LCD_WR_REG_DATA(uint_8 reg,uint_16 da)
 518:srcc/lcd.c    **** {
 277              		.loc 1 518 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL28:
 282 0000 10B5     		push	{r4, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 286 0002 0C00     		movs	r4, r1
 519:srcc/lcd.c    ****     LCD_WR_REG(reg);
 287              		.loc 1 519 0
 288 0004 FFF7FEFF 		bl	LCD_WR_REG
 289              	.LVL29:
 520:srcc/lcd.c    **** 	LCD_WR_DATA(da);
 290              		.loc 1 520 0
 291 0008 2000     		movs	r0, r4
 292 000a FFF7FEFF 		bl	LCD_WR_DATA
 293              	.LVL30:
 521:srcc/lcd.c    **** }
 294              		.loc 1 521 0
 295              		@ sp needed
 296 000e 10BD     		pop	{r4, pc}
 297              		.cfi_endproc
 298              	.LFE53:
 300              		.section	.text.Address_set,"ax",%progbits
 301              		.align	1
 302              		.global	Address_set
 303              		.syntax unified
 304              		.code	16
 305              		.thumb_func
 306              		.fpu softvfp
 308              	Address_set:
 309              	.LFB54:
 522:srcc/lcd.c    **** void Address_set(uint_16 x1,uint_16 y1,uint_16 x2,uint_16 y2)
 523:srcc/lcd.c    **** {
 310              		.loc 1 523 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL31:
 315 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 316              		.cfi_def_cfa_offset 24
 317              		.cfi_offset 3, -24
 318              		.cfi_offset 4, -20
 319              		.cfi_offset 5, -16
 320              		.cfi_offset 6, -12
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 0700     		movs	r7, r0
 324 0004 0D00     		movs	r5, r1
 325 0006 1600     		movs	r6, r2
 326 0008 1C00     		movs	r4, r3
 524:srcc/lcd.c    **** 	LCD_WR_REG(0x2a);      //写行地址命令
 327              		.loc 1 524 0
 328 000a 2A20     		movs	r0, #42
 329              	.LVL32:
 330 000c FFF7FEFF 		bl	LCD_WR_REG
 331              	.LVL33:
 525:srcc/lcd.c    **** 	LCD_WR_DATA8(x1>>8);   //写起始行地址
 332              		.loc 1 525 0
 333 0010 380A     		lsrs	r0, r7, #8
 334 0012 FFF7FEFF 		bl	LCD_WR_DATA8
 335              	.LVL34:
 526:srcc/lcd.c    **** 	LCD_WR_DATA8(x1);
 336              		.loc 1 526 0
 337 0016 F8B2     		uxtb	r0, r7
 338 0018 FFF7FEFF 		bl	LCD_WR_DATA8
 339              	.LVL35:
 527:srcc/lcd.c    **** 	LCD_WR_DATA8(x2>>8);   //写结束行地址
 340              		.loc 1 527 0
 341 001c 300A     		lsrs	r0, r6, #8
 342 001e FFF7FEFF 		bl	LCD_WR_DATA8
 343              	.LVL36:
 528:srcc/lcd.c    **** 	LCD_WR_DATA8(x2);
 344              		.loc 1 528 0
 345 0022 F0B2     		uxtb	r0, r6
 346 0024 FFF7FEFF 		bl	LCD_WR_DATA8
 347              	.LVL37:
 529:srcc/lcd.c    **** 
 530:srcc/lcd.c    **** 	LCD_WR_REG(0x2b);     //写列地址命令
 348              		.loc 1 530 0
 349 0028 2B20     		movs	r0, #43
 350 002a FFF7FEFF 		bl	LCD_WR_REG
 351              	.LVL38:
 531:srcc/lcd.c    **** 	LCD_WR_DATA8(y1>>8);  //写列起始地址
 352              		.loc 1 531 0
 353 002e 280A     		lsrs	r0, r5, #8
 354 0030 FFF7FEFF 		bl	LCD_WR_DATA8
 355              	.LVL39:
 532:srcc/lcd.c    **** 	LCD_WR_DATA8(y1);
 356              		.loc 1 532 0
 357 0034 E8B2     		uxtb	r0, r5
 358 0036 FFF7FEFF 		bl	LCD_WR_DATA8
 359              	.LVL40:
 533:srcc/lcd.c    **** 	LCD_WR_DATA8(y2>>8);  //写结束列地址
 360              		.loc 1 533 0
 361 003a 200A     		lsrs	r0, r4, #8
 362 003c FFF7FEFF 		bl	LCD_WR_DATA8
 363              	.LVL41:
 534:srcc/lcd.c    **** 	LCD_WR_DATA8(y2);
 364              		.loc 1 534 0
 365 0040 E0B2     		uxtb	r0, r4
 366 0042 FFF7FEFF 		bl	LCD_WR_DATA8
 367              	.LVL42:
 535:srcc/lcd.c    **** 
 536:srcc/lcd.c    **** 	LCD_WR_REG(0x2C);     //写存储器命令
 368              		.loc 1 536 0
 369 0046 2C20     		movs	r0, #44
 370 0048 FFF7FEFF 		bl	LCD_WR_REG
 371              	.LVL43:
 537:srcc/lcd.c    **** }
 372              		.loc 1 537 0
 373              		@ sp needed
 374 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 375              		.cfi_endproc
 376              	.LFE54:
 378              		.section	.text.LCD_Clear,"ax",%progbits
 379              		.align	1
 380              		.global	LCD_Clear
 381              		.syntax unified
 382              		.code	16
 383              		.thumb_func
 384              		.fpu softvfp
 386              	LCD_Clear:
 387              	.LFB39:
 201:srcc/lcd.c    **** 	uint_16 i,j;
 388              		.loc 1 201 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL44:
 393 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 394              		.cfi_def_cfa_offset 24
 395              		.cfi_offset 3, -24
 396              		.cfi_offset 4, -20
 397              		.cfi_offset 5, -16
 398              		.cfi_offset 6, -12
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 0500     		movs	r5, r0
 203:srcc/lcd.c    ****     for(i=0;i<LCD_W;i++)
 402              		.loc 1 203 0
 403 0004 4023     		movs	r3, #64
 404 0006 FF33     		adds	r3, r3, #255
 405 0008 EF22     		movs	r2, #239
 406 000a 0021     		movs	r1, #0
 407 000c 0020     		movs	r0, #0
 408              	.LVL45:
 409 000e FFF7FEFF 		bl	Address_set
 410              	.LVL46:
 411 0012 F027     		movs	r7, #240
 201:srcc/lcd.c    **** 	uint_16 i,j;
 412              		.loc 1 201 0
 413 0014 A026     		movs	r6, #160
 414 0016 7600     		lsls	r6, r6, #1
 415              	.LVL47:
 416              	.L18:
 417 0018 3400     		movs	r4, r6
 418              	.LVL48:
 419              	.L19:
 206:srcc/lcd.c    ****      }
 420              		.loc 1 206 0 discriminator 3
 421 001a 2800     		movs	r0, r5
 422 001c FFF7FEFF 		bl	LCD_WR_DATA
 423              	.LVL49:
 424 0020 013C     		subs	r4, r4, #1
 425              	.LVL50:
 426 0022 A4B2     		uxth	r4, r4
 427 0024 002C     		cmp	r4, #0
 428 0026 F8D1     		bne	.L19
 429              	.LVL51:
 430 0028 013F     		subs	r7, r7, #1
 431              	.LVL52:
 432 002a BFB2     		uxth	r7, r7
 204:srcc/lcd.c    **** 	 {
 433              		.loc 1 204 0 discriminator 2
 434 002c 002F     		cmp	r7, #0
 435 002e F3D1     		bne	.L18
 208:srcc/lcd.c    **** 
 436              		.loc 1 208 0
 437              		@ sp needed
 438 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439              		.cfi_endproc
 440              	.LFE39:
 442              		.section	.text.LCD_Init,"ax",%progbits
 443              		.align	1
 444              		.global	LCD_Init
 445              		.syntax unified
 446              		.code	16
 447              		.thumb_func
 448              		.fpu softvfp
 450              	LCD_Init:
 451              	.LFB38:
  25:srcc/lcd.c    **** 	uint_8 i;
 452              		.loc 1 25 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 0000 30B5     		push	{r4, r5, lr}
 457              		.cfi_def_cfa_offset 12
 458              		.cfi_offset 4, -12
 459              		.cfi_offset 5, -8
 460              		.cfi_offset 14, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 24
  28:srcc/lcd.c    **** 	gpio_init(LCD_RS,1,0);
 463              		.loc 1 28 0
 464 0004 0023     		movs	r3, #0
 465 0006 0093     		str	r3, [sp]
 466 0008 284A     		ldr	r2, .L23
 467 000a 0121     		movs	r1, #1
 468 000c 0020     		movs	r0, #0
 469 000e FFF7FEFF 		bl	spi_init
 470              	.LVL53:
  29:srcc/lcd.c    **** 	gpio_init(LCD_DC,1,0);
 471              		.loc 1 29 0
 472 0012 274D     		ldr	r5, .L23+4
 473 0014 274C     		ldr	r4, .L23+8
 474 0016 2368     		ldr	r3, [r4]
 475 0018 DB6D     		ldr	r3, [r3, #92]
 476 001a 0022     		movs	r2, #0
 477 001c 0121     		movs	r1, #1
 478 001e 2800     		movs	r0, r5
 479 0020 9847     		blx	r3
 480              	.LVL54:
  30:srcc/lcd.c    **** 	gpio_init(PTD_NUM|0,1,1);
 481              		.loc 1 30 0
 482 0022 2368     		ldr	r3, [r4]
 483 0024 DB6D     		ldr	r3, [r3, #92]
 484 0026 0022     		movs	r2, #0
 485 0028 0121     		movs	r1, #1
 486 002a 2348     		ldr	r0, .L23+12
 487 002c 9847     		blx	r3
 488              	.LVL55:
  31:srcc/lcd.c    **** 
 489              		.loc 1 31 0
 490 002e C020     		movs	r0, #192
 491 0030 2368     		ldr	r3, [r4]
 492 0032 DB6D     		ldr	r3, [r3, #92]
 493 0034 0122     		movs	r2, #1
 494 0036 0121     		movs	r1, #1
 495 0038 8000     		lsls	r0, r0, #2
 496 003a 9847     		blx	r3
 497              	.LVL56:
  33:srcc/lcd.c    **** 
 498              		.loc 1 33 0
 499 003c 0021     		movs	r1, #0
 500 003e 0020     		movs	r0, #0
 501 0040 FFF7FEFF 		bl	LCD_WR_REG_DATA
 502              	.LVL57:
  35:srcc/lcd.c    **** 	Delay_ms(20);
 503              		.loc 1 35 0
 504 0044 2368     		ldr	r3, [r4]
 505 0046 1B6E     		ldr	r3, [r3, #96]
 506 0048 0021     		movs	r1, #0
 507 004a 2800     		movs	r0, r5
 508 004c 9847     		blx	r3
 509              	.LVL58:
  36:srcc/lcd.c    **** 	gpio_set(LCD_RS,1);
 510              		.loc 1 36 0
 511 004e 1420     		movs	r0, #20
 512 0050 FFF7FEFF 		bl	Delay_ms
 513              	.LVL59:
  37:srcc/lcd.c    **** 	Delay_ms(20);
 514              		.loc 1 37 0
 515 0054 2368     		ldr	r3, [r4]
 516 0056 1B6E     		ldr	r3, [r3, #96]
 517 0058 0121     		movs	r1, #1
 518 005a 2800     		movs	r0, r5
 519 005c 9847     		blx	r3
 520              	.LVL60:
  38:srcc/lcd.c    **** //==========ILI9341V芯片初始化内容========================
 521              		.loc 1 38 0
 522 005e 1420     		movs	r0, #20
 523 0060 FFF7FEFF 		bl	Delay_ms
 524              	.LVL61:
  82:srcc/lcd.c    **** 	LCD_WR_DATA8(0x00);  //0x00：ST7789V（新LCD）正常，ILI9341V红蓝颠倒
 525              		.loc 1 82 0
 526 0064 3620     		movs	r0, #54
 527 0066 FFF7FEFF 		bl	LCD_WR_REG
 528              	.LVL62:
  83:srcc/lcd.c    **** 	                     //0x08：ILI9341V（就LCD）正常，ST7789V红蓝颜色颠倒
 529              		.loc 1 83 0
 530 006a 0020     		movs	r0, #0
 531 006c FFF7FEFF 		bl	LCD_WR_DATA8
 532              	.LVL63:
  93:srcc/lcd.c    **** 	LCD_WR_DATA8(0x0A);
 533              		.loc 1 93 0
 534 0070 B620     		movs	r0, #182
 535 0072 FFF7FEFF 		bl	LCD_WR_REG
 536              	.LVL64:
  94:srcc/lcd.c    **** 	LCD_WR_DATA8(0xA2);
 537              		.loc 1 94 0
 538 0076 0A20     		movs	r0, #10
 539 0078 FFF7FEFF 		bl	LCD_WR_DATA8
 540              	.LVL65:
  95:srcc/lcd.c    **** 
 541              		.loc 1 95 0
 542 007c A220     		movs	r0, #162
 543 007e FFF7FEFF 		bl	LCD_WR_DATA8
 544              	.LVL66:
 120:srcc/lcd.c    **** 	LCD_WR_DATA8(0x05);//16位/像素
 545              		.loc 1 120 0
 546 0082 3A20     		movs	r0, #58
 547 0084 FFF7FEFF 		bl	LCD_WR_REG
 548              	.LVL67:
 121:srcc/lcd.c    **** //	//--------------------------------ST7789V Frame rate setting----------------------------------//
 549              		.loc 1 121 0
 550 0088 0520     		movs	r0, #5
 551 008a FFF7FEFF 		bl	LCD_WR_DATA8
 552              	.LVL68:
 181:srcc/lcd.c    **** 	Delay_ms(120);        //Delay_ms 120ms
 553              		.loc 1 181 0
 554 008e 1120     		movs	r0, #17
 555 0090 FFF7FEFF 		bl	LCD_WR_REG
 556              	.LVL69:
 182:srcc/lcd.c    **** 	LCD_Clear(WHITE);
 557              		.loc 1 182 0
 558 0094 7820     		movs	r0, #120
 559 0096 FFF7FEFF 		bl	Delay_ms
 560              	.LVL70:
 183:srcc/lcd.c    **** 	LCD_WR_REG(0x29);
 561              		.loc 1 183 0
 562 009a 0848     		ldr	r0, .L23+16
 563 009c FFF7FEFF 		bl	LCD_Clear
 564              	.LVL71:
 184:srcc/lcd.c    **** 
 565              		.loc 1 184 0
 566 00a0 2920     		movs	r0, #41
 567 00a2 FFF7FEFF 		bl	LCD_WR_REG
 568              	.LVL72:
 192:srcc/lcd.c    **** 
 569              		.loc 1 192 0
 570 00a6 03B0     		add	sp, sp, #12
 571              		@ sp needed
 572 00a8 30BD     		pop	{r4, r5, pc}
 573              	.L24:
 574 00aa C046     		.align	2
 575              	.L23:
 576 00ac 70170000 		.word	6000
 577 00b0 02030000 		.word	770
 578 00b4 00000000 		.word	bios_fun_point
 579 00b8 01030000 		.word	769
 580 00bc FFFF0000 		.word	65535
 581              		.cfi_endproc
 582              	.LFE38:
 584              		.section	.text.LCD_DrawPoint,"ax",%progbits
 585              		.align	1
 586              		.global	LCD_DrawPoint
 587              		.syntax unified
 588              		.code	16
 589              		.thumb_func
 590              		.fpu softvfp
 592              	LCD_DrawPoint:
 593              	.LFB40:
 219:srcc/lcd.c    **** 	Address_set(x,y,x,y);//设置光标位置
 594              		.loc 1 219 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              	.LVL73:
 599 0000 10B5     		push	{r4, lr}
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 4, -8
 602              		.cfi_offset 14, -4
 603 0002 1400     		movs	r4, r2
 220:srcc/lcd.c    **** 	LCD_WR_DATA(color);
 604              		.loc 1 220 0
 605 0004 0B00     		movs	r3, r1
 606 0006 0200     		movs	r2, r0
 607              	.LVL74:
 608 0008 FFF7FEFF 		bl	Address_set
 609              	.LVL75:
 221:srcc/lcd.c    **** }
 610              		.loc 1 221 0
 611 000c 2000     		movs	r0, r4
 612 000e FFF7FEFF 		bl	LCD_WR_DATA
 613              	.LVL76:
 222:srcc/lcd.c    **** 
 614              		.loc 1 222 0
 615              		@ sp needed
 616 0012 10BD     		pop	{r4, pc}
 617              		.cfi_endproc
 618              	.LFE40:
 620              		.section	.text.LCD_DrawCircle,"ax",%progbits
 621              		.align	1
 622              		.global	LCD_DrawCircle
 623              		.syntax unified
 624              		.code	16
 625              		.thumb_func
 626              		.fpu softvfp
 628              	LCD_DrawCircle:
 629              	.LFB42:
 247:srcc/lcd.c    **** 	int a,b;
 630              		.loc 1 247 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 24
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              	.LVL77:
 635 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 636              		.cfi_def_cfa_offset 20
 637              		.cfi_offset 4, -20
 638              		.cfi_offset 5, -16
 639              		.cfi_offset 6, -12
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 0002 DE46     		mov	lr, fp
 643 0004 5746     		mov	r7, r10
 644 0006 4E46     		mov	r6, r9
 645 0008 4546     		mov	r5, r8
 646 000a E0B5     		push	{r5, r6, r7, lr}
 647              		.cfi_def_cfa_offset 36
 648              		.cfi_offset 8, -36
 649              		.cfi_offset 9, -32
 650              		.cfi_offset 10, -28
 651              		.cfi_offset 11, -24
 652 000c 87B0     		sub	sp, sp, #28
 653              		.cfi_def_cfa_offset 64
 654 000e 8346     		mov	fp, r0
 655 0010 8A46     		mov	r10, r1
 656 0012 0193     		str	r3, [sp, #4]
 657              	.LVL78:
 250:srcc/lcd.c    **** 	di=3-(r<<1);             //判断下个点位置的标志
 658              		.loc 1 250 0
 659 0014 1100     		movs	r1, r2
 660              	.LVL79:
 251:srcc/lcd.c    **** 	while(a<=b)
 661              		.loc 1 251 0
 662 0016 5200     		lsls	r2, r2, #1
 663              	.LVL80:
 664 0018 0323     		movs	r3, #3
 665              	.LVL81:
 666 001a 9B1A     		subs	r3, r3, r2
 667 001c 9846     		mov	r8, r3
 668              	.LVL82:
 250:srcc/lcd.c    **** 	di=3-(r<<1);             //判断下个点位置的标志
 669              		.loc 1 250 0
 670 001e 0025     		movs	r5, #0
 671 0020 8946     		mov	r9, r1
 672 0022 0DE0     		b	.L29
 673              	.LVL83:
 674              	.L32:
 265:srcc/lcd.c    **** 		else
 675              		.loc 1 265 0 discriminator 1
 676 0024 AB00     		lsls	r3, r5, #2
 677              	.LVL84:
 678 0026 0633     		adds	r3, r3, #6
 679 0028 9844     		add	r8, r8, r3
 680              	.LVL85:
 681              	.L28:
 271:srcc/lcd.c    **** 	}
 682              		.loc 1 271 0
 683 002a 5146     		mov	r1, r10
 684 002c 4944     		add	r1, r1, r9
 685 002e 89B2     		uxth	r1, r1
 686 0030 5B46     		mov	r3, fp
 687 0032 5819     		adds	r0, r3, r5
 688 0034 80B2     		uxth	r0, r0
 689 0036 019A     		ldr	r2, [sp, #4]
 690 0038 FFF7FEFF 		bl	LCD_DrawPoint
 691              	.LVL86:
 252:srcc/lcd.c    **** 	{
 692              		.loc 1 252 0
 693 003c A945     		cmp	r9, r5
 694 003e 57DB     		blt	.L31
 695              	.LVL87:
 696              	.L29:
 254:srcc/lcd.c    **** 		LCD_DrawPoint(x+b,y-a,color);             //0
 697              		.loc 1 254 0
 698 0040 4B46     		mov	r3, r9
 699 0042 9EB2     		uxth	r6, r3
 700 0044 5B46     		mov	r3, fp
 701 0046 9B1B     		subs	r3, r3, r6
 702 0048 9BB2     		uxth	r3, r3
 703 004a ACB2     		uxth	r4, r5
 704 004c 5246     		mov	r2, r10
 705 004e 171B     		subs	r7, r2, r4
 706 0050 BFB2     		uxth	r7, r7
 707 0052 019A     		ldr	r2, [sp, #4]
 708 0054 3900     		movs	r1, r7
 709 0056 0293     		str	r3, [sp, #8]
 710 0058 1800     		movs	r0, r3
 711 005a FFF7FEFF 		bl	LCD_DrawPoint
 712              	.LVL88:
 255:srcc/lcd.c    **** 		LCD_DrawPoint(x-a,y+b,color);             //1
 713              		.loc 1 255 0
 714 005e 5A46     		mov	r2, fp
 715 0060 B318     		adds	r3, r6, r2
 716 0062 98B2     		uxth	r0, r3
 717 0064 019A     		ldr	r2, [sp, #4]
 718 0066 3900     		movs	r1, r7
 719 0068 0390     		str	r0, [sp, #12]
 720 006a FFF7FEFF 		bl	LCD_DrawPoint
 721              	.LVL89:
 722 006e 5A46     		mov	r2, fp
 723 0070 131B     		subs	r3, r2, r4
 724 0072 9AB2     		uxth	r2, r3
 725 0074 1000     		movs	r0, r2
 256:srcc/lcd.c    **** 		LCD_DrawPoint(x-b,y-a,color);             //7
 726              		.loc 1 256 0
 727 0076 5246     		mov	r2, r10
 728 0078 B318     		adds	r3, r6, r2
 729 007a 99B2     		uxth	r1, r3
 730 007c 019A     		ldr	r2, [sp, #4]
 731 007e 0491     		str	r1, [sp, #16]
 732 0080 0590     		str	r0, [sp, #20]
 733 0082 FFF7FEFF 		bl	LCD_DrawPoint
 734              	.LVL90:
 257:srcc/lcd.c    **** 		LCD_DrawPoint(x-a,y-b,color);             //2
 735              		.loc 1 257 0
 736 0086 019A     		ldr	r2, [sp, #4]
 737 0088 3900     		movs	r1, r7
 738 008a 0298     		ldr	r0, [sp, #8]
 739 008c FFF7FEFF 		bl	LCD_DrawPoint
 740              	.LVL91:
 258:srcc/lcd.c    **** 		LCD_DrawPoint(x+b,y+a,color);             //4
 741              		.loc 1 258 0
 742 0090 5246     		mov	r2, r10
 743 0092 961B     		subs	r6, r2, r6
 744 0094 B6B2     		uxth	r6, r6
 745 0096 019A     		ldr	r2, [sp, #4]
 746 0098 3100     		movs	r1, r6
 747 009a 0598     		ldr	r0, [sp, #20]
 748 009c FFF7FEFF 		bl	LCD_DrawPoint
 749              	.LVL92:
 750 00a0 5246     		mov	r2, r10
 751 00a2 1719     		adds	r7, r2, r4
 752 00a4 BFB2     		uxth	r7, r7
 259:srcc/lcd.c    **** 		LCD_DrawPoint(x+a,y-b,color);             //5
 753              		.loc 1 259 0
 754 00a6 019A     		ldr	r2, [sp, #4]
 755 00a8 3900     		movs	r1, r7
 756 00aa 0398     		ldr	r0, [sp, #12]
 757 00ac FFF7FEFF 		bl	LCD_DrawPoint
 758              	.LVL93:
 759 00b0 5C44     		add	r4, r4, fp
 760 00b2 A4B2     		uxth	r4, r4
 260:srcc/lcd.c    **** 		LCD_DrawPoint(x+a,y+b,color);             //6
 761              		.loc 1 260 0
 762 00b4 019A     		ldr	r2, [sp, #4]
 763 00b6 3100     		movs	r1, r6
 764 00b8 2000     		movs	r0, r4
 765 00ba FFF7FEFF 		bl	LCD_DrawPoint
 766              	.LVL94:
 261:srcc/lcd.c    **** 		LCD_DrawPoint(x-b,y+a,color);
 767              		.loc 1 261 0
 768 00be 019E     		ldr	r6, [sp, #4]
 769 00c0 3200     		movs	r2, r6
 770 00c2 0499     		ldr	r1, [sp, #16]
 771 00c4 2000     		movs	r0, r4
 772 00c6 FFF7FEFF 		bl	LCD_DrawPoint
 773              	.LVL95:
 262:srcc/lcd.c    **** 		a++;
 774              		.loc 1 262 0
 775 00ca 3200     		movs	r2, r6
 776 00cc 3900     		movs	r1, r7
 777 00ce 0298     		ldr	r0, [sp, #8]
 778 00d0 FFF7FEFF 		bl	LCD_DrawPoint
 779              	.LVL96:
 263:srcc/lcd.c    **** 		//使用Bresenham算法画圆
 780              		.loc 1 263 0
 781 00d4 0135     		adds	r5, r5, #1
 782              	.LVL97:
 265:srcc/lcd.c    **** 		else
 783              		.loc 1 265 0
 784 00d6 4346     		mov	r3, r8
 785 00d8 002B     		cmp	r3, #0
 786 00da A3DB     		blt	.L32
 787              	.LVL98:
 268:srcc/lcd.c    **** 			b--;
 788              		.loc 1 268 0
 789 00dc 4B46     		mov	r3, r9
 790              	.LVL99:
 791 00de EB1A     		subs	r3, r5, r3
 792 00e0 9B00     		lsls	r3, r3, #2
 793 00e2 0A33     		adds	r3, r3, #10
 794 00e4 9844     		add	r8, r8, r3
 795              	.LVL100:
 269:srcc/lcd.c    **** 		}
 796              		.loc 1 269 0
 797 00e6 0123     		movs	r3, #1
 798 00e8 5B42     		rsbs	r3, r3, #0
 799 00ea 9C46     		mov	ip, r3
 800 00ec E144     		add	r9, r9, ip
 801              	.LVL101:
 802 00ee 9CE7     		b	.L28
 803              	.L31:
 273:srcc/lcd.c    **** 
 804              		.loc 1 273 0
 805 00f0 07B0     		add	sp, sp, #28
 806              		@ sp needed
 807              	.LVL102:
 808              	.LVL103:
 809              	.LVL104:
 810 00f2 3CBC     		pop	{r2, r3, r4, r5}
 811 00f4 9046     		mov	r8, r2
 812 00f6 9946     		mov	r9, r3
 813 00f8 A246     		mov	r10, r4
 814 00fa AB46     		mov	fp, r5
 815 00fc F0BD     		pop	{r4, r5, r6, r7, pc}
 816              		.cfi_endproc
 817              	.LFE42:
 819              		.section	.text.LCD_DrawLine,"ax",%progbits
 820              		.align	1
 821              		.global	LCD_DrawLine
 822              		.syntax unified
 823              		.code	16
 824              		.thumb_func
 825              		.fpu softvfp
 827              	LCD_DrawLine:
 828              	.LFB47:
 425:srcc/lcd.c    **** 	uint_16 t;
 829              		.loc 1 425 0
 830              		.cfi_startproc
 831              		@ args = 4, pretend = 0, frame = 16
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              	.LVL105:
 834 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 835              		.cfi_def_cfa_offset 20
 836              		.cfi_offset 4, -20
 837              		.cfi_offset 5, -16
 838              		.cfi_offset 6, -12
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 0002 DE46     		mov	lr, fp
 842 0004 5746     		mov	r7, r10
 843 0006 4E46     		mov	r6, r9
 844 0008 4546     		mov	r5, r8
 845 000a E0B5     		push	{r5, r6, r7, lr}
 846              		.cfi_def_cfa_offset 36
 847              		.cfi_offset 8, -36
 848              		.cfi_offset 9, -32
 849              		.cfi_offset 10, -28
 850              		.cfi_offset 11, -24
 851 000c 85B0     		sub	sp, sp, #20
 852              		.cfi_def_cfa_offset 56
 853 000e 0EAC     		add	r4, sp, #56
 854              	.LVL106:
 855 0010 2488     		ldrh	r4, [r4]
 856              	.LVL107:
 857 0012 0294     		str	r4, [sp, #8]
 858              	.LVL108:
 430:srcc/lcd.c    **** 	delta_y=y2-y1;
 859              		.loc 1 430 0
 860 0014 0090     		str	r0, [sp]
 861 0016 121A     		subs	r2, r2, r0
 862              	.LVL109:
 863 0018 9046     		mov	r8, r2
 864              	.LVL110:
 431:srcc/lcd.c    **** 	uRow=x1;
 865              		.loc 1 431 0
 866 001a 0191     		str	r1, [sp, #4]
 867 001c 5B1A     		subs	r3, r3, r1
 868              	.LVL111:
 869 001e 9B46     		mov	fp, r3
 870              	.LVL112:
 434:srcc/lcd.c    **** 	else if(delta_x==0)incx=0;//垂直线
 871              		.loc 1 434 0
 872 0020 0123     		movs	r3, #1
 873              	.LVL113:
 874 0022 0393     		str	r3, [sp, #12]
 875 0024 002A     		cmp	r2, #0
 876 0026 10DD     		ble	.L46
 877              	.LVL114:
 878              	.L34:
 437:srcc/lcd.c    **** 	else if(delta_y==0)incy=0;//水平线
 879              		.loc 1 437 0
 880 0028 0123     		movs	r3, #1
 881 002a 9A46     		mov	r10, r3
 882 002c 5B46     		mov	r3, fp
 883 002e 002B     		cmp	r3, #0
 884 0030 14DD     		ble	.L47
 885              	.L35:
 886              	.LVL115:
 887 0032 4746     		mov	r7, r8
 888 0034 D845     		cmp	r8, fp
 889 0036 00DA     		bge	.L36
 890              	.LVL116:
 891 0038 5F46     		mov	r7, fp
 892              	.LVL117:
 893              	.L36:
 442:srcc/lcd.c    **** 	{
 894              		.loc 1 442 0
 895 003a 3B00     		movs	r3, r7
 896 003c 0133     		adds	r3, r3, #1
 897 003e 9946     		mov	r9, r3
 898 0040 30D4     		bmi	.L33
 427:srcc/lcd.c    **** 	int incx,incy,uRow,uCol;
 899              		.loc 1 427 0
 900 0042 0026     		movs	r6, #0
 901 0044 0025     		movs	r5, #0
 442:srcc/lcd.c    **** 	{
 902              		.loc 1 442 0
 903 0046 0024     		movs	r4, #0
 904 0048 15E0     		b	.L40
 905              	.LVL118:
 906              	.L46:
 435:srcc/lcd.c    **** 	else {incx=-1;delta_x=-delta_x;}
 907              		.loc 1 435 0
 908 004a 0392     		str	r2, [sp, #12]
 909 004c 002A     		cmp	r2, #0
 910 004e EBD0     		beq	.L34
 911              	.LVL119:
 436:srcc/lcd.c    **** 	if(delta_y>0)incy=1;
 912              		.loc 1 436 0
 913 0050 5342     		rsbs	r3, r2, #0
 914 0052 9846     		mov	r8, r3
 915              	.LVL120:
 916 0054 0123     		movs	r3, #1
 917              	.LVL121:
 918 0056 5B42     		rsbs	r3, r3, #0
 919 0058 0393     		str	r3, [sp, #12]
 920 005a E5E7     		b	.L34
 921              	.LVL122:
 922              	.L47:
 438:srcc/lcd.c    **** 	else{incy=-1;delta_y=-delta_y;}
 923              		.loc 1 438 0
 924 005c DA46     		mov	r10, fp
 925 005e 002B     		cmp	r3, #0
 926 0060 E7D0     		beq	.L35
 927              	.LVL123:
 439:srcc/lcd.c    **** 	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 928              		.loc 1 439 0
 929 0062 5B42     		rsbs	r3, r3, #0
 930              	.LVL124:
 931 0064 9B46     		mov	fp, r3
 932              	.LVL125:
 933 0066 0123     		movs	r3, #1
 934              	.LVL126:
 935 0068 5B42     		rsbs	r3, r3, #0
 936 006a 9A46     		mov	r10, r3
 937 006c E1E7     		b	.L35
 938              	.LVL127:
 939              	.L39:
 442:srcc/lcd.c    **** 	{
 940              		.loc 1 442 0 discriminator 2
 941 006e 0134     		adds	r4, r4, #1
 942              	.LVL128:
 943 0070 A4B2     		uxth	r4, r4
 944              	.LVL129:
 945 0072 4C45     		cmp	r4, r9
 946 0074 16DC     		bgt	.L33
 947              	.LVL130:
 948              	.L40:
 444:srcc/lcd.c    **** 		xerr+=delta_x ;
 949              		.loc 1 444 0
 950 0076 6B46     		mov	r3, sp
 951 0078 9988     		ldrh	r1, [r3, #4]
 952 007a 1888     		ldrh	r0, [r3]
 953 007c 029A     		ldr	r2, [sp, #8]
 954 007e FFF7FEFF 		bl	LCD_DrawPoint
 955              	.LVL131:
 445:srcc/lcd.c    **** 		yerr+=delta_y ;
 956              		.loc 1 445 0
 957 0082 4544     		add	r5, r5, r8
 958              	.LVL132:
 446:srcc/lcd.c    **** 		if(xerr>distance)
 959              		.loc 1 446 0
 960 0084 5E44     		add	r6, r6, fp
 961              	.LVL133:
 447:srcc/lcd.c    **** 		{
 962              		.loc 1 447 0
 963 0086 BD42     		cmp	r5, r7
 964 0088 05DD     		ble	.L38
 449:srcc/lcd.c    **** 			uRow+=incx;
 965              		.loc 1 449 0
 966 008a ED1B     		subs	r5, r5, r7
 967              	.LVL134:
 450:srcc/lcd.c    **** 		}
 968              		.loc 1 450 0
 969 008c 009B     		ldr	r3, [sp]
 970 008e 039A     		ldr	r2, [sp, #12]
 971 0090 9446     		mov	ip, r2
 972 0092 6344     		add	r3, r3, ip
 973 0094 0093     		str	r3, [sp]
 974              	.LVL135:
 975              	.L38:
 452:srcc/lcd.c    **** 		{
 976              		.loc 1 452 0
 977 0096 BE42     		cmp	r6, r7
 978 0098 E9DD     		ble	.L39
 454:srcc/lcd.c    **** 			uCol+=incy;
 979              		.loc 1 454 0
 980 009a F61B     		subs	r6, r6, r7
 981              	.LVL136:
 455:srcc/lcd.c    **** 		}
 982              		.loc 1 455 0
 983 009c 019B     		ldr	r3, [sp, #4]
 984 009e 5344     		add	r3, r3, r10
 985 00a0 0193     		str	r3, [sp, #4]
 986              	.LVL137:
 987 00a2 E4E7     		b	.L39
 988              	.LVL138:
 989              	.L33:
 458:srcc/lcd.c    **** 
 990              		.loc 1 458 0
 991 00a4 05B0     		add	sp, sp, #20
 992              		@ sp needed
 993              	.LVL139:
 994              	.LVL140:
 995              	.LVL141:
 996              	.LVL142:
 997              	.LVL143:
 998 00a6 3CBC     		pop	{r2, r3, r4, r5}
 999 00a8 9046     		mov	r8, r2
 1000 00aa 9946     		mov	r9, r3
 1001 00ac A246     		mov	r10, r4
 1002 00ae AB46     		mov	fp, r5
 1003 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              		.cfi_endproc
 1005              	.LFE47:
 1007              		.section	.text.LCD_DrawRectangle,"ax",%progbits
 1008              		.align	1
 1009              		.global	LCD_DrawRectangle
 1010              		.syntax unified
 1011              		.code	16
 1012              		.thumb_func
 1013              		.fpu softvfp
 1015              	LCD_DrawRectangle:
 1016              	.LFB43:
 285:srcc/lcd.c    **** 	LCD_DrawLine(x1,y1,x2,y1,color);
 1017              		.loc 1 285 0
 1018              		.cfi_startproc
 1019              		@ args = 4, pretend = 0, frame = 8
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL144:
 1022 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1023              		.cfi_def_cfa_offset 20
 1024              		.cfi_offset 4, -20
 1025              		.cfi_offset 5, -16
 1026              		.cfi_offset 6, -12
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029 0002 85B0     		sub	sp, sp, #20
 1030              		.cfi_def_cfa_offset 40
 1031 0004 0700     		movs	r7, r0
 1032 0006 0D00     		movs	r5, r1
 1033 0008 1E00     		movs	r6, r3
 1034 000a 0AAB     		add	r3, sp, #40
 1035              	.LVL145:
 1036 000c 1C88     		ldrh	r4, [r3]
 286:srcc/lcd.c    **** 	LCD_DrawLine(x1,y1,x1,y2,color);
 1037              		.loc 1 286 0
 1038 000e 0094     		str	r4, [sp]
 1039 0010 0B00     		movs	r3, r1
 1040              	.LVL146:
 1041 0012 0392     		str	r2, [sp, #12]
 1042 0014 FFF7FEFF 		bl	LCD_DrawLine
 1043              	.LVL147:
 287:srcc/lcd.c    **** 	LCD_DrawLine(x1,y2,x2,y2,color);
 1044              		.loc 1 287 0
 1045 0018 0094     		str	r4, [sp]
 1046 001a 3300     		movs	r3, r6
 1047 001c 3A00     		movs	r2, r7
 1048 001e 2900     		movs	r1, r5
 1049 0020 3800     		movs	r0, r7
 1050 0022 FFF7FEFF 		bl	LCD_DrawLine
 1051              	.LVL148:
 288:srcc/lcd.c    **** 	LCD_DrawLine(x2,y1,x2,y2,color);
 1052              		.loc 1 288 0
 1053 0026 0094     		str	r4, [sp]
 1054 0028 3300     		movs	r3, r6
 1055 002a 039A     		ldr	r2, [sp, #12]
 1056 002c 3100     		movs	r1, r6
 1057 002e 3800     		movs	r0, r7
 1058 0030 FFF7FEFF 		bl	LCD_DrawLine
 1059              	.LVL149:
 289:srcc/lcd.c    **** }
 1060              		.loc 1 289 0
 1061 0034 0094     		str	r4, [sp]
 1062 0036 3300     		movs	r3, r6
 1063 0038 0398     		ldr	r0, [sp, #12]
 1064 003a 0200     		movs	r2, r0
 1065 003c 2900     		movs	r1, r5
 1066 003e FFF7FEFF 		bl	LCD_DrawLine
 1067              	.LVL150:
 290:srcc/lcd.c    **** 
 1068              		.loc 1 290 0
 1069 0042 05B0     		add	sp, sp, #20
 1070              		@ sp needed
 1071 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 1072              		.cfi_endproc
 1073              	.LFE43:
 1075              		.section	.text.LCD_ShowCharactor,"ax",%progbits
 1076              		.align	1
 1077              		.global	LCD_ShowCharactor
 1078              		.syntax unified
 1079              		.code	16
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	LCD_ShowCharactor:
 1084              	.LFB44:
 302:srcc/lcd.c    **** 	uint_8 i,j;
 1085              		.loc 1 302 0
 1086              		.cfi_startproc
 1087              		@ args = 4, pretend = 0, frame = 8
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              	.LVL151:
 1090 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1091              		.cfi_def_cfa_offset 20
 1092              		.cfi_offset 4, -20
 1093              		.cfi_offset 5, -16
 1094              		.cfi_offset 6, -12
 1095              		.cfi_offset 7, -8
 1096              		.cfi_offset 14, -4
 1097 0002 83B0     		sub	sp, sp, #12
 1098              		.cfi_def_cfa_offset 32
 1099 0004 0092     		str	r2, [sp]
 1100 0006 0193     		str	r3, [sp, #4]
 1101 0008 089F     		ldr	r7, [sp, #32]
 1102              	.LVL152:
 305:srcc/lcd.c    **** 	for(j=0;j<32;j++)
 1103              		.loc 1 305 0
 1104 000a 0B00     		movs	r3, r1
 1105              	.LVL153:
 1106 000c 0F33     		adds	r3, r3, #15
 1107 000e 9BB2     		uxth	r3, r3
 1108 0010 0200     		movs	r2, r0
 1109              	.LVL154:
 1110 0012 0F32     		adds	r2, r2, #15
 1111 0014 92B2     		uxth	r2, r2
 1112 0016 FFF7FEFF 		bl	Address_set
 1113              	.LVL155:
 1114 001a 3E00     		movs	r6, r7
 1115 001c 2036     		adds	r6, r6, #32
 310:srcc/lcd.c    **** 				LCD_WR_DATA(fontcolor);
 1116              		.loc 1 310 0
 1117 001e 0125     		movs	r5, #1
 1118 0020 10E0     		b	.L50
 1119              	.LVL156:
 1120              	.L51:
 314:srcc/lcd.c    **** 		}
 1121              		.loc 1 314 0
 1122 0022 0198     		ldr	r0, [sp, #4]
 1123 0024 FFF7FEFF 		bl	LCD_WR_DATA
 1124              	.LVL157:
 1125              	.L52:
 1126 0028 0134     		adds	r4, r4, #1
 1127              	.LVL158:
 308:srcc/lcd.c    **** 		{
 1128              		.loc 1 308 0 discriminator 2
 1129 002a 082C     		cmp	r4, #8
 1130 002c 07D0     		beq	.L56
 1131              	.L53:
 1132              	.LVL159:
 310:srcc/lcd.c    **** 				LCD_WR_DATA(fontcolor);
 1133              		.loc 1 310 0
 1134 002e 3B78     		ldrb	r3, [r7]
 1135 0030 2341     		asrs	r3, r3, r4
 1136 0032 1D42     		tst	r5, r3
 1137 0034 F5D0     		beq	.L51
 311:srcc/lcd.c    **** 			else
 1138              		.loc 1 311 0
 1139 0036 0098     		ldr	r0, [sp]
 1140 0038 FFF7FEFF 		bl	LCD_WR_DATA
 1141              	.LVL160:
 1142 003c F4E7     		b	.L52
 1143              	.LVL161:
 1144              	.L56:
 316:srcc/lcd.c    **** 	 }
 1145              		.loc 1 316 0 discriminator 2
 1146 003e 0137     		adds	r7, r7, #1
 1147              	.LVL162:
 306:srcc/lcd.c    **** 	{
 1148              		.loc 1 306 0 discriminator 2
 1149 0040 BE42     		cmp	r6, r7
 1150 0042 01D0     		beq	.L49
 1151              	.LVL163:
 1152              	.L50:
 302:srcc/lcd.c    **** 	uint_8 i,j;
 1153              		.loc 1 302 0
 1154 0044 0024     		movs	r4, #0
 1155 0046 F2E7     		b	.L53
 1156              	.LVL164:
 1157              	.L49:
 318:srcc/lcd.c    **** 
 1158              		.loc 1 318 0
 1159 0048 03B0     		add	sp, sp, #12
 1160              		@ sp needed
 1161              	.LVL165:
 1162 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 1163              		.cfi_endproc
 1164              	.LFE44:
 1166              		.section	.text.LCD_ShowString,"ax",%progbits
 1167              		.align	1
 1168              		.global	LCD_ShowString
 1169              		.syntax unified
 1170              		.code	16
 1171              		.thumb_func
 1172              		.fpu softvfp
 1174              	LCD_ShowString:
 1175              	.LFB45:
 331:srcc/lcd.c    **** 	uint_8 i,j,k;
 1176              		.loc 1 331 0
 1177              		.cfi_startproc
 1178              		@ args = 4, pretend = 0, frame = 16
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              	.LVL166:
 1181 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1182              		.cfi_def_cfa_offset 20
 1183              		.cfi_offset 4, -20
 1184              		.cfi_offset 5, -16
 1185              		.cfi_offset 6, -12
 1186              		.cfi_offset 7, -8
 1187              		.cfi_offset 14, -4
 1188 0002 DE46     		mov	lr, fp
 1189 0004 5746     		mov	r7, r10
 1190 0006 4E46     		mov	r6, r9
 1191 0008 4546     		mov	r5, r8
 1192 000a E0B5     		push	{r5, r6, r7, lr}
 1193              		.cfi_def_cfa_offset 36
 1194              		.cfi_offset 8, -36
 1195              		.cfi_offset 9, -32
 1196              		.cfi_offset 10, -28
 1197              		.cfi_offset 11, -24
 1198 000c 87B0     		sub	sp, sp, #28
 1199              		.cfi_def_cfa_offset 64
 1200 000e 8046     		mov	r8, r0
 1201 0010 0591     		str	r1, [sp, #20]
 1202 0012 0392     		str	r2, [sp, #12]
 1203 0014 0493     		str	r3, [sp, #16]
 1204 0016 109E     		ldr	r6, [sp, #64]
 1205              	.LVL167:
 335:srcc/lcd.c    **** 	{
 1206              		.loc 1 335 0
 1207 0018 3378     		ldrb	r3, [r6]
 1208              	.LVL168:
 1209 001a 002B     		cmp	r3, #0
 1210 001c 67D0     		beq	.L57
 334:srcc/lcd.c    **** 	while(*p != 0)
 1211              		.loc 1 334 0
 1212 001e 0023     		movs	r3, #0
 1213 0020 9B46     		mov	fp, r3
 341:srcc/lcd.c    **** 			temp+=(*p-0x20)*16;
 1214              		.loc 1 341 0
 1215 0022 0B00     		movs	r3, r1
 1216 0024 0F33     		adds	r3, r3, #15
 1217 0026 9BB2     		uxth	r3, r3
 1218 0028 9946     		mov	r9, r3
 1219 002a 36E0     		b	.L70
 1220              	.LVL169:
 1221              	.L77:
 1222 002c 5B46     		mov	r3, fp
 1223 002e D800     		lsls	r0, r3, #3
 1224 0030 4044     		add	r0, r0, r8
 1225 0032 80B2     		uxth	r0, r0
 1226 0034 C21D     		adds	r2, r0, #7
 1227 0036 92B2     		uxth	r2, r2
 1228 0038 4B46     		mov	r3, r9
 1229 003a 0599     		ldr	r1, [sp, #20]
 1230 003c FFF7FEFF 		bl	Address_set
 1231              	.LVL170:
 342:srcc/lcd.c    **** 			for(j=0;j<16;j++)
 1232              		.loc 1 342 0
 1233 0040 3578     		ldrb	r5, [r6]
 1234 0042 203D     		subs	r5, r5, #32
 1235 0044 2D01     		lsls	r5, r5, #4
 1236 0046 2D4B     		ldr	r3, .L79
 1237 0048 ED18     		adds	r5, r5, r3
 1238              	.LVL171:
 1239 004a 1023     		movs	r3, #16
 1240 004c 9A46     		mov	r10, r3
 1241 004e AA44     		add	r10, r10, r5
 347:srcc/lcd.c    **** 					{
 1242              		.loc 1 347 0
 1243 0050 0127     		movs	r7, #1
 1244 0052 10E0     		b	.L60
 1245              	.LVL172:
 1246              	.L61:
 353:srcc/lcd.c    **** 					}
 1247              		.loc 1 353 0
 1248 0054 0498     		ldr	r0, [sp, #16]
 1249 0056 FFF7FEFF 		bl	LCD_WR_DATA
 1250              	.LVL173:
 1251              	.L62:
 1252 005a 0134     		adds	r4, r4, #1
 1253              	.LVL174:
 345:srcc/lcd.c    **** 				{
 1254              		.loc 1 345 0 discriminator 2
 1255 005c 082C     		cmp	r4, #8
 1256 005e 07D0     		beq	.L75
 1257              	.L63:
 1258              	.LVL175:
 347:srcc/lcd.c    **** 					{
 1259              		.loc 1 347 0
 1260 0060 2B78     		ldrb	r3, [r5]
 1261 0062 2341     		asrs	r3, r3, r4
 1262 0064 1F42     		tst	r7, r3
 1263 0066 F5D0     		beq	.L61
 349:srcc/lcd.c    **** 					}
 1264              		.loc 1 349 0
 1265 0068 0398     		ldr	r0, [sp, #12]
 1266 006a FFF7FEFF 		bl	LCD_WR_DATA
 1267              	.LVL176:
 1268 006e F4E7     		b	.L62
 1269              	.LVL177:
 1270              	.L75:
 356:srcc/lcd.c    **** 			 }
 1271              		.loc 1 356 0 discriminator 2
 1272 0070 0135     		adds	r5, r5, #1
 1273              	.LVL178:
 343:srcc/lcd.c    **** 			{
 1274              		.loc 1 343 0 discriminator 2
 1275 0072 5545     		cmp	r5, r10
 1276 0074 01D0     		beq	.L64
 1277              	.LVL179:
 1278              	.L60:
 334:srcc/lcd.c    **** 	while(*p != 0)
 1279              		.loc 1 334 0
 1280 0076 0024     		movs	r4, #0
 1281 0078 F2E7     		b	.L63
 1282              	.LVL180:
 1283              	.L64:
 358:srcc/lcd.c    **** 		}
 1284              		.loc 1 358 0
 1285 007a 5B46     		mov	r3, fp
 1286 007c 0133     		adds	r3, r3, #1
 1287 007e DBB2     		uxtb	r3, r3
 1288 0080 9B46     		mov	fp, r3
 1289              	.LVL181:
 1290 0082 05E0     		b	.L65
 1291              	.LVL182:
 1292              	.L78:
 1293              	.LBB7:
 368:srcc/lcd.c    ****                  {
 1294              		.loc 1 368 0
 1295 0084 F02A     		cmp	r2, #240
 1296 0086 30D0     		beq	.L76
 1297              	.LVL183:
 1298              	.L68:
 1299              	.LBE7:
 374:srcc/lcd.c    **** 		}
 1300              		.loc 1 374 0
 1301 0088 5B46     		mov	r3, fp
 1302 008a 0133     		adds	r3, r3, #1
 1303 008c DBB2     		uxtb	r3, r3
 1304 008e 9B46     		mov	fp, r3
 1305              	.LVL184:
 1306              	.L65:
 376:srcc/lcd.c    **** 		__enable_irq();
 1307              		.loc 1 376 0
 1308 0090 0136     		adds	r6, r6, #1
 1309              	.LVL185:
 1310              	.LBB8:
 1311              	.LBB9:
 1312              		.file 2 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
   1:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /**************************************************************************//**
   2:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @version  V4.10
   5:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @date     18. March 2015
   6:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  *
   7:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  * @note
   8:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  *
   9:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  ******************************************************************************/
  10:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  12:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    All rights reserved.
  13:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****      specific prior written permission.
  23:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    *
  24:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  37:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  38:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  41:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  42:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   @{
  46:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  47:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  48:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* ARM armcc specific functions */
  50:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  51:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
  54:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  55:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  58:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Control Register
  59:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  60:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the Control Register.
  61:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  62:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Control Register value
  63:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  64:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  66:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regControl);
  68:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  69:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  70:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  71:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Control Register
  72:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  73:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  75:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  77:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  79:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regControl = control;
  81:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  82:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  83:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  84:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get IPSR Register
  85:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  86:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  88:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               IPSR Register value
  89:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
  90:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
  92:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regIPSR);
  94:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
  95:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  96:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  97:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get APSR Register
  98:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
  99:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 101:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               APSR Register value
 102:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 103:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 105:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regAPSR);
 107:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 108:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 109:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 110:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get xPSR Register
 111:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 112:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 114:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               xPSR Register value
 115:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 116:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 118:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regXPSR);
 120:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 121:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 122:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 123:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 125:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 127:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               PSP Register value
 128:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 129:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 131:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regProcessStackPointer);
 133:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 134:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 135:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 136:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 138:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 140:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 142:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 144:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 147:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 148:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 149:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 151:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 153:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               MSP Register value
 154:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 155:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 157:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regMainStackPointer);
 159:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 160:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 161:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 162:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 164:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 166:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 168:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 170:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 173:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 174:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 175:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Priority Mask
 176:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 177:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 179:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Priority Mask value
 180:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 181:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 183:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regPriMask);
 185:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 186:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 187:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 188:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Priority Mask
 189:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 190:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 192:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 194:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 196:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regPriMask = (priMask);
 198:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 199:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 200:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 201:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 202:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 203:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Enable FIQ
 204:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 205:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 208:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 210:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 211:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Disable FIQ
 212:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 213:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 216:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 218:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 219:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Base Priority
 220:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 221:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 223:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Base Priority register value
 224:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 225:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 227:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regBasePri);
 229:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 230:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 231:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 232:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Base Priority
 233:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 234:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 236:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 238:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 240:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 243:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 244:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 245:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Base Priority with condition
 246:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 247:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Base Priority register only if BASEPRI masking is 
 248:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     or the new value increases the BASEPRI priority level.
 249:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 250:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 251:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 252:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 253:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 254:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regBasePriMax      __ASM("basepri_max");
 255:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regBasePriMax = (basePri & 0xff);
 256:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 257:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 258:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 259:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get Fault Mask
 260:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 261:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 262:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 263:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Fault Mask register value
 264:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 265:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 266:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 267:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 268:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regFaultMask);
 269:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 270:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 271:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 272:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set Fault Mask
 273:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 274:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 275:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 276:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 277:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 278:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 279:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 280:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 281:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 282:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 283:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 284:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 285:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 286:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 287:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
 288:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 289:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Get FPSCR
 290:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 291:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 292:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 293:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 294:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 295:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 296:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 297:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 298:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 299:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   return(__regfpscr);
 300:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #else
 301:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****    return(0);
 302:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
 303:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 304:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 305:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 306:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Set FPSCR
 307:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 308:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 309:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 310:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 311:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 312:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 313:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 314:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 315:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 316:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __regfpscr = (fpscr);
 317:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif
 318:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 319:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 320:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
 321:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 322:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 323:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /* GNU gcc specific functions */
 325:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 326:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 328:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 331:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 333:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 1313              		.loc 2 333 0
 1314              		.syntax divided
 1315              	@ 333 "E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)
 1316 0092 62B6     		cpsie i
 1317              	@ 0 "" 2
 1318              		.thumb
 1319              		.syntax unified
 1320              	.LBE9:
 1321              	.LBE8:
 335:srcc/lcd.c    **** 	{
 1322              		.loc 1 335 0
 1323 0094 3378     		ldrb	r3, [r6]
 1324 0096 002B     		cmp	r3, #0
 1325 0098 29D0     		beq	.L57
 1326              	.LVL186:
 1327              	.L70:
 1328              	.LBB10:
 1329              	.LBB11:
 334:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** }
 335:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 336:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 337:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** 
 339:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****  */
 342:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h **** {
 344:E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)(A.50)-190816\02_Core\core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1330              		.loc 2 344 0
 1331              		.syntax divided
 1332              	@ 344 "E:\AHL-AN10-Kit01\AHL-AN10-Kit01(V2.0)-190817\04-Software\01-UE\USER\User_NB-IoT_Frame(KL36)
 1333 009a 72B6     		cpsid i
 1334              	@ 0 "" 2
 1335              		.thumb
 1336              		.syntax unified
 1337              	.LBE11:
 1338              	.LBE10:
 338:srcc/lcd.c    **** 		{
 1339              		.loc 1 338 0
 1340 009c 3378     		ldrb	r3, [r6]
 1341 009e 1A00     		movs	r2, r3
 1342 00a0 203A     		subs	r2, r2, #32
 1343 00a2 5E2A     		cmp	r2, #94
 1344 00a4 C2D9     		bls	.L77
 360:srcc/lcd.c    **** 		{
 1345              		.loc 1 360 0
 1346 00a6 7E2B     		cmp	r3, #126
 1347 00a8 F2D9     		bls	.L65
 1348              	.LBB12:
 365:srcc/lcd.c    ****             	 uint_8 c = GB_16[i].Index[0];
 1349              		.loc 1 365 0
 1350 00aa 7278     		ldrb	r2, [r6, #1]
 1351              	.LVL187:
 368:srcc/lcd.c    ****                  {
 1352              		.loc 1 368 0
 1353 00ac BD2B     		cmp	r3, #189
 1354 00ae E9D0     		beq	.L78
 1355              	.LVL188:
 1356 00b0 BA2B     		cmp	r3, #186
 1357 00b2 03D1     		bne	.L69
 1358 00b4 F92A     		cmp	r2, #249
 1359 00b6 E7D1     		bne	.L68
 366:srcc/lcd.c    ****             	 uint_8 d = GB_16[i].Index[1];
 1360              		.loc 1 366 0
 1361 00b8 0122     		movs	r2, #1
 1362 00ba 04E0     		b	.L67
 1363              	.L69:
 1364              	.LVL189:
 368:srcc/lcd.c    ****                  {
 1365              		.loc 1 368 0
 1366 00bc C22B     		cmp	r3, #194
 1367 00be E3D1     		bne	.L68
 368:srcc/lcd.c    ****                  {
 1368              		.loc 1 368 0 is_stmt 0 discriminator 1
 1369 00c0 AB2A     		cmp	r2, #171
 1370 00c2 E1D1     		bne	.L68
 366:srcc/lcd.c    ****             	 uint_8 d = GB_16[i].Index[1];
 1371              		.loc 1 366 0 is_stmt 1
 1372 00c4 A93A     		subs	r2, r2, #169
 1373              	.LVL190:
 1374              	.L67:
 370:srcc/lcd.c    ****                 	 break;
 1375              		.loc 1 370 0
 1376 00c6 5B46     		mov	r3, fp
 1377              	.LVL191:
 1378 00c8 D800     		lsls	r0, r3, #3
 1379 00ca 4044     		add	r0, r0, r8
 1380 00cc 80B2     		uxth	r0, r0
 1381 00ce 1301     		lsls	r3, r2, #4
 1382 00d0 9B18     		adds	r3, r3, r2
 1383 00d2 5B00     		lsls	r3, r3, #1
 1384 00d4 0233     		adds	r3, r3, #2
 1385 00d6 0A4A     		ldr	r2, .L79+4
 1386 00d8 9446     		mov	ip, r2
 1387 00da 6344     		add	r3, r3, ip
 1388 00dc 0093     		str	r3, [sp]
 1389              	.LVL192:
 1390 00de 049B     		ldr	r3, [sp, #16]
 1391 00e0 039A     		ldr	r2, [sp, #12]
 1392 00e2 0599     		ldr	r1, [sp, #20]
 1393 00e4 FFF7FEFF 		bl	LCD_ShowCharactor
 1394              	.LVL193:
 371:srcc/lcd.c    ****                  }
 1395              		.loc 1 371 0
 1396 00e8 CEE7     		b	.L68
 1397              	.LVL194:
 1398              	.L76:
 366:srcc/lcd.c    ****             	 uint_8 d = GB_16[i].Index[1];
 1399              		.loc 1 366 0
 1400 00ea 0022     		movs	r2, #0
 1401 00ec EBE7     		b	.L67
 1402              	.LVL195:
 1403              	.L57:
 1404              	.LBE12:
 379:srcc/lcd.c    **** 
 1405              		.loc 1 379 0
 1406 00ee 07B0     		add	sp, sp, #28
 1407              		@ sp needed
 1408              	.LVL196:
 1409 00f0 3CBC     		pop	{r2, r3, r4, r5}
 1410 00f2 9046     		mov	r8, r2
 1411 00f4 9946     		mov	r9, r3
 1412 00f6 A246     		mov	r10, r4
 1413 00f8 AB46     		mov	fp, r5
 1414 00fa F0BD     		pop	{r4, r5, r6, r7, pc}
 1415              	.L80:
 1416              		.align	2
 1417              	.L79:
 1418 00fc 00000000 		.word	nAsciiDot
 1419 0100 00000000 		.word	.LANCHOR0
 1420              		.cfi_endproc
 1421              	.LFE45:
 1423              		.section	.text.LCD_DrawSurface,"ax",%progbits
 1424              		.align	1
 1425              		.global	LCD_DrawSurface
 1426              		.syntax unified
 1427              		.code	16
 1428              		.thumb_func
 1429              		.fpu softvfp
 1431              	LCD_DrawSurface:
 1432              	.LFB48:
 469:srcc/lcd.c    **** 	uint_16 i,j;
 1433              		.loc 1 469 0
 1434              		.cfi_startproc
 1435              		@ args = 4, pretend = 0, frame = 8
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              	.LVL197:
 1438 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1439              		.cfi_def_cfa_offset 20
 1440              		.cfi_offset 4, -20
 1441              		.cfi_offset 5, -16
 1442              		.cfi_offset 6, -12
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
 1445 0002 D646     		mov	lr, r10
 1446 0004 00B5     		push	{lr}
 1447              		.cfi_def_cfa_offset 24
 1448              		.cfi_offset 10, -24
 1449 0006 82B0     		sub	sp, sp, #8
 1450              		.cfi_def_cfa_offset 32
 1451 0008 8246     		mov	r10, r0
 1452 000a 0D00     		movs	r5, r1
 1453 000c 1700     		movs	r7, r2
 1454 000e 1E00     		movs	r6, r3
 1455 0010 08AB     		add	r3, sp, #32
 1456              	.LVL198:
 1457 0012 1B88     		ldrh	r3, [r3]
 1458              	.LVL199:
 1459 0014 0093     		str	r3, [sp]
 471:srcc/lcd.c    **** 	for(i=y1;i<=y2;i++)
 1460              		.loc 1 471 0
 1461 0016 3300     		movs	r3, r6
 1462 0018 FFF7FEFF 		bl	Address_set
 1463              	.LVL200:
 474:srcc/lcd.c    **** 	}
 1464              		.loc 1 474 0
 1465 001c 5346     		mov	r3, r10
 1466 001e 0193     		str	r3, [sp, #4]
 472:srcc/lcd.c    **** 	{
 1467              		.loc 1 472 0
 1468 0020 B542     		cmp	r5, r6
 1469 0022 0ED9     		bls	.L82
 1470              	.L81:
 476:srcc/lcd.c    **** 
 1471              		.loc 1 476 0
 1472 0024 02B0     		add	sp, sp, #8
 1473              		@ sp needed
 1474              	.LVL201:
 1475 0026 04BC     		pop	{r2}
 1476 0028 9246     		mov	r10, r2
 1477 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1478              	.LVL202:
 1479              	.L84:
 474:srcc/lcd.c    **** 	}
 1480              		.loc 1 474 0 discriminator 3
 1481 002c 0098     		ldr	r0, [sp]
 1482 002e FFF7FEFF 		bl	LCD_WR_DATA
 1483              	.LVL203:
 1484 0032 0134     		adds	r4, r4, #1
 1485              	.LVL204:
 1486 0034 A4B2     		uxth	r4, r4
 1487              	.LVL205:
 1488 0036 A742     		cmp	r7, r4
 1489 0038 F8D2     		bcs	.L84
 1490              	.LVL206:
 1491              	.L85:
 472:srcc/lcd.c    **** 	{
 1492              		.loc 1 472 0 discriminator 2
 1493 003a 0135     		adds	r5, r5, #1
 1494              	.LVL207:
 1495 003c ADB2     		uxth	r5, r5
 1496              	.LVL208:
 1497 003e AE42     		cmp	r6, r5
 1498 0040 F0D3     		bcc	.L81
 1499              	.L82:
 1500              	.LVL209:
 474:srcc/lcd.c    **** 	}
 1501              		.loc 1 474 0
 1502 0042 019C     		ldr	r4, [sp, #4]
 1503 0044 BA45     		cmp	r10, r7
 1504 0046 F1D9     		bls	.L84
 1505 0048 F7E7     		b	.L85
 1506              		.cfi_endproc
 1507              	.LFE48:
 1509              		.section	.text.LCD_DrawPoint_big,"ax",%progbits
 1510              		.align	1
 1511              		.global	LCD_DrawPoint_big
 1512              		.syntax unified
 1513              		.code	16
 1514              		.thumb_func
 1515              		.fpu softvfp
 1517              	LCD_DrawPoint_big:
 1518              	.LFB41:
 234:srcc/lcd.c    **** 	LCD_DrawSurface(x-1,y-1,x+1,y+1,color);
 1519              		.loc 1 234 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 0
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              	.LVL210:
 1524 0000 20B5     		push	{r5, lr}
 1525              		.cfi_def_cfa_offset 8
 1526              		.cfi_offset 5, -8
 1527              		.cfi_offset 14, -4
 1528 0002 82B0     		sub	sp, sp, #8
 1529              		.cfi_def_cfa_offset 16
 1530 0004 1500     		movs	r5, r2
 235:srcc/lcd.c    **** }
 1531              		.loc 1 235 0
 1532 0006 4B1C     		adds	r3, r1, #1
 1533 0008 9BB2     		uxth	r3, r3
 1534 000a 421C     		adds	r2, r0, #1
 1535              	.LVL211:
 1536 000c 92B2     		uxth	r2, r2
 1537 000e 0139     		subs	r1, r1, #1
 1538              	.LVL212:
 1539 0010 89B2     		uxth	r1, r1
 1540 0012 0138     		subs	r0, r0, #1
 1541              	.LVL213:
 1542 0014 80B2     		uxth	r0, r0
 1543 0016 0095     		str	r5, [sp]
 1544 0018 FFF7FEFF 		bl	LCD_DrawSurface
 1545              	.LVL214:
 236:srcc/lcd.c    **** 
 1546              		.loc 1 236 0
 1547 001c 02B0     		add	sp, sp, #8
 1548              		@ sp needed
 1549 001e 20BD     		pop	{r5, pc}
 1550              		.cfi_endproc
 1551              	.LFE41:
 1553              		.section	.text.LCD_aotu,"ax",%progbits
 1554              		.align	1
 1555              		.global	LCD_aotu
 1556              		.syntax unified
 1557              		.code	16
 1558              		.thumb_func
 1559              		.fpu softvfp
 1561              	LCD_aotu:
 1562              	.LFB46:
 388:srcc/lcd.c    ****    uint_8 i,n;
 1563              		.loc 1 388 0
 1564              		.cfi_startproc
 1565              		@ args = 4, pretend = 0, frame = 8
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              	.LVL215:
 1568 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1569              		.cfi_def_cfa_offset 20
 1570              		.cfi_offset 4, -20
 1571              		.cfi_offset 5, -16
 1572              		.cfi_offset 6, -12
 1573              		.cfi_offset 7, -8
 1574              		.cfi_offset 14, -4
 1575 0002 CE46     		mov	lr, r9
 1576 0004 4746     		mov	r7, r8
 1577 0006 80B5     		push	{r7, lr}
 1578              		.cfi_def_cfa_offset 28
 1579              		.cfi_offset 8, -28
 1580              		.cfi_offset 9, -24
 1581 0008 85B0     		sub	sp, sp, #20
 1582              		.cfi_def_cfa_offset 48
 1583 000a 0F00     		movs	r7, r1
 1584 000c 1600     		movs	r6, r2
 1585 000e 1D00     		movs	r5, r3
 1586 0010 0CAB     		add	r3, sp, #48
 1587              	.LVL216:
 1588 0012 1B78     		ldrb	r3, [r3]
 1589              	.LVL217:
 1590 0014 9846     		mov	r8, r3
 1591              	.LVL218:
 392:srcc/lcd.c    ****    n=2;
 1592              		.loc 1 392 0
 1593 0016 2D4B     		ldr	r3, .L92
 1594 0018 0093     		str	r3, [sp]
 1595 001a 2B00     		movs	r3, r5
 1596 001c 0390     		str	r0, [sp, #12]
 1597 001e FFF7FEFF 		bl	LCD_DrawSurface
 1598              	.LVL219:
 395:srcc/lcd.c    ****    LCD_DrawLine(x,y,x,y1,color);
 1599              		.loc 1 395 0
 1600 0022 0024     		movs	r4, #0
 1601 0024 0094     		str	r4, [sp]
 1602 0026 3B00     		movs	r3, r7
 1603 0028 3200     		movs	r2, r6
 1604 002a 3900     		movs	r1, r7
 1605 002c 0398     		ldr	r0, [sp, #12]
 1606 002e FFF7FEFF 		bl	LCD_DrawLine
 1607              	.LVL220:
 396:srcc/lcd.c    ****    color = BLACK;
 1608              		.loc 1 396 0
 1609 0032 0094     		str	r4, [sp]
 1610 0034 2B00     		movs	r3, r5
 1611 0036 0398     		ldr	r0, [sp, #12]
 1612 0038 0200     		movs	r2, r0
 1613 003a 3900     		movs	r1, r7
 1614 003c FFF7FEFF 		bl	LCD_DrawLine
 1615              	.LVL221:
 398:srcc/lcd.c    ****    LCD_DrawLine(x,y1,x1,y1,color);
 1616              		.loc 1 398 0
 1617 0040 0094     		str	r4, [sp]
 1618 0042 2B00     		movs	r3, r5
 1619 0044 3200     		movs	r2, r6
 1620 0046 3900     		movs	r1, r7
 1621 0048 3000     		movs	r0, r6
 1622 004a FFF7FEFF 		bl	LCD_DrawLine
 1623              	.LVL222:
 399:srcc/lcd.c    **** 
 1624              		.loc 1 399 0
 1625 004e 0094     		str	r4, [sp]
 1626 0050 2B00     		movs	r3, r5
 1627 0052 3200     		movs	r2, r6
 1628 0054 2900     		movs	r1, r5
 1629 0056 039C     		ldr	r4, [sp, #12]
 1630 0058 2000     		movs	r0, r4
 1631 005a FFF7FEFF 		bl	LCD_DrawLine
 1632              	.LVL223:
 404:srcc/lcd.c    **** 
 1633              		.loc 1 404 0
 1634 005e 4346     		mov	r3, r8
 1635 0060 5A1E     		subs	r2, r3, #1
 1636 0062 9341     		sbcs	r3, r3, r2
 1637 0064 5B42     		rsbs	r3, r3, #0
 1638 0066 9BB2     		uxth	r3, r3
 1639 0068 9946     		mov	r9, r3
 1640              	.LVL224:
 406:srcc/lcd.c    ****    LCD_DrawLine(x+i,y+i,x+i,y1-i,color);
 1641              		.loc 1 406 0
 1642 006a 0134     		adds	r4, r4, #1
 1643 006c A4B2     		uxth	r4, r4
 1644 006e 0137     		adds	r7, r7, #1
 1645 0070 BFB2     		uxth	r7, r7
 1646 0072 013E     		subs	r6, r6, #1
 1647 0074 B6B2     		uxth	r6, r6
 1648 0076 0093     		str	r3, [sp]
 1649 0078 3B00     		movs	r3, r7
 1650              	.LVL225:
 1651 007a 3200     		movs	r2, r6
 1652 007c 3900     		movs	r1, r7
 1653 007e 2000     		movs	r0, r4
 1654 0080 FFF7FEFF 		bl	LCD_DrawLine
 1655              	.LVL226:
 407:srcc/lcd.c    **** 
 1656              		.loc 1 407 0
 1657 0084 013D     		subs	r5, r5, #1
 1658 0086 ADB2     		uxth	r5, r5
 1659 0088 4B46     		mov	r3, r9
 1660 008a 0093     		str	r3, [sp]
 1661 008c 2B00     		movs	r3, r5
 1662 008e 2200     		movs	r2, r4
 1663 0090 3900     		movs	r1, r7
 1664 0092 2000     		movs	r0, r4
 1665 0094 FFF7FEFF 		bl	LCD_DrawLine
 1666              	.LVL227:
 409:srcc/lcd.c    **** 
 1667              		.loc 1 409 0
 1668 0098 4346     		mov	r3, r8
 1669 009a 5A42     		rsbs	r2, r3, #0
 1670 009c 5341     		adcs	r3, r3, r2
 1671 009e 5B42     		rsbs	r3, r3, #0
 1672 00a0 9BB2     		uxth	r3, r3
 1673 00a2 9846     		mov	r8, r3
 1674              	.LVL228:
 411:srcc/lcd.c    ****    LCD_DrawLine(x+i,y1-i,x1-i,y1-i,color);
 1675              		.loc 1 411 0
 1676 00a4 0093     		str	r3, [sp]
 1677 00a6 2B00     		movs	r3, r5
 1678              	.LVL229:
 1679 00a8 3200     		movs	r2, r6
 1680 00aa 3900     		movs	r1, r7
 1681 00ac 3000     		movs	r0, r6
 1682 00ae FFF7FEFF 		bl	LCD_DrawLine
 1683              	.LVL230:
 412:srcc/lcd.c    ****    };
 1684              		.loc 1 412 0
 1685 00b2 4346     		mov	r3, r8
 1686 00b4 0093     		str	r3, [sp]
 1687 00b6 2B00     		movs	r3, r5
 1688 00b8 3200     		movs	r2, r6
 1689 00ba 2900     		movs	r1, r5
 1690 00bc 2000     		movs	r0, r4
 1691 00be FFF7FEFF 		bl	LCD_DrawLine
 1692              	.LVL231:
 414:srcc/lcd.c    **** 
 1693              		.loc 1 414 0
 1694 00c2 05B0     		add	sp, sp, #20
 1695              		@ sp needed
 1696              	.LVL232:
 1697 00c4 0CBC     		pop	{r2, r3}
 1698 00c6 9046     		mov	r8, r2
 1699 00c8 9946     		mov	r9, r3
 1700 00ca F0BD     		pop	{r4, r5, r6, r7, pc}
 1701              	.L93:
 1702              		.align	2
 1703              	.L92:
 1704 00cc 30840000 		.word	33840
 1705              		.cfi_endproc
 1706              	.LFE46:
 1708              		.global	cmdC
 1709              		.global	cmdB
 1710              		.global	cmdA
 1711              		.comm	bios_fun_point,4,4
 1712              		.section	.rodata.GB_16,"a",%progbits
 1713              		.align	2
 1714              		.set	.LANCHOR0,. + 0
 1717              	GB_16:
 1718 0000 BDF0     		.ascii	"\275\360"
 1719 0002 80       		.byte	-128
 1720 0003 00       		.byte	0
 1721 0004 80       		.byte	-128
 1722 0005 00       		.byte	0
 1723 0006 40       		.byte	64
 1724 0007 01       		.byte	1
 1725 0008 20       		.byte	32
 1726 0009 02       		.byte	2
 1727 000a 10       		.byte	16
 1728 000b 04       		.byte	4
 1729 000c 08       		.byte	8
 1730 000d 0A       		.byte	10
 1731 000e F4       		.byte	-12
 1732 000f 77       		.byte	119
 1733 0010 83       		.byte	-125
 1734 0011 20       		.byte	32
 1735 0012 80       		.byte	-128
 1736 0013 00       		.byte	0
 1737 0014 F8       		.byte	-8
 1738 0015 0F       		.byte	15
 1739 0016 80       		.byte	-128
 1740 0017 00       		.byte	0
 1741 0018 88       		.byte	-120
 1742 0019 08       		.byte	8
 1743 001a 90       		.byte	-112
 1744 001b 04       		.byte	4
 1745 001c A0       		.byte	-96
 1746 001d 12       		.byte	18
 1747 001e FE       		.byte	-2
 1748 001f 3F       		.byte	63
 1749 0020 00       		.byte	0
 1750 0021 00       		.byte	0
 1751 0022 BAF9     		.ascii	"\272\371"
 1752 0024 20       		.byte	32
 1753 0025 02       		.byte	2
 1754 0026 20       		.byte	32
 1755 0027 22       		.byte	34
 1756 0028 FF       		.byte	-1
 1757 0029 7F       		.byte	127
 1758 002a 20       		.byte	32
 1759 002b 02       		.byte	2
 1760 002c 10       		.byte	16
 1761 002d 3E       		.byte	62
 1762 002e 90       		.byte	-112
 1763 002f 22       		.byte	34
 1764 0030 FE       		.byte	-2
 1765 0031 23       		.byte	35
 1766 0032 10       		.byte	16
 1767 0033 3E       		.byte	62
 1768 0034 50       		.byte	80
 1769 0035 22       		.byte	34
 1770 0036 FC       		.byte	-4
 1771 0037 22       		.byte	34
 1772 0038 44       		.byte	68
 1773 0039 3E       		.byte	62
 1774 003a 44       		.byte	68
 1775 003b 22       		.byte	34
 1776 003c 44       		.byte	68
 1777 003d 22       		.byte	34
 1778 003e 7C       		.byte	124
 1779 003f 22       		.byte	34
 1780 0040 44       		.byte	68
 1781 0041 29       		.byte	41
 1782 0042 80       		.byte	-128
 1783 0043 10       		.byte	16
 1784 0044 C2AB     		.ascii	"\302\253"
 1785 0046 10       		.byte	16
 1786 0047 04       		.byte	4
 1787 0048 10       		.byte	16
 1788 0049 24       		.byte	36
 1789 004a FF       		.byte	-1
 1790 004b 7F       		.byte	127
 1791 004c 10       		.byte	16
 1792 004d 04       		.byte	4
 1793 004e 80       		.byte	-128
 1794 004f 10       		.byte	16
 1795 0050 FC       		.byte	-4
 1796 0051 3F       		.byte	63
 1797 0052 04       		.byte	4
 1798 0053 10       		.byte	16
 1799 0054 04       		.byte	4
 1800 0055 10       		.byte	16
 1801 0056 FC       		.byte	-4
 1802 0057 1F       		.byte	31
 1803 0058 04       		.byte	4
 1804 0059 10       		.byte	16
 1805 005a 04       		.byte	4
 1806 005b 00       		.byte	0
 1807 005c 04       		.byte	4
 1808 005d 00       		.byte	0
 1809 005e 04       		.byte	4
 1810 005f 00       		.byte	0
 1811 0060 02       		.byte	2
 1812 0061 00       		.byte	0
 1813 0062 02       		.byte	2
 1814 0063 00       		.byte	0
 1815 0064 01       		.byte	1
 1816 0065 00       		.byte	0
 1817              		.section	.rodata.cmdA,"a",%progbits
 1818              		.align	2
 1821              	cmdA:
 1822 0000 0F       		.byte	15
 1823 0001 20       		.byte	32
 1824 0002 1E       		.byte	30
 1825 0003 09       		.byte	9
 1826 0004 12       		.byte	18
 1827 0005 0B       		.byte	11
 1828 0006 50       		.byte	80
 1829 0007 BA       		.byte	-70
 1830 0008 44       		.byte	68
 1831 0009 09       		.byte	9
 1832 000a 14       		.byte	20
 1833 000b 05       		.byte	5
 1834 000c 23       		.byte	35
 1835 000d 21       		.byte	33
 1836 000e 00       		.byte	0
 1837              		.section	.rodata.cmdB,"a",%progbits
 1838              		.align	2
 1841              	cmdB:
 1842 0000 00       		.byte	0
 1843 0001 19       		.byte	25
 1844 0002 19       		.byte	25
 1845 0003 00       		.byte	0
 1846 0004 12       		.byte	18
 1847 0005 07       		.byte	7
 1848 0006 2D       		.byte	45
 1849 0007 28       		.byte	40
 1850 0008 3F       		.byte	63
 1851 0009 02       		.byte	2
 1852 000a 0A       		.byte	10
 1853 000b 08       		.byte	8
 1854 000c 25       		.byte	37
 1855 000d 2D       		.byte	45
 1856 000e 0F       		.byte	15
 1857              		.section	.rodata.cmdC,"a",%progbits
 1858              		.align	2
 1861              	cmdC:
 1862 0000 64       		.byte	100
 1863 0001 03       		.byte	3
 1864 0002 12       		.byte	18
 1865 0003 81       		.byte	-127
 1866              		.section	.rodata.nAsciiDot,"a",%progbits
 1867              		.align	2
 1870              	nAsciiDot:
 1871 0000 00       		.byte	0
 1872 0001 00       		.byte	0
 1873 0002 00       		.byte	0
 1874 0003 00       		.byte	0
 1875 0004 00       		.byte	0
 1876 0005 00       		.byte	0
 1877 0006 00       		.byte	0
 1878 0007 00       		.byte	0
 1879 0008 00       		.byte	0
 1880 0009 00       		.byte	0
 1881 000a 00       		.byte	0
 1882 000b 00       		.byte	0
 1883 000c 00       		.byte	0
 1884 000d 00       		.byte	0
 1885 000e 00       		.byte	0
 1886 000f 00       		.byte	0
 1887 0010 00       		.byte	0
 1888 0011 00       		.byte	0
 1889 0012 18       		.byte	24
 1890 0013 3C       		.byte	60
 1891 0014 3C       		.byte	60
 1892 0015 3C       		.byte	60
 1893 0016 18       		.byte	24
 1894 0017 18       		.byte	24
 1895 0018 18       		.byte	24
 1896 0019 00       		.byte	0
 1897 001a 18       		.byte	24
 1898 001b 18       		.byte	24
 1899 001c 00       		.byte	0
 1900 001d 00       		.byte	0
 1901 001e 00       		.byte	0
 1902 001f 00       		.byte	0
 1903 0020 00       		.byte	0
 1904 0021 66       		.byte	102
 1905 0022 66       		.byte	102
 1906 0023 66       		.byte	102
 1907 0024 24       		.byte	36
 1908 0025 00       		.byte	0
 1909 0026 00       		.byte	0
 1910 0027 00       		.byte	0
 1911 0028 00       		.byte	0
 1912 0029 00       		.byte	0
 1913 002a 00       		.byte	0
 1914 002b 00       		.byte	0
 1915 002c 00       		.byte	0
 1916 002d 00       		.byte	0
 1917 002e 00       		.byte	0
 1918 002f 00       		.byte	0
 1919 0030 00       		.byte	0
 1920 0031 00       		.byte	0
 1921 0032 00       		.byte	0
 1922 0033 36       		.byte	54
 1923 0034 36       		.byte	54
 1924 0035 7F       		.byte	127
 1925 0036 36       		.byte	54
 1926 0037 36       		.byte	54
 1927 0038 36       		.byte	54
 1928 0039 7F       		.byte	127
 1929 003a 36       		.byte	54
 1930 003b 36       		.byte	54
 1931 003c 00       		.byte	0
 1932 003d 00       		.byte	0
 1933 003e 00       		.byte	0
 1934 003f 00       		.byte	0
 1935 0040 18       		.byte	24
 1936 0041 18       		.byte	24
 1937 0042 3E       		.byte	62
 1938 0043 63       		.byte	99
 1939 0044 43       		.byte	67
 1940 0045 03       		.byte	3
 1941 0046 3E       		.byte	62
 1942 0047 60       		.byte	96
 1943 0048 61       		.byte	97
 1944 0049 63       		.byte	99
 1945 004a 3E       		.byte	62
 1946 004b 18       		.byte	24
 1947 004c 18       		.byte	24
 1948 004d 00       		.byte	0
 1949 004e 00       		.byte	0
 1950 004f 00       		.byte	0
 1951 0050 00       		.byte	0
 1952 0051 00       		.byte	0
 1953 0052 00       		.byte	0
 1954 0053 00       		.byte	0
 1955 0054 43       		.byte	67
 1956 0055 63       		.byte	99
 1957 0056 30       		.byte	48
 1958 0057 18       		.byte	24
 1959 0058 0C       		.byte	12
 1960 0059 06       		.byte	6
 1961 005a 63       		.byte	99
 1962 005b 61       		.byte	97
 1963 005c 00       		.byte	0
 1964 005d 00       		.byte	0
 1965 005e 00       		.byte	0
 1966 005f 00       		.byte	0
 1967 0060 00       		.byte	0
 1968 0061 00       		.byte	0
 1969 0062 1C       		.byte	28
 1970 0063 36       		.byte	54
 1971 0064 36       		.byte	54
 1972 0065 1C       		.byte	28
 1973 0066 6E       		.byte	110
 1974 0067 3B       		.byte	59
 1975 0068 33       		.byte	51
 1976 0069 33       		.byte	51
 1977 006a 33       		.byte	51
 1978 006b 6E       		.byte	110
 1979 006c 00       		.byte	0
 1980 006d 00       		.byte	0
 1981 006e 00       		.byte	0
 1982 006f 00       		.byte	0
 1983 0070 00       		.byte	0
 1984 0071 0C       		.byte	12
 1985 0072 0C       		.byte	12
 1986 0073 0C       		.byte	12
 1987 0074 06       		.byte	6
 1988 0075 00       		.byte	0
 1989 0076 00       		.byte	0
 1990 0077 00       		.byte	0
 1991 0078 00       		.byte	0
 1992 0079 00       		.byte	0
 1993 007a 00       		.byte	0
 1994 007b 00       		.byte	0
 1995 007c 00       		.byte	0
 1996 007d 00       		.byte	0
 1997 007e 00       		.byte	0
 1998 007f 00       		.byte	0
 1999 0080 00       		.byte	0
 2000 0081 00       		.byte	0
 2001 0082 30       		.byte	48
 2002 0083 18       		.byte	24
 2003 0084 0C       		.byte	12
 2004 0085 0C       		.byte	12
 2005 0086 0C       		.byte	12
 2006 0087 0C       		.byte	12
 2007 0088 0C       		.byte	12
 2008 0089 0C       		.byte	12
 2009 008a 18       		.byte	24
 2010 008b 30       		.byte	48
 2011 008c 00       		.byte	0
 2012 008d 00       		.byte	0
 2013 008e 00       		.byte	0
 2014 008f 00       		.byte	0
 2015 0090 00       		.byte	0
 2016 0091 00       		.byte	0
 2017 0092 0C       		.byte	12
 2018 0093 18       		.byte	24
 2019 0094 30       		.byte	48
 2020 0095 30       		.byte	48
 2021 0096 30       		.byte	48
 2022 0097 30       		.byte	48
 2023 0098 30       		.byte	48
 2024 0099 30       		.byte	48
 2025 009a 18       		.byte	24
 2026 009b 0C       		.byte	12
 2027 009c 00       		.byte	0
 2028 009d 00       		.byte	0
 2029 009e 00       		.byte	0
 2030 009f 00       		.byte	0
 2031 00a0 00       		.byte	0
 2032 00a1 00       		.byte	0
 2033 00a2 00       		.byte	0
 2034 00a3 00       		.byte	0
 2035 00a4 00       		.byte	0
 2036 00a5 66       		.byte	102
 2037 00a6 3C       		.byte	60
 2038 00a7 FF       		.byte	-1
 2039 00a8 3C       		.byte	60
 2040 00a9 66       		.byte	102
 2041 00aa 00       		.byte	0
 2042 00ab 00       		.byte	0
 2043 00ac 00       		.byte	0
 2044 00ad 00       		.byte	0
 2045 00ae 00       		.byte	0
 2046 00af 00       		.byte	0
 2047 00b0 00       		.byte	0
 2048 00b1 00       		.byte	0
 2049 00b2 00       		.byte	0
 2050 00b3 00       		.byte	0
 2051 00b4 00       		.byte	0
 2052 00b5 18       		.byte	24
 2053 00b6 18       		.byte	24
 2054 00b7 7E       		.byte	126
 2055 00b8 18       		.byte	24
 2056 00b9 18       		.byte	24
 2057 00ba 00       		.byte	0
 2058 00bb 00       		.byte	0
 2059 00bc 00       		.byte	0
 2060 00bd 00       		.byte	0
 2061 00be 00       		.byte	0
 2062 00bf 00       		.byte	0
 2063 00c0 00       		.byte	0
 2064 00c1 00       		.byte	0
 2065 00c2 00       		.byte	0
 2066 00c3 00       		.byte	0
 2067 00c4 00       		.byte	0
 2068 00c5 00       		.byte	0
 2069 00c6 00       		.byte	0
 2070 00c7 00       		.byte	0
 2071 00c8 00       		.byte	0
 2072 00c9 18       		.byte	24
 2073 00ca 18       		.byte	24
 2074 00cb 18       		.byte	24
 2075 00cc 0C       		.byte	12
 2076 00cd 00       		.byte	0
 2077 00ce 00       		.byte	0
 2078 00cf 00       		.byte	0
 2079 00d0 00       		.byte	0
 2080 00d1 00       		.byte	0
 2081 00d2 00       		.byte	0
 2082 00d3 00       		.byte	0
 2083 00d4 00       		.byte	0
 2084 00d5 00       		.byte	0
 2085 00d6 00       		.byte	0
 2086 00d7 7F       		.byte	127
 2087 00d8 00       		.byte	0
 2088 00d9 00       		.byte	0
 2089 00da 00       		.byte	0
 2090 00db 00       		.byte	0
 2091 00dc 00       		.byte	0
 2092 00dd 00       		.byte	0
 2093 00de 00       		.byte	0
 2094 00df 00       		.byte	0
 2095 00e0 00       		.byte	0
 2096 00e1 00       		.byte	0
 2097 00e2 00       		.byte	0
 2098 00e3 00       		.byte	0
 2099 00e4 00       		.byte	0
 2100 00e5 00       		.byte	0
 2101 00e6 00       		.byte	0
 2102 00e7 00       		.byte	0
 2103 00e8 00       		.byte	0
 2104 00e9 00       		.byte	0
 2105 00ea 18       		.byte	24
 2106 00eb 18       		.byte	24
 2107 00ec 00       		.byte	0
 2108 00ed 00       		.byte	0
 2109 00ee 00       		.byte	0
 2110 00ef 00       		.byte	0
 2111 00f0 00       		.byte	0
 2112 00f1 00       		.byte	0
 2113 00f2 00       		.byte	0
 2114 00f3 00       		.byte	0
 2115 00f4 40       		.byte	64
 2116 00f5 60       		.byte	96
 2117 00f6 30       		.byte	48
 2118 00f7 18       		.byte	24
 2119 00f8 0C       		.byte	12
 2120 00f9 06       		.byte	6
 2121 00fa 03       		.byte	3
 2122 00fb 01       		.byte	1
 2123 00fc 00       		.byte	0
 2124 00fd 00       		.byte	0
 2125 00fe 00       		.byte	0
 2126 00ff 00       		.byte	0
 2127 0100 00       		.byte	0
 2128 0101 00       		.byte	0
 2129 0102 3E       		.byte	62
 2130 0103 63       		.byte	99
 2131 0104 63       		.byte	99
 2132 0105 73       		.byte	115
 2133 0106 6B       		.byte	107
 2134 0107 6B       		.byte	107
 2135 0108 67       		.byte	103
 2136 0109 63       		.byte	99
 2137 010a 63       		.byte	99
 2138 010b 3E       		.byte	62
 2139 010c 00       		.byte	0
 2140 010d 00       		.byte	0
 2141 010e 00       		.byte	0
 2142 010f 00       		.byte	0
 2143 0110 00       		.byte	0
 2144 0111 00       		.byte	0
 2145 0112 18       		.byte	24
 2146 0113 1C       		.byte	28
 2147 0114 1E       		.byte	30
 2148 0115 18       		.byte	24
 2149 0116 18       		.byte	24
 2150 0117 18       		.byte	24
 2151 0118 18       		.byte	24
 2152 0119 18       		.byte	24
 2153 011a 18       		.byte	24
 2154 011b 7E       		.byte	126
 2155 011c 00       		.byte	0
 2156 011d 00       		.byte	0
 2157 011e 00       		.byte	0
 2158 011f 00       		.byte	0
 2159 0120 00       		.byte	0
 2160 0121 00       		.byte	0
 2161 0122 3E       		.byte	62
 2162 0123 63       		.byte	99
 2163 0124 60       		.byte	96
 2164 0125 30       		.byte	48
 2165 0126 18       		.byte	24
 2166 0127 0C       		.byte	12
 2167 0128 06       		.byte	6
 2168 0129 03       		.byte	3
 2169 012a 63       		.byte	99
 2170 012b 7F       		.byte	127
 2171 012c 00       		.byte	0
 2172 012d 00       		.byte	0
 2173 012e 00       		.byte	0
 2174 012f 00       		.byte	0
 2175 0130 00       		.byte	0
 2176 0131 00       		.byte	0
 2177 0132 3E       		.byte	62
 2178 0133 63       		.byte	99
 2179 0134 60       		.byte	96
 2180 0135 60       		.byte	96
 2181 0136 3C       		.byte	60
 2182 0137 60       		.byte	96
 2183 0138 60       		.byte	96
 2184 0139 60       		.byte	96
 2185 013a 63       		.byte	99
 2186 013b 3E       		.byte	62
 2187 013c 00       		.byte	0
 2188 013d 00       		.byte	0
 2189 013e 00       		.byte	0
 2190 013f 00       		.byte	0
 2191 0140 00       		.byte	0
 2192 0141 00       		.byte	0
 2193 0142 30       		.byte	48
 2194 0143 38       		.byte	56
 2195 0144 3C       		.byte	60
 2196 0145 36       		.byte	54
 2197 0146 33       		.byte	51
 2198 0147 7F       		.byte	127
 2199 0148 30       		.byte	48
 2200 0149 30       		.byte	48
 2201 014a 30       		.byte	48
 2202 014b 78       		.byte	120
 2203 014c 00       		.byte	0
 2204 014d 00       		.byte	0
 2205 014e 00       		.byte	0
 2206 014f 00       		.byte	0
 2207 0150 00       		.byte	0
 2208 0151 00       		.byte	0
 2209 0152 7F       		.byte	127
 2210 0153 03       		.byte	3
 2211 0154 03       		.byte	3
 2212 0155 03       		.byte	3
 2213 0156 3F       		.byte	63
 2214 0157 70       		.byte	112
 2215 0158 60       		.byte	96
 2216 0159 60       		.byte	96
 2217 015a 63       		.byte	99
 2218 015b 3E       		.byte	62
 2219 015c 00       		.byte	0
 2220 015d 00       		.byte	0
 2221 015e 00       		.byte	0
 2222 015f 00       		.byte	0
 2223 0160 00       		.byte	0
 2224 0161 00       		.byte	0
 2225 0162 1C       		.byte	28
 2226 0163 06       		.byte	6
 2227 0164 03       		.byte	3
 2228 0165 03       		.byte	3
 2229 0166 3F       		.byte	63
 2230 0167 63       		.byte	99
 2231 0168 63       		.byte	99
 2232 0169 63       		.byte	99
 2233 016a 63       		.byte	99
 2234 016b 3E       		.byte	62
 2235 016c 00       		.byte	0
 2236 016d 00       		.byte	0
 2237 016e 00       		.byte	0
 2238 016f 00       		.byte	0
 2239 0170 00       		.byte	0
 2240 0171 00       		.byte	0
 2241 0172 7F       		.byte	127
 2242 0173 63       		.byte	99
 2243 0174 60       		.byte	96
 2244 0175 60       		.byte	96
 2245 0176 30       		.byte	48
 2246 0177 18       		.byte	24
 2247 0178 0C       		.byte	12
 2248 0179 0C       		.byte	12
 2249 017a 0C       		.byte	12
 2250 017b 0C       		.byte	12
 2251 017c 00       		.byte	0
 2252 017d 00       		.byte	0
 2253 017e 00       		.byte	0
 2254 017f 00       		.byte	0
 2255 0180 00       		.byte	0
 2256 0181 00       		.byte	0
 2257 0182 3E       		.byte	62
 2258 0183 63       		.byte	99
 2259 0184 63       		.byte	99
 2260 0185 63       		.byte	99
 2261 0186 3E       		.byte	62
 2262 0187 63       		.byte	99
 2263 0188 63       		.byte	99
 2264 0189 63       		.byte	99
 2265 018a 63       		.byte	99
 2266 018b 3E       		.byte	62
 2267 018c 00       		.byte	0
 2268 018d 00       		.byte	0
 2269 018e 00       		.byte	0
 2270 018f 00       		.byte	0
 2271 0190 00       		.byte	0
 2272 0191 00       		.byte	0
 2273 0192 3E       		.byte	62
 2274 0193 63       		.byte	99
 2275 0194 63       		.byte	99
 2276 0195 63       		.byte	99
 2277 0196 7E       		.byte	126
 2278 0197 60       		.byte	96
 2279 0198 60       		.byte	96
 2280 0199 60       		.byte	96
 2281 019a 30       		.byte	48
 2282 019b 1E       		.byte	30
 2283 019c 00       		.byte	0
 2284 019d 00       		.byte	0
 2285 019e 00       		.byte	0
 2286 019f 00       		.byte	0
 2287 01a0 00       		.byte	0
 2288 01a1 00       		.byte	0
 2289 01a2 00       		.byte	0
 2290 01a3 00       		.byte	0
 2291 01a4 18       		.byte	24
 2292 01a5 18       		.byte	24
 2293 01a6 00       		.byte	0
 2294 01a7 00       		.byte	0
 2295 01a8 00       		.byte	0
 2296 01a9 18       		.byte	24
 2297 01aa 18       		.byte	24
 2298 01ab 00       		.byte	0
 2299 01ac 00       		.byte	0
 2300 01ad 00       		.byte	0
 2301 01ae 00       		.byte	0
 2302 01af 00       		.byte	0
 2303 01b0 00       		.byte	0
 2304 01b1 00       		.byte	0
 2305 01b2 00       		.byte	0
 2306 01b3 00       		.byte	0
 2307 01b4 18       		.byte	24
 2308 01b5 18       		.byte	24
 2309 01b6 00       		.byte	0
 2310 01b7 00       		.byte	0
 2311 01b8 00       		.byte	0
 2312 01b9 18       		.byte	24
 2313 01ba 18       		.byte	24
 2314 01bb 0C       		.byte	12
 2315 01bc 00       		.byte	0
 2316 01bd 00       		.byte	0
 2317 01be 00       		.byte	0
 2318 01bf 00       		.byte	0
 2319 01c0 00       		.byte	0
 2320 01c1 00       		.byte	0
 2321 01c2 00       		.byte	0
 2322 01c3 60       		.byte	96
 2323 01c4 30       		.byte	48
 2324 01c5 18       		.byte	24
 2325 01c6 0C       		.byte	12
 2326 01c7 06       		.byte	6
 2327 01c8 0C       		.byte	12
 2328 01c9 18       		.byte	24
 2329 01ca 30       		.byte	48
 2330 01cb 60       		.byte	96
 2331 01cc 00       		.byte	0
 2332 01cd 00       		.byte	0
 2333 01ce 00       		.byte	0
 2334 01cf 00       		.byte	0
 2335 01d0 00       		.byte	0
 2336 01d1 00       		.byte	0
 2337 01d2 00       		.byte	0
 2338 01d3 00       		.byte	0
 2339 01d4 00       		.byte	0
 2340 01d5 00       		.byte	0
 2341 01d6 7F       		.byte	127
 2342 01d7 00       		.byte	0
 2343 01d8 00       		.byte	0
 2344 01d9 7F       		.byte	127
 2345 01da 00       		.byte	0
 2346 01db 00       		.byte	0
 2347 01dc 00       		.byte	0
 2348 01dd 00       		.byte	0
 2349 01de 00       		.byte	0
 2350 01df 00       		.byte	0
 2351 01e0 00       		.byte	0
 2352 01e1 00       		.byte	0
 2353 01e2 00       		.byte	0
 2354 01e3 06       		.byte	6
 2355 01e4 0C       		.byte	12
 2356 01e5 18       		.byte	24
 2357 01e6 30       		.byte	48
 2358 01e7 60       		.byte	96
 2359 01e8 30       		.byte	48
 2360 01e9 18       		.byte	24
 2361 01ea 0C       		.byte	12
 2362 01eb 06       		.byte	6
 2363 01ec 00       		.byte	0
 2364 01ed 00       		.byte	0
 2365 01ee 00       		.byte	0
 2366 01ef 00       		.byte	0
 2367 01f0 00       		.byte	0
 2368 01f1 00       		.byte	0
 2369 01f2 3E       		.byte	62
 2370 01f3 63       		.byte	99
 2371 01f4 63       		.byte	99
 2372 01f5 30       		.byte	48
 2373 01f6 18       		.byte	24
 2374 01f7 18       		.byte	24
 2375 01f8 18       		.byte	24
 2376 01f9 00       		.byte	0
 2377 01fa 18       		.byte	24
 2378 01fb 18       		.byte	24
 2379 01fc 00       		.byte	0
 2380 01fd 00       		.byte	0
 2381 01fe 00       		.byte	0
 2382 01ff 00       		.byte	0
 2383 0200 00       		.byte	0
 2384 0201 00       		.byte	0
 2385 0202 00       		.byte	0
 2386 0203 3E       		.byte	62
 2387 0204 63       		.byte	99
 2388 0205 63       		.byte	99
 2389 0206 7B       		.byte	123
 2390 0207 7B       		.byte	123
 2391 0208 7B       		.byte	123
 2392 0209 3B       		.byte	59
 2393 020a 03       		.byte	3
 2394 020b 3E       		.byte	62
 2395 020c 00       		.byte	0
 2396 020d 00       		.byte	0
 2397 020e 00       		.byte	0
 2398 020f 00       		.byte	0
 2399 0210 00       		.byte	0
 2400 0211 00       		.byte	0
 2401 0212 08       		.byte	8
 2402 0213 1C       		.byte	28
 2403 0214 36       		.byte	54
 2404 0215 63       		.byte	99
 2405 0216 63       		.byte	99
 2406 0217 7F       		.byte	127
 2407 0218 63       		.byte	99
 2408 0219 63       		.byte	99
 2409 021a 63       		.byte	99
 2410 021b 63       		.byte	99
 2411 021c 00       		.byte	0
 2412 021d 00       		.byte	0
 2413 021e 00       		.byte	0
 2414 021f 00       		.byte	0
 2415 0220 00       		.byte	0
 2416 0221 00       		.byte	0
 2417 0222 3F       		.byte	63
 2418 0223 66       		.byte	102
 2419 0224 66       		.byte	102
 2420 0225 66       		.byte	102
 2421 0226 3E       		.byte	62
 2422 0227 66       		.byte	102
 2423 0228 66       		.byte	102
 2424 0229 66       		.byte	102
 2425 022a 66       		.byte	102
 2426 022b 3F       		.byte	63
 2427 022c 00       		.byte	0
 2428 022d 00       		.byte	0
 2429 022e 00       		.byte	0
 2430 022f 00       		.byte	0
 2431 0230 00       		.byte	0
 2432 0231 00       		.byte	0
 2433 0232 3C       		.byte	60
 2434 0233 66       		.byte	102
 2435 0234 43       		.byte	67
 2436 0235 03       		.byte	3
 2437 0236 03       		.byte	3
 2438 0237 03       		.byte	3
 2439 0238 03       		.byte	3
 2440 0239 43       		.byte	67
 2441 023a 66       		.byte	102
 2442 023b 3C       		.byte	60
 2443 023c 00       		.byte	0
 2444 023d 00       		.byte	0
 2445 023e 00       		.byte	0
 2446 023f 00       		.byte	0
 2447 0240 00       		.byte	0
 2448 0241 00       		.byte	0
 2449 0242 1F       		.byte	31
 2450 0243 36       		.byte	54
 2451 0244 66       		.byte	102
 2452 0245 66       		.byte	102
 2453 0246 66       		.byte	102
 2454 0247 66       		.byte	102
 2455 0248 66       		.byte	102
 2456 0249 66       		.byte	102
 2457 024a 36       		.byte	54
 2458 024b 1F       		.byte	31
 2459 024c 00       		.byte	0
 2460 024d 00       		.byte	0
 2461 024e 00       		.byte	0
 2462 024f 00       		.byte	0
 2463 0250 00       		.byte	0
 2464 0251 00       		.byte	0
 2465 0252 7F       		.byte	127
 2466 0253 66       		.byte	102
 2467 0254 46       		.byte	70
 2468 0255 16       		.byte	22
 2469 0256 1E       		.byte	30
 2470 0257 16       		.byte	22
 2471 0258 06       		.byte	6
 2472 0259 46       		.byte	70
 2473 025a 66       		.byte	102
 2474 025b 7F       		.byte	127
 2475 025c 00       		.byte	0
 2476 025d 00       		.byte	0
 2477 025e 00       		.byte	0
 2478 025f 00       		.byte	0
 2479 0260 00       		.byte	0
 2480 0261 00       		.byte	0
 2481 0262 7F       		.byte	127
 2482 0263 66       		.byte	102
 2483 0264 46       		.byte	70
 2484 0265 16       		.byte	22
 2485 0266 1E       		.byte	30
 2486 0267 16       		.byte	22
 2487 0268 06       		.byte	6
 2488 0269 06       		.byte	6
 2489 026a 06       		.byte	6
 2490 026b 0F       		.byte	15
 2491 026c 00       		.byte	0
 2492 026d 00       		.byte	0
 2493 026e 00       		.byte	0
 2494 026f 00       		.byte	0
 2495 0270 00       		.byte	0
 2496 0271 00       		.byte	0
 2497 0272 3C       		.byte	60
 2498 0273 66       		.byte	102
 2499 0274 43       		.byte	67
 2500 0275 03       		.byte	3
 2501 0276 03       		.byte	3
 2502 0277 7B       		.byte	123
 2503 0278 63       		.byte	99
 2504 0279 63       		.byte	99
 2505 027a 66       		.byte	102
 2506 027b 5C       		.byte	92
 2507 027c 00       		.byte	0
 2508 027d 00       		.byte	0
 2509 027e 00       		.byte	0
 2510 027f 00       		.byte	0
 2511 0280 00       		.byte	0
 2512 0281 00       		.byte	0
 2513 0282 63       		.byte	99
 2514 0283 63       		.byte	99
 2515 0284 63       		.byte	99
 2516 0285 63       		.byte	99
 2517 0286 7F       		.byte	127
 2518 0287 63       		.byte	99
 2519 0288 63       		.byte	99
 2520 0289 63       		.byte	99
 2521 028a 63       		.byte	99
 2522 028b 63       		.byte	99
 2523 028c 00       		.byte	0
 2524 028d 00       		.byte	0
 2525 028e 00       		.byte	0
 2526 028f 00       		.byte	0
 2527 0290 00       		.byte	0
 2528 0291 00       		.byte	0
 2529 0292 3C       		.byte	60
 2530 0293 18       		.byte	24
 2531 0294 18       		.byte	24
 2532 0295 18       		.byte	24
 2533 0296 18       		.byte	24
 2534 0297 18       		.byte	24
 2535 0298 18       		.byte	24
 2536 0299 18       		.byte	24
 2537 029a 18       		.byte	24
 2538 029b 3C       		.byte	60
 2539 029c 00       		.byte	0
 2540 029d 00       		.byte	0
 2541 029e 00       		.byte	0
 2542 029f 00       		.byte	0
 2543 02a0 00       		.byte	0
 2544 02a1 00       		.byte	0
 2545 02a2 78       		.byte	120
 2546 02a3 30       		.byte	48
 2547 02a4 30       		.byte	48
 2548 02a5 30       		.byte	48
 2549 02a6 30       		.byte	48
 2550 02a7 30       		.byte	48
 2551 02a8 33       		.byte	51
 2552 02a9 33       		.byte	51
 2553 02aa 33       		.byte	51
 2554 02ab 1E       		.byte	30
 2555 02ac 00       		.byte	0
 2556 02ad 00       		.byte	0
 2557 02ae 00       		.byte	0
 2558 02af 00       		.byte	0
 2559 02b0 00       		.byte	0
 2560 02b1 00       		.byte	0
 2561 02b2 67       		.byte	103
 2562 02b3 66       		.byte	102
 2563 02b4 36       		.byte	54
 2564 02b5 36       		.byte	54
 2565 02b6 1E       		.byte	30
 2566 02b7 1E       		.byte	30
 2567 02b8 36       		.byte	54
 2568 02b9 66       		.byte	102
 2569 02ba 66       		.byte	102
 2570 02bb 67       		.byte	103
 2571 02bc 00       		.byte	0
 2572 02bd 00       		.byte	0
 2573 02be 00       		.byte	0
 2574 02bf 00       		.byte	0
 2575 02c0 00       		.byte	0
 2576 02c1 00       		.byte	0
 2577 02c2 0F       		.byte	15
 2578 02c3 06       		.byte	6
 2579 02c4 06       		.byte	6
 2580 02c5 06       		.byte	6
 2581 02c6 06       		.byte	6
 2582 02c7 06       		.byte	6
 2583 02c8 06       		.byte	6
 2584 02c9 46       		.byte	70
 2585 02ca 66       		.byte	102
 2586 02cb 7F       		.byte	127
 2587 02cc 00       		.byte	0
 2588 02cd 00       		.byte	0
 2589 02ce 00       		.byte	0
 2590 02cf 00       		.byte	0
 2591 02d0 00       		.byte	0
 2592 02d1 00       		.byte	0
 2593 02d2 63       		.byte	99
 2594 02d3 77       		.byte	119
 2595 02d4 7F       		.byte	127
 2596 02d5 7F       		.byte	127
 2597 02d6 6B       		.byte	107
 2598 02d7 63       		.byte	99
 2599 02d8 63       		.byte	99
 2600 02d9 63       		.byte	99
 2601 02da 63       		.byte	99
 2602 02db 63       		.byte	99
 2603 02dc 00       		.byte	0
 2604 02dd 00       		.byte	0
 2605 02de 00       		.byte	0
 2606 02df 00       		.byte	0
 2607 02e0 00       		.byte	0
 2608 02e1 00       		.byte	0
 2609 02e2 63       		.byte	99
 2610 02e3 67       		.byte	103
 2611 02e4 6F       		.byte	111
 2612 02e5 7F       		.byte	127
 2613 02e6 7B       		.byte	123
 2614 02e7 73       		.byte	115
 2615 02e8 63       		.byte	99
 2616 02e9 63       		.byte	99
 2617 02ea 63       		.byte	99
 2618 02eb 63       		.byte	99
 2619 02ec 00       		.byte	0
 2620 02ed 00       		.byte	0
 2621 02ee 00       		.byte	0
 2622 02ef 00       		.byte	0
 2623 02f0 00       		.byte	0
 2624 02f1 00       		.byte	0
 2625 02f2 1C       		.byte	28
 2626 02f3 36       		.byte	54
 2627 02f4 63       		.byte	99
 2628 02f5 63       		.byte	99
 2629 02f6 63       		.byte	99
 2630 02f7 63       		.byte	99
 2631 02f8 63       		.byte	99
 2632 02f9 63       		.byte	99
 2633 02fa 36       		.byte	54
 2634 02fb 1C       		.byte	28
 2635 02fc 00       		.byte	0
 2636 02fd 00       		.byte	0
 2637 02fe 00       		.byte	0
 2638 02ff 00       		.byte	0
 2639 0300 00       		.byte	0
 2640 0301 00       		.byte	0
 2641 0302 3F       		.byte	63
 2642 0303 66       		.byte	102
 2643 0304 66       		.byte	102
 2644 0305 66       		.byte	102
 2645 0306 3E       		.byte	62
 2646 0307 06       		.byte	6
 2647 0308 06       		.byte	6
 2648 0309 06       		.byte	6
 2649 030a 06       		.byte	6
 2650 030b 0F       		.byte	15
 2651 030c 00       		.byte	0
 2652 030d 00       		.byte	0
 2653 030e 00       		.byte	0
 2654 030f 00       		.byte	0
 2655 0310 00       		.byte	0
 2656 0311 00       		.byte	0
 2657 0312 3E       		.byte	62
 2658 0313 63       		.byte	99
 2659 0314 63       		.byte	99
 2660 0315 63       		.byte	99
 2661 0316 63       		.byte	99
 2662 0317 63       		.byte	99
 2663 0318 63       		.byte	99
 2664 0319 6B       		.byte	107
 2665 031a 7B       		.byte	123
 2666 031b 3E       		.byte	62
 2667 031c 30       		.byte	48
 2668 031d 70       		.byte	112
 2669 031e 00       		.byte	0
 2670 031f 00       		.byte	0
 2671 0320 00       		.byte	0
 2672 0321 00       		.byte	0
 2673 0322 3F       		.byte	63
 2674 0323 66       		.byte	102
 2675 0324 66       		.byte	102
 2676 0325 66       		.byte	102
 2677 0326 3E       		.byte	62
 2678 0327 36       		.byte	54
 2679 0328 66       		.byte	102
 2680 0329 66       		.byte	102
 2681 032a 66       		.byte	102
 2682 032b 67       		.byte	103
 2683 032c 00       		.byte	0
 2684 032d 00       		.byte	0
 2685 032e 00       		.byte	0
 2686 032f 00       		.byte	0
 2687 0330 00       		.byte	0
 2688 0331 00       		.byte	0
 2689 0332 3E       		.byte	62
 2690 0333 63       		.byte	99
 2691 0334 63       		.byte	99
 2692 0335 06       		.byte	6
 2693 0336 1C       		.byte	28
 2694 0337 30       		.byte	48
 2695 0338 60       		.byte	96
 2696 0339 63       		.byte	99
 2697 033a 63       		.byte	99
 2698 033b 3E       		.byte	62
 2699 033c 00       		.byte	0
 2700 033d 00       		.byte	0
 2701 033e 00       		.byte	0
 2702 033f 00       		.byte	0
 2703 0340 00       		.byte	0
 2704 0341 00       		.byte	0
 2705 0342 7E       		.byte	126
 2706 0343 7E       		.byte	126
 2707 0344 5A       		.byte	90
 2708 0345 18       		.byte	24
 2709 0346 18       		.byte	24
 2710 0347 18       		.byte	24
 2711 0348 18       		.byte	24
 2712 0349 18       		.byte	24
 2713 034a 18       		.byte	24
 2714 034b 3C       		.byte	60
 2715 034c 00       		.byte	0
 2716 034d 00       		.byte	0
 2717 034e 00       		.byte	0
 2718 034f 00       		.byte	0
 2719 0350 00       		.byte	0
 2720 0351 00       		.byte	0
 2721 0352 63       		.byte	99
 2722 0353 63       		.byte	99
 2723 0354 63       		.byte	99
 2724 0355 63       		.byte	99
 2725 0356 63       		.byte	99
 2726 0357 63       		.byte	99
 2727 0358 63       		.byte	99
 2728 0359 63       		.byte	99
 2729 035a 63       		.byte	99
 2730 035b 3E       		.byte	62
 2731 035c 00       		.byte	0
 2732 035d 00       		.byte	0
 2733 035e 00       		.byte	0
 2734 035f 00       		.byte	0
 2735 0360 00       		.byte	0
 2736 0361 00       		.byte	0
 2737 0362 63       		.byte	99
 2738 0363 63       		.byte	99
 2739 0364 63       		.byte	99
 2740 0365 63       		.byte	99
 2741 0366 63       		.byte	99
 2742 0367 63       		.byte	99
 2743 0368 63       		.byte	99
 2744 0369 36       		.byte	54
 2745 036a 1C       		.byte	28
 2746 036b 08       		.byte	8
 2747 036c 00       		.byte	0
 2748 036d 00       		.byte	0
 2749 036e 00       		.byte	0
 2750 036f 00       		.byte	0
 2751 0370 00       		.byte	0
 2752 0371 00       		.byte	0
 2753 0372 63       		.byte	99
 2754 0373 63       		.byte	99
 2755 0374 63       		.byte	99
 2756 0375 63       		.byte	99
 2757 0376 63       		.byte	99
 2758 0377 6B       		.byte	107
 2759 0378 6B       		.byte	107
 2760 0379 7F       		.byte	127
 2761 037a 36       		.byte	54
 2762 037b 36       		.byte	54
 2763 037c 00       		.byte	0
 2764 037d 00       		.byte	0
 2765 037e 00       		.byte	0
 2766 037f 00       		.byte	0
 2767 0380 00       		.byte	0
 2768 0381 00       		.byte	0
 2769 0382 63       		.byte	99
 2770 0383 63       		.byte	99
 2771 0384 36       		.byte	54
 2772 0385 36       		.byte	54
 2773 0386 1C       		.byte	28
 2774 0387 1C       		.byte	28
 2775 0388 36       		.byte	54
 2776 0389 36       		.byte	54
 2777 038a 63       		.byte	99
 2778 038b 63       		.byte	99
 2779 038c 00       		.byte	0
 2780 038d 00       		.byte	0
 2781 038e 00       		.byte	0
 2782 038f 00       		.byte	0
 2783 0390 00       		.byte	0
 2784 0391 00       		.byte	0
 2785 0392 66       		.byte	102
 2786 0393 66       		.byte	102
 2787 0394 66       		.byte	102
 2788 0395 66       		.byte	102
 2789 0396 3C       		.byte	60
 2790 0397 18       		.byte	24
 2791 0398 18       		.byte	24
 2792 0399 18       		.byte	24
 2793 039a 18       		.byte	24
 2794 039b 3C       		.byte	60
 2795 039c 00       		.byte	0
 2796 039d 00       		.byte	0
 2797 039e 00       		.byte	0
 2798 039f 00       		.byte	0
 2799 03a0 00       		.byte	0
 2800 03a1 00       		.byte	0
 2801 03a2 7F       		.byte	127
 2802 03a3 63       		.byte	99
 2803 03a4 61       		.byte	97
 2804 03a5 30       		.byte	48
 2805 03a6 18       		.byte	24
 2806 03a7 0C       		.byte	12
 2807 03a8 06       		.byte	6
 2808 03a9 43       		.byte	67
 2809 03aa 63       		.byte	99
 2810 03ab 7F       		.byte	127
 2811 03ac 00       		.byte	0
 2812 03ad 00       		.byte	0
 2813 03ae 00       		.byte	0
 2814 03af 00       		.byte	0
 2815 03b0 00       		.byte	0
 2816 03b1 00       		.byte	0
 2817 03b2 3C       		.byte	60
 2818 03b3 0C       		.byte	12
 2819 03b4 0C       		.byte	12
 2820 03b5 0C       		.byte	12
 2821 03b6 0C       		.byte	12
 2822 03b7 0C       		.byte	12
 2823 03b8 0C       		.byte	12
 2824 03b9 0C       		.byte	12
 2825 03ba 0C       		.byte	12
 2826 03bb 3C       		.byte	60
 2827 03bc 00       		.byte	0
 2828 03bd 00       		.byte	0
 2829 03be 00       		.byte	0
 2830 03bf 00       		.byte	0
 2831 03c0 00       		.byte	0
 2832 03c1 00       		.byte	0
 2833 03c2 00       		.byte	0
 2834 03c3 01       		.byte	1
 2835 03c4 03       		.byte	3
 2836 03c5 07       		.byte	7
 2837 03c6 0E       		.byte	14
 2838 03c7 1C       		.byte	28
 2839 03c8 38       		.byte	56
 2840 03c9 70       		.byte	112
 2841 03ca 60       		.byte	96
 2842 03cb 40       		.byte	64
 2843 03cc 00       		.byte	0
 2844 03cd 00       		.byte	0
 2845 03ce 00       		.byte	0
 2846 03cf 00       		.byte	0
 2847 03d0 00       		.byte	0
 2848 03d1 00       		.byte	0
 2849 03d2 3C       		.byte	60
 2850 03d3 30       		.byte	48
 2851 03d4 30       		.byte	48
 2852 03d5 30       		.byte	48
 2853 03d6 30       		.byte	48
 2854 03d7 30       		.byte	48
 2855 03d8 30       		.byte	48
 2856 03d9 30       		.byte	48
 2857 03da 30       		.byte	48
 2858 03db 3C       		.byte	60
 2859 03dc 00       		.byte	0
 2860 03dd 00       		.byte	0
 2861 03de 00       		.byte	0
 2862 03df 00       		.byte	0
 2863 03e0 08       		.byte	8
 2864 03e1 1C       		.byte	28
 2865 03e2 36       		.byte	54
 2866 03e3 63       		.byte	99
 2867 03e4 00       		.byte	0
 2868 03e5 00       		.byte	0
 2869 03e6 00       		.byte	0
 2870 03e7 00       		.byte	0
 2871 03e8 00       		.byte	0
 2872 03e9 00       		.byte	0
 2873 03ea 00       		.byte	0
 2874 03eb 00       		.byte	0
 2875 03ec 00       		.byte	0
 2876 03ed 00       		.byte	0
 2877 03ee 00       		.byte	0
 2878 03ef 00       		.byte	0
 2879 03f0 00       		.byte	0
 2880 03f1 00       		.byte	0
 2881 03f2 00       		.byte	0
 2882 03f3 00       		.byte	0
 2883 03f4 00       		.byte	0
 2884 03f5 00       		.byte	0
 2885 03f6 00       		.byte	0
 2886 03f7 00       		.byte	0
 2887 03f8 00       		.byte	0
 2888 03f9 00       		.byte	0
 2889 03fa 00       		.byte	0
 2890 03fb 00       		.byte	0
 2891 03fc 00       		.byte	0
 2892 03fd FF       		.byte	-1
 2893 03fe 00       		.byte	0
 2894 03ff 00       		.byte	0
 2895 0400 0C       		.byte	12
 2896 0401 0C       		.byte	12
 2897 0402 18       		.byte	24
 2898 0403 00       		.byte	0
 2899 0404 00       		.byte	0
 2900 0405 00       		.byte	0
 2901 0406 00       		.byte	0
 2902 0407 00       		.byte	0
 2903 0408 00       		.byte	0
 2904 0409 00       		.byte	0
 2905 040a 00       		.byte	0
 2906 040b 00       		.byte	0
 2907 040c 00       		.byte	0
 2908 040d 00       		.byte	0
 2909 040e 00       		.byte	0
 2910 040f 00       		.byte	0
 2911 0410 00       		.byte	0
 2912 0411 00       		.byte	0
 2913 0412 00       		.byte	0
 2914 0413 00       		.byte	0
 2915 0414 00       		.byte	0
 2916 0415 1E       		.byte	30
 2917 0416 30       		.byte	48
 2918 0417 3E       		.byte	62
 2919 0418 33       		.byte	51
 2920 0419 33       		.byte	51
 2921 041a 33       		.byte	51
 2922 041b 6E       		.byte	110
 2923 041c 00       		.byte	0
 2924 041d 00       		.byte	0
 2925 041e 00       		.byte	0
 2926 041f 00       		.byte	0
 2927 0420 00       		.byte	0
 2928 0421 00       		.byte	0
 2929 0422 07       		.byte	7
 2930 0423 06       		.byte	6
 2931 0424 06       		.byte	6
 2932 0425 1E       		.byte	30
 2933 0426 36       		.byte	54
 2934 0427 66       		.byte	102
 2935 0428 66       		.byte	102
 2936 0429 66       		.byte	102
 2937 042a 66       		.byte	102
 2938 042b 3B       		.byte	59
 2939 042c 00       		.byte	0
 2940 042d 00       		.byte	0
 2941 042e 00       		.byte	0
 2942 042f 00       		.byte	0
 2943 0430 00       		.byte	0
 2944 0431 00       		.byte	0
 2945 0432 00       		.byte	0
 2946 0433 00       		.byte	0
 2947 0434 00       		.byte	0
 2948 0435 3E       		.byte	62
 2949 0436 63       		.byte	99
 2950 0437 03       		.byte	3
 2951 0438 03       		.byte	3
 2952 0439 03       		.byte	3
 2953 043a 63       		.byte	99
 2954 043b 3E       		.byte	62
 2955 043c 00       		.byte	0
 2956 043d 00       		.byte	0
 2957 043e 00       		.byte	0
 2958 043f 00       		.byte	0
 2959 0440 00       		.byte	0
 2960 0441 00       		.byte	0
 2961 0442 38       		.byte	56
 2962 0443 30       		.byte	48
 2963 0444 30       		.byte	48
 2964 0445 3C       		.byte	60
 2965 0446 36       		.byte	54
 2966 0447 33       		.byte	51
 2967 0448 33       		.byte	51
 2968 0449 33       		.byte	51
 2969 044a 33       		.byte	51
 2970 044b 6E       		.byte	110
 2971 044c 00       		.byte	0
 2972 044d 00       		.byte	0
 2973 044e 00       		.byte	0
 2974 044f 00       		.byte	0
 2975 0450 00       		.byte	0
 2976 0451 00       		.byte	0
 2977 0452 00       		.byte	0
 2978 0453 00       		.byte	0
 2979 0454 00       		.byte	0
 2980 0455 3E       		.byte	62
 2981 0456 63       		.byte	99
 2982 0457 7F       		.byte	127
 2983 0458 03       		.byte	3
 2984 0459 03       		.byte	3
 2985 045a 63       		.byte	99
 2986 045b 3E       		.byte	62
 2987 045c 00       		.byte	0
 2988 045d 00       		.byte	0
 2989 045e 00       		.byte	0
 2990 045f 00       		.byte	0
 2991 0460 00       		.byte	0
 2992 0461 00       		.byte	0
 2993 0462 1C       		.byte	28
 2994 0463 36       		.byte	54
 2995 0464 26       		.byte	38
 2996 0465 06       		.byte	6
 2997 0466 0F       		.byte	15
 2998 0467 06       		.byte	6
 2999 0468 06       		.byte	6
 3000 0469 06       		.byte	6
 3001 046a 06       		.byte	6
 3002 046b 0F       		.byte	15
 3003 046c 00       		.byte	0
 3004 046d 00       		.byte	0
 3005 046e 00       		.byte	0
 3006 046f 00       		.byte	0
 3007 0470 00       		.byte	0
 3008 0471 00       		.byte	0
 3009 0472 00       		.byte	0
 3010 0473 00       		.byte	0
 3011 0474 00       		.byte	0
 3012 0475 6E       		.byte	110
 3013 0476 33       		.byte	51
 3014 0477 33       		.byte	51
 3015 0478 33       		.byte	51
 3016 0479 33       		.byte	51
 3017 047a 33       		.byte	51
 3018 047b 3E       		.byte	62
 3019 047c 30       		.byte	48
 3020 047d 33       		.byte	51
 3021 047e 1E       		.byte	30
 3022 047f 00       		.byte	0
 3023 0480 00       		.byte	0
 3024 0481 00       		.byte	0
 3025 0482 07       		.byte	7
 3026 0483 06       		.byte	6
 3027 0484 06       		.byte	6
 3028 0485 36       		.byte	54
 3029 0486 6E       		.byte	110
 3030 0487 66       		.byte	102
 3031 0488 66       		.byte	102
 3032 0489 66       		.byte	102
 3033 048a 66       		.byte	102
 3034 048b 67       		.byte	103
 3035 048c 00       		.byte	0
 3036 048d 00       		.byte	0
 3037 048e 00       		.byte	0
 3038 048f 00       		.byte	0
 3039 0490 00       		.byte	0
 3040 0491 00       		.byte	0
 3041 0492 18       		.byte	24
 3042 0493 18       		.byte	24
 3043 0494 00       		.byte	0
 3044 0495 1C       		.byte	28
 3045 0496 18       		.byte	24
 3046 0497 18       		.byte	24
 3047 0498 18       		.byte	24
 3048 0499 18       		.byte	24
 3049 049a 18       		.byte	24
 3050 049b 3C       		.byte	60
 3051 049c 00       		.byte	0
 3052 049d 00       		.byte	0
 3053 049e 00       		.byte	0
 3054 049f 00       		.byte	0
 3055 04a0 00       		.byte	0
 3056 04a1 00       		.byte	0
 3057 04a2 60       		.byte	96
 3058 04a3 60       		.byte	96
 3059 04a4 00       		.byte	0
 3060 04a5 70       		.byte	112
 3061 04a6 60       		.byte	96
 3062 04a7 60       		.byte	96
 3063 04a8 60       		.byte	96
 3064 04a9 60       		.byte	96
 3065 04aa 60       		.byte	96
 3066 04ab 60       		.byte	96
 3067 04ac 66       		.byte	102
 3068 04ad 66       		.byte	102
 3069 04ae 3C       		.byte	60
 3070 04af 00       		.byte	0
 3071 04b0 00       		.byte	0
 3072 04b1 00       		.byte	0
 3073 04b2 07       		.byte	7
 3074 04b3 06       		.byte	6
 3075 04b4 06       		.byte	6
 3076 04b5 66       		.byte	102
 3077 04b6 36       		.byte	54
 3078 04b7 1E       		.byte	30
 3079 04b8 1E       		.byte	30
 3080 04b9 36       		.byte	54
 3081 04ba 66       		.byte	102
 3082 04bb 67       		.byte	103
 3083 04bc 00       		.byte	0
 3084 04bd 00       		.byte	0
 3085 04be 00       		.byte	0
 3086 04bf 00       		.byte	0
 3087 04c0 00       		.byte	0
 3088 04c1 00       		.byte	0
 3089 04c2 1C       		.byte	28
 3090 04c3 18       		.byte	24
 3091 04c4 18       		.byte	24
 3092 04c5 18       		.byte	24
 3093 04c6 18       		.byte	24
 3094 04c7 18       		.byte	24
 3095 04c8 18       		.byte	24
 3096 04c9 18       		.byte	24
 3097 04ca 18       		.byte	24
 3098 04cb 3C       		.byte	60
 3099 04cc 00       		.byte	0
 3100 04cd 00       		.byte	0
 3101 04ce 00       		.byte	0
 3102 04cf 00       		.byte	0
 3103 04d0 00       		.byte	0
 3104 04d1 00       		.byte	0
 3105 04d2 00       		.byte	0
 3106 04d3 00       		.byte	0
 3107 04d4 00       		.byte	0
 3108 04d5 37       		.byte	55
 3109 04d6 7F       		.byte	127
 3110 04d7 6B       		.byte	107
 3111 04d8 6B       		.byte	107
 3112 04d9 6B       		.byte	107
 3113 04da 6B       		.byte	107
 3114 04db 6B       		.byte	107
 3115 04dc 00       		.byte	0
 3116 04dd 00       		.byte	0
 3117 04de 00       		.byte	0
 3118 04df 00       		.byte	0
 3119 04e0 00       		.byte	0
 3120 04e1 00       		.byte	0
 3121 04e2 00       		.byte	0
 3122 04e3 00       		.byte	0
 3123 04e4 00       		.byte	0
 3124 04e5 3B       		.byte	59
 3125 04e6 66       		.byte	102
 3126 04e7 66       		.byte	102
 3127 04e8 66       		.byte	102
 3128 04e9 66       		.byte	102
 3129 04ea 66       		.byte	102
 3130 04eb 66       		.byte	102
 3131 04ec 00       		.byte	0
 3132 04ed 00       		.byte	0
 3133 04ee 00       		.byte	0
 3134 04ef 00       		.byte	0
 3135 04f0 00       		.byte	0
 3136 04f1 00       		.byte	0
 3137 04f2 00       		.byte	0
 3138 04f3 00       		.byte	0
 3139 04f4 00       		.byte	0
 3140 04f5 3E       		.byte	62
 3141 04f6 63       		.byte	99
 3142 04f7 63       		.byte	99
 3143 04f8 63       		.byte	99
 3144 04f9 63       		.byte	99
 3145 04fa 63       		.byte	99
 3146 04fb 3E       		.byte	62
 3147 04fc 00       		.byte	0
 3148 04fd 00       		.byte	0
 3149 04fe 00       		.byte	0
 3150 04ff 00       		.byte	0
 3151 0500 00       		.byte	0
 3152 0501 00       		.byte	0
 3153 0502 00       		.byte	0
 3154 0503 00       		.byte	0
 3155 0504 00       		.byte	0
 3156 0505 3B       		.byte	59
 3157 0506 66       		.byte	102
 3158 0507 66       		.byte	102
 3159 0508 66       		.byte	102
 3160 0509 66       		.byte	102
 3161 050a 66       		.byte	102
 3162 050b 3E       		.byte	62
 3163 050c 06       		.byte	6
 3164 050d 06       		.byte	6
 3165 050e 0F       		.byte	15
 3166 050f 00       		.byte	0
 3167 0510 00       		.byte	0
 3168 0511 00       		.byte	0
 3169 0512 00       		.byte	0
 3170 0513 00       		.byte	0
 3171 0514 00       		.byte	0
 3172 0515 6E       		.byte	110
 3173 0516 33       		.byte	51
 3174 0517 33       		.byte	51
 3175 0518 33       		.byte	51
 3176 0519 33       		.byte	51
 3177 051a 33       		.byte	51
 3178 051b 3E       		.byte	62
 3179 051c 30       		.byte	48
 3180 051d 30       		.byte	48
 3181 051e 78       		.byte	120
 3182 051f 00       		.byte	0
 3183 0520 00       		.byte	0
 3184 0521 00       		.byte	0
 3185 0522 00       		.byte	0
 3186 0523 00       		.byte	0
 3187 0524 00       		.byte	0
 3188 0525 3B       		.byte	59
 3189 0526 6E       		.byte	110
 3190 0527 46       		.byte	70
 3191 0528 06       		.byte	6
 3192 0529 06       		.byte	6
 3193 052a 06       		.byte	6
 3194 052b 0F       		.byte	15
 3195 052c 00       		.byte	0
 3196 052d 00       		.byte	0
 3197 052e 00       		.byte	0
 3198 052f 00       		.byte	0
 3199 0530 00       		.byte	0
 3200 0531 00       		.byte	0
 3201 0532 00       		.byte	0
 3202 0533 00       		.byte	0
 3203 0534 00       		.byte	0
 3204 0535 3E       		.byte	62
 3205 0536 63       		.byte	99
 3206 0537 06       		.byte	6
 3207 0538 1C       		.byte	28
 3208 0539 30       		.byte	48
 3209 053a 63       		.byte	99
 3210 053b 3E       		.byte	62
 3211 053c 00       		.byte	0
 3212 053d 00       		.byte	0
 3213 053e 00       		.byte	0
 3214 053f 00       		.byte	0
 3215 0540 00       		.byte	0
 3216 0541 00       		.byte	0
 3217 0542 08       		.byte	8
 3218 0543 0C       		.byte	12
 3219 0544 0C       		.byte	12
 3220 0545 3F       		.byte	63
 3221 0546 0C       		.byte	12
 3222 0547 0C       		.byte	12
 3223 0548 0C       		.byte	12
 3224 0549 0C       		.byte	12
 3225 054a 6C       		.byte	108
 3226 054b 38       		.byte	56
 3227 054c 00       		.byte	0
 3228 054d 00       		.byte	0
 3229 054e 00       		.byte	0
 3230 054f 00       		.byte	0
 3231 0550 00       		.byte	0
 3232 0551 00       		.byte	0
 3233 0552 00       		.byte	0
 3234 0553 00       		.byte	0
 3235 0554 00       		.byte	0
 3236 0555 33       		.byte	51
 3237 0556 33       		.byte	51
 3238 0557 33       		.byte	51
 3239 0558 33       		.byte	51
 3240 0559 33       		.byte	51
 3241 055a 33       		.byte	51
 3242 055b 6E       		.byte	110
 3243 055c 00       		.byte	0
 3244 055d 00       		.byte	0
 3245 055e 00       		.byte	0
 3246 055f 00       		.byte	0
 3247 0560 00       		.byte	0
 3248 0561 00       		.byte	0
 3249 0562 00       		.byte	0
 3250 0563 00       		.byte	0
 3251 0564 00       		.byte	0
 3252 0565 66       		.byte	102
 3253 0566 66       		.byte	102
 3254 0567 66       		.byte	102
 3255 0568 66       		.byte	102
 3256 0569 66       		.byte	102
 3257 056a 3C       		.byte	60
 3258 056b 18       		.byte	24
 3259 056c 00       		.byte	0
 3260 056d 00       		.byte	0
 3261 056e 00       		.byte	0
 3262 056f 00       		.byte	0
 3263 0570 00       		.byte	0
 3264 0571 00       		.byte	0
 3265 0572 00       		.byte	0
 3266 0573 00       		.byte	0
 3267 0574 00       		.byte	0
 3268 0575 63       		.byte	99
 3269 0576 63       		.byte	99
 3270 0577 63       		.byte	99
 3271 0578 6B       		.byte	107
 3272 0579 6B       		.byte	107
 3273 057a 7F       		.byte	127
 3274 057b 36       		.byte	54
 3275 057c 00       		.byte	0
 3276 057d 00       		.byte	0
 3277 057e 00       		.byte	0
 3278 057f 00       		.byte	0
 3279 0580 00       		.byte	0
 3280 0581 00       		.byte	0
 3281 0582 00       		.byte	0
 3282 0583 00       		.byte	0
 3283 0584 00       		.byte	0
 3284 0585 63       		.byte	99
 3285 0586 36       		.byte	54
 3286 0587 1C       		.byte	28
 3287 0588 1C       		.byte	28
 3288 0589 1C       		.byte	28
 3289 058a 36       		.byte	54
 3290 058b 63       		.byte	99
 3291 058c 00       		.byte	0
 3292 058d 00       		.byte	0
 3293 058e 00       		.byte	0
 3294 058f 00       		.byte	0
 3295 0590 00       		.byte	0
 3296 0591 00       		.byte	0
 3297 0592 00       		.byte	0
 3298 0593 00       		.byte	0
 3299 0594 00       		.byte	0
 3300 0595 63       		.byte	99
 3301 0596 63       		.byte	99
 3302 0597 63       		.byte	99
 3303 0598 63       		.byte	99
 3304 0599 63       		.byte	99
 3305 059a 63       		.byte	99
 3306 059b 7E       		.byte	126
 3307 059c 60       		.byte	96
 3308 059d 30       		.byte	48
 3309 059e 1F       		.byte	31
 3310 059f 00       		.byte	0
 3311 05a0 00       		.byte	0
 3312 05a1 00       		.byte	0
 3313 05a2 00       		.byte	0
 3314 05a3 00       		.byte	0
 3315 05a4 00       		.byte	0
 3316 05a5 7F       		.byte	127
 3317 05a6 33       		.byte	51
 3318 05a7 18       		.byte	24
 3319 05a8 0C       		.byte	12
 3320 05a9 06       		.byte	6
 3321 05aa 63       		.byte	99
 3322 05ab 7F       		.byte	127
 3323 05ac 00       		.byte	0
 3324 05ad 00       		.byte	0
 3325 05ae 00       		.byte	0
 3326 05af 00       		.byte	0
 3327 05b0 00       		.byte	0
 3328 05b1 00       		.byte	0
 3329 05b2 70       		.byte	112
 3330 05b3 18       		.byte	24
 3331 05b4 18       		.byte	24
 3332 05b5 18       		.byte	24
 3333 05b6 0E       		.byte	14
 3334 05b7 18       		.byte	24
 3335 05b8 18       		.byte	24
 3336 05b9 18       		.byte	24
 3337 05ba 18       		.byte	24
 3338 05bb 70       		.byte	112
 3339 05bc 00       		.byte	0
 3340 05bd 00       		.byte	0
 3341 05be 00       		.byte	0
 3342 05bf 00       		.byte	0
 3343 05c0 00       		.byte	0
 3344 05c1 00       		.byte	0
 3345 05c2 18       		.byte	24
 3346 05c3 18       		.byte	24
 3347 05c4 18       		.byte	24
 3348 05c5 18       		.byte	24
 3349 05c6 00       		.byte	0
 3350 05c7 18       		.byte	24
 3351 05c8 18       		.byte	24
 3352 05c9 18       		.byte	24
 3353 05ca 18       		.byte	24
 3354 05cb 18       		.byte	24
 3355 05cc 00       		.byte	0
 3356 05cd 00       		.byte	0
 3357 05ce 00       		.byte	0
 3358 05cf 00       		.byte	0
 3359 05d0 00       		.byte	0
 3360 05d1 00       		.byte	0
 3361 05d2 0E       		.byte	14
 3362 05d3 18       		.byte	24
 3363 05d4 18       		.byte	24
 3364 05d5 18       		.byte	24
 3365 05d6 70       		.byte	112
 3366 05d7 18       		.byte	24
 3367 05d8 18       		.byte	24
 3368 05d9 18       		.byte	24
 3369 05da 18       		.byte	24
 3370 05db 0E       		.byte	14
 3371 05dc 00       		.byte	0
 3372 05dd 00       		.byte	0
 3373 05de 00       		.byte	0
 3374 05df 00       		.byte	0
 3375 05e0 00       		.byte	0
 3376 05e1 00       		.byte	0
 3377 05e2 6E       		.byte	110
 3378 05e3 3B       		.byte	59
 3379 05e4 00       		.byte	0
 3380 05e5 00       		.byte	0
 3381 05e6 00       		.byte	0
 3382 05e7 00       		.byte	0
 3383 05e8 00       		.byte	0
 3384 05e9 00       		.byte	0
 3385 05ea 00       		.byte	0
 3386 05eb 00       		.byte	0
 3387 05ec 00       		.byte	0
 3388 05ed 00       		.byte	0
 3389 05ee 00       		.byte	0
 3390 05ef 00       		.byte	0
 3391 05f0 00       		.byte	0
 3392 05f1 00       		.byte	0
 3393 05f2 00       		.byte	0
 3394 05f3 00       		.byte	0
 3395 05f4 08       		.byte	8
 3396 05f5 1C       		.byte	28
 3397 05f6 36       		.byte	54
 3398 05f7 63       		.byte	99
 3399 05f8 63       		.byte	99
 3400 05f9 63       		.byte	99
 3401 05fa 7F       		.byte	127
 3402 05fb 00       		.byte	0
 3403 05fc 00       		.byte	0
 3404 05fd 00       		.byte	0
 3405 05fe 00       		.byte	0
 3406 05ff 00       		.byte	0
 3407              		.text
 3408              	.Letext0:
 3409              		.file 3 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\machine\\_default_types.h"
 3410              		.file 4 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\_stdint.h"
 3411              		.file 5 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3412              		.file 6 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3413              		.file 7 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_Fr
 3414              		.file 8 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\lock.h"
 3415              		.file 9 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\_types.h"
 3416              		.file 10 "d:\\arm-aupulu\\bin\\armcompilefile\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h"
 3417              		.file 11 "d:\\arm-aupulu\\bin\\armcompilefile\\arm-none-eabi\\include\\sys\\reent.h"
 3418              		.file 12 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
 3419              		.file 13 "E:\\AHL-AN10-Kit01\\AHL-AN10-Kit01(V2.0)-190817\\04-Software\\01-UE\\USER\\User_NB-IoT_F
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:16     .text.mypow:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:23     .text.mypow:00000000 mypow
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:68     .text.LCD_WR_DATA8:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:75     .text.LCD_WR_DATA8:00000000 LCD_WR_DATA8
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:127    .text.LCD_WR_DATA8:00000038 $d
                            *COM*:00000004 bios_fun_point
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:133    .text.LCD_WR_DATA:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:140    .text.LCD_WR_DATA:00000000 LCD_WR_DATA
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:197    .text.LCD_WR_DATA:00000040 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:203    .text.LCD_WR_REG:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:210    .text.LCD_WR_REG:00000000 LCD_WR_REG
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:262    .text.LCD_WR_REG:00000038 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:268    .text.LCD_WR_REG_DATA:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:275    .text.LCD_WR_REG_DATA:00000000 LCD_WR_REG_DATA
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:301    .text.Address_set:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:308    .text.Address_set:00000000 Address_set
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:379    .text.LCD_Clear:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:386    .text.LCD_Clear:00000000 LCD_Clear
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:443    .text.LCD_Init:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:450    .text.LCD_Init:00000000 LCD_Init
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:576    .text.LCD_Init:000000ac $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:585    .text.LCD_DrawPoint:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:592    .text.LCD_DrawPoint:00000000 LCD_DrawPoint
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:621    .text.LCD_DrawCircle:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:628    .text.LCD_DrawCircle:00000000 LCD_DrawCircle
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:820    .text.LCD_DrawLine:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:827    .text.LCD_DrawLine:00000000 LCD_DrawLine
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1008   .text.LCD_DrawRectangle:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1015   .text.LCD_DrawRectangle:00000000 LCD_DrawRectangle
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1076   .text.LCD_ShowCharactor:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1083   .text.LCD_ShowCharactor:00000000 LCD_ShowCharactor
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1167   .text.LCD_ShowString:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1174   .text.LCD_ShowString:00000000 LCD_ShowString
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1418   .text.LCD_ShowString:000000fc $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1870   .rodata.nAsciiDot:00000000 nAsciiDot
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1424   .text.LCD_DrawSurface:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1431   .text.LCD_DrawSurface:00000000 LCD_DrawSurface
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1510   .text.LCD_DrawPoint_big:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1517   .text.LCD_DrawPoint_big:00000000 LCD_DrawPoint_big
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1554   .text.LCD_aotu:00000000 $t
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1561   .text.LCD_aotu:00000000 LCD_aotu
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1704   .text.LCD_aotu:000000cc $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1861   .rodata.cmdC:00000000 cmdC
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1841   .rodata.cmdB:00000000 cmdB
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1821   .rodata.cmdA:00000000 cmdA
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1713   .rodata.GB_16:00000000 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1717   .rodata.GB_16:00000000 GB_16
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1818   .rodata.cmdA:00000000 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1838   .rodata.cmdB:00000000 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1858   .rodata.cmdC:00000000 $d
C:\Users\WYH\AppData\Local\Temp\ccICHZZF.s:1867   .rodata.nAsciiDot:00000000 $d
                           .group:00000000 wm4.0.6b3c261c075bbc2e3a26f120e5522d74
                           .group:00000000 wm4.common.h.8.6facd6346498fe3b182946a20345c657
                           .group:00000000 wm4.MKL36Z4.h.89.233797f6f4773763e2e98c6b40e4b5ad
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.cf97d4c9a045ebab6d282f6356e11363
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.MKL36Z4.h.102.9aa70adc1bfde53db48a5cdc9c11b855
                           .group:00000000 wm4.core_cm0plus.h.43.8d0a7c3b62d57d3de08e0cf260e796f5
                           .group:00000000 wm4.core_cmInstr.h.39.440aa208ad4c1679c5765c09acc09994
                           .group:00000000 wm4.core_cm0plus.h.160.b16144213bf005ce96482cc39658f3eb
                           .group:00000000 wm4.MKL36Z4.h.268.27ad2c3218b31878c72d973b76832d3c
                           .group:00000000 wm4.mcu.h.18.69f4b5b87d8a116f794509cd91218d13
                           .group:00000000 wm4.svc.h.9.5456cf514b156c422bc4546fad33f63e
                           .group:00000000 wm4.common.h.16.7db62d7e34981cef069189d29572a8d0
                           .group:00000000 wm4.newlib.h.8.e0fd068ed40a600f7426443f865dd469
                           .group:00000000 wm4.ieeefp.h.77.49bcce8a603f3d93a95080d6a3573782
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.7120b8bb2e0149e2359704f4e2251b68
                           .group:00000000 wm4.reent.h.17.87376802c2b370b32a762f0a30482d9e
                           .group:00000000 wm4.cdefs.h.47.b99d69adf76e00132150c6ca209cbd8f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.adc.h.16.46085ea51e91d3cad1570882ff063879
                           .group:00000000 wm4.gpio.h.10.986b0e721a5f8dc53d90b6e6479bc010
                           .group:00000000 wm4.timer.h.9.0c2434e998dc154a3e9828da4a1f6235
                           .group:00000000 wm4.uart.h.10.bff5e701e40630e1d7de2b8037fde34b
                           .group:00000000 wm4.flash.h.10.6c61dd182e565e4eb3a9a8d3876dbdb0
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stdlib.h.56.b4ddaf162082f284ba35b4444af99a9a
                           .group:00000000 wm4.uecom.h.31.34c033455bb0111d79414f629e02f44f
                           .group:00000000 wm4.gec.h.47.b03261d3256f000bba71e6d32e104a70
                           .group:00000000 wm4.lcd.h.16.07e6cb17182c76567b2118948559a1e8

UNDEFINED SYMBOLS
spi_send1
spi_init
Delay_ms
